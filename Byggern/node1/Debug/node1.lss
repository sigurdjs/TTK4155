
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011e  00800100  00000f0e  00000fa2  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000f0e  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080021e  0080021e  000010c0  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000010c0  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  0000111c  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   00001534  00000000  00000000  000012cc  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a14  00000000  00000000  00002800  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008b3  00000000  00000000  00003214  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003ec  00000000  00000000  00003ac8  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000481  00000000  00000000  00003eb4  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a4c  00000000  00000000  00004335  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00004d81  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ee e0       	ldi	r30, 0x0E	; 14
  84:	ff e0       	ldi	r31, 0x0F	; 15
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ae 31       	cpi	r26, 0x1E	; 30
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ae e1       	ldi	r26, 0x1E	; 30
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a6 32       	cpi	r26, 0x26	; 38
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 67 00 	call	0xce	; 0xce <main>
  a6:	0c 94 85 07 	jmp	0xf0a	; 0xf0a <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include "setup.h"
#include "adc.h"

void adc_init(void) {
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
	DDRE &= ~(1<<PINE0);    //Enable interrupt pin
  ba:	30 98       	cbi	0x06, 0	; 6
  bc:	08 95       	ret

000000be <adc_read>:
}

uint8_t adc_read(adc_channel channel) {
	volatile char *adc = (char *) 0x1400;

	*adc = 0x04 | channel;
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 93 00 14 	sts	0x1400, r24
	wait_until_bit_is_clear(PINE,PINE0);
  c4:	28 99       	sbic	0x05, 0	; 5
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <adc_read+0x6>
	return *adc;
  c8:	80 91 00 14 	lds	r24, 0x1400
}
  cc:	08 95       	ret

000000ce <main>:
#include "mcp2515.h"
#include "can.h"
#include <util/delay.h>


int main(void) {
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	2a 97       	sbiw	r28, 0x0a	; 10
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
	adc_init();	
  e2:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	uart_init();
  e6:	0e 94 94 02 	call	0x528	; 0x528 <uart_init>

	sram_test();
  ea:	0e 94 07 02 	call	0x40e	; 0x40e <sram_test>
	//oled_init();
	//OLED_reset();
	joystick_position pos;
	can_init();
  ee:	0e 94 ae 00 	call	0x15c	; 0x15c <can_init>
	can_message snd_msg;
	can_message rcv_msg;
	snd_msg.id = 1;
  f2:	81 e0       	ldi	r24, 0x01	; 1
  f4:	89 83       	std	Y+1, r24	; 0x01
	joy_calibrate();
  f6:	0e 94 2b 01 	call	0x256	; 0x256 <joy_calibrate>
    {	
		
		pos = get_joy_position();
		snd_msg.data[0] = (signed char) pos.x_pos;
		snd_msg.data[1] = (signed char) pos.y_pos;
		snd_msg.length = 2;
  fa:	68 94       	set
  fc:	ff 24       	eor	r15, r15
  fe:	f1 f8       	bld	r15, 1
	snd_msg.id = 1;
	joy_calibrate();
	while(1)
    {	
		
		pos = get_joy_position();
 100:	0e 94 36 01 	call	0x26c	; 0x26c <get_joy_position>
		snd_msg.data[0] = (signed char) pos.x_pos;
 104:	6b 83       	std	Y+3, r22	; 0x03
		snd_msg.data[1] = (signed char) pos.y_pos;
 106:	8c 83       	std	Y+4, r24	; 0x04
		snd_msg.length = 2;
 108:	fa 82       	std	Y+2, r15	; 0x02
		printf("Sending message...\n");
 10a:	8e e0       	ldi	r24, 0x0E	; 14
 10c:	91 e0       	ldi	r25, 0x01	; 1
 10e:	0e 94 a9 04 	call	0x952	; 0x952 <puts>
		can_send(snd_msg);
 112:	09 81       	ldd	r16, Y+1	; 0x01
 114:	1a 81       	ldd	r17, Y+2	; 0x02
 116:	2b 81       	ldd	r18, Y+3	; 0x03
 118:	3c 81       	ldd	r19, Y+4	; 0x04
 11a:	4d 81       	ldd	r20, Y+5	; 0x05
 11c:	5e 81       	ldd	r21, Y+6	; 0x06
 11e:	6f 81       	ldd	r22, Y+7	; 0x07
 120:	78 85       	ldd	r23, Y+8	; 0x08
 122:	89 85       	ldd	r24, Y+9	; 0x09
 124:	9a 85       	ldd	r25, Y+10	; 0x0a
 126:	0e 94 d1 00 	call	0x1a2	; 0x1a2 <can_send>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 12a:	80 e0       	ldi	r24, 0x00	; 0
 12c:	90 ef       	ldi	r25, 0xF0	; 240
 12e:	01 97       	sbiw	r24, 0x01	; 1
 130:	f1 f7       	brne	.-4      	; 0x12e <main+0x60>
 132:	e6 cf       	rjmp	.-52     	; 0x100 <main+0x32>

00000134 <can_set_mode>:
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);
	//can_set_mode(MODE_NORMAL);
	return EXIT_SUCCESS;
}

int can_set_mode(char mode) {
 134:	cf 93       	push	r28
 136:	c8 2f       	mov	r28, r24
	mcp2515_bit_modify(MCP_CANCTRL,MODE_MASK,mode);
 138:	48 2f       	mov	r20, r24
 13a:	60 ee       	ldi	r22, 0xE0	; 224
 13c:	8f e0       	ldi	r24, 0x0F	; 15
 13e:	0e 94 d7 01 	call	0x3ae	; 0x3ae <mcp2515_bit_modify>
	char new_mode = mcp2515_read(MCP_CANSTAT);
 142:	8e e0       	ldi	r24, 0x0E	; 14
 144:	0e 94 a6 01 	call	0x34c	; 0x34c <mcp2515_read>
	new_mode = new_mode & MODE_MASK;
 148:	80 7e       	andi	r24, 0xE0	; 224
	if(new_mode != mode) {
 14a:	21 e0       	ldi	r18, 0x01	; 1
 14c:	30 e0       	ldi	r19, 0x00	; 0
 14e:	c8 13       	cpse	r28, r24
 150:	02 c0       	rjmp	.+4      	; 0x156 <can_set_mode+0x22>
 152:	20 e0       	ldi	r18, 0x00	; 0
 154:	30 e0       	ldi	r19, 0x00	; 0
		return EXIT_FAILURE;
	} else{
		return EXIT_SUCCESS;
	}
}
 156:	c9 01       	movw	r24, r18
 158:	cf 91       	pop	r28
 15a:	08 95       	ret

0000015c <can_init>:
#include "can.h"

int can_init(void) {
 15c:	cf 93       	push	r28
 15e:	df 93       	push	r29
	clear_bit(DDRD,PIND2);    //Enable new message interrupt pin
 160:	8a 98       	cbi	0x11, 2	; 17
	
	mcp2515_init();
 162:	0e 94 a1 01 	call	0x342	; 0x342 <mcp2515_init>
	if (can_set_mode(MODE_CONFIG) != 0) {
 166:	80 e8       	ldi	r24, 0x80	; 128
 168:	0e 94 9a 00 	call	0x134	; 0x134 <can_set_mode>
 16c:	ec 01       	movw	r28, r24
 16e:	00 97       	sbiw	r24, 0x00	; 0
 170:	39 f0       	breq	.+14     	; 0x180 <can_init+0x24>
		printf("MCP2515 reset failed! \n");
 172:	81 e2       	ldi	r24, 0x21	; 33
 174:	91 e0       	ldi	r25, 0x01	; 1
 176:	0e 94 a9 04 	call	0x952	; 0x952 <puts>
		return EXIT_FAILURE;
 17a:	c1 e0       	ldi	r28, 0x01	; 1
 17c:	d0 e0       	ldi	r29, 0x00	; 0
 17e:	0d c0       	rjmp	.+26     	; 0x19a <can_init+0x3e>
	}
	can_set_mode(MODE_NORMAL);
 180:	80 e0       	ldi	r24, 0x00	; 0
 182:	0e 94 9a 00 	call	0x134	; 0x134 <can_set_mode>
	
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100100, 0xFF);
 186:	4f ef       	ldi	r20, 0xFF	; 255
 188:	64 e6       	ldi	r22, 0x64	; 100
 18a:	80 e6       	ldi	r24, 0x60	; 96
 18c:	0e 94 d7 01 	call	0x3ae	; 0x3ae <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);
 190:	41 e0       	ldi	r20, 0x01	; 1
 192:	61 e0       	ldi	r22, 0x01	; 1
 194:	8b e2       	ldi	r24, 0x2B	; 43
 196:	0e 94 d7 01 	call	0x3ae	; 0x3ae <mcp2515_bit_modify>
	//can_set_mode(MODE_NORMAL);
	return EXIT_SUCCESS;
}
 19a:	ce 01       	movw	r24, r28
 19c:	df 91       	pop	r29
 19e:	cf 91       	pop	r28
 1a0:	08 95       	ret

000001a2 <can_send>:
	} else{
		return EXIT_SUCCESS;
	}
}

void can_send(can_message message) {
 1a2:	cf 92       	push	r12
 1a4:	df 92       	push	r13
 1a6:	ef 92       	push	r14
 1a8:	ff 92       	push	r15
 1aa:	0f 93       	push	r16
 1ac:	1f 93       	push	r17
 1ae:	cf 93       	push	r28
 1b0:	df 93       	push	r29
 1b2:	cd b7       	in	r28, 0x3d	; 61
 1b4:	de b7       	in	r29, 0x3e	; 62
 1b6:	2a 97       	sbiw	r28, 0x0a	; 10
 1b8:	0f b6       	in	r0, 0x3f	; 63
 1ba:	f8 94       	cli
 1bc:	de bf       	out	0x3e, r29	; 62
 1be:	0f be       	out	0x3f, r0	; 63
 1c0:	cd bf       	out	0x3d, r28	; 61
 1c2:	09 83       	std	Y+1, r16	; 0x01
 1c4:	c1 2e       	mov	r12, r17
 1c6:	1a 83       	std	Y+2, r17	; 0x02
 1c8:	2b 83       	std	Y+3, r18	; 0x03
 1ca:	3c 83       	std	Y+4, r19	; 0x04
 1cc:	4d 83       	std	Y+5, r20	; 0x05
 1ce:	5e 83       	std	Y+6, r21	; 0x06
 1d0:	6f 83       	std	Y+7, r22	; 0x07
 1d2:	78 87       	std	Y+8, r23	; 0x08
 1d4:	89 87       	std	Y+9, r24	; 0x09
 1d6:	9a 87       	std	Y+10, r25	; 0x0a
	wait_until_bit_is_clear(mcp2515_read(MCP_TXB0CTRL),3);
 1d8:	80 e3       	ldi	r24, 0x30	; 48
 1da:	0e 94 a6 01 	call	0x34c	; 0x34c <mcp2515_read>
 1de:	83 fd       	sbrc	r24, 3
 1e0:	fb cf       	rjmp	.-10     	; 0x1d8 <can_send+0x36>
	
	mcp2515_write(MCP_TXB0SIDH,(uint8_t) (message.id >> 3));
 1e2:	60 2f       	mov	r22, r16
 1e4:	66 95       	lsr	r22
 1e6:	66 95       	lsr	r22
 1e8:	66 95       	lsr	r22
 1ea:	81 e3       	ldi	r24, 0x31	; 49
 1ec:	0e 94 b8 01 	call	0x370	; 0x370 <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL,(uint8_t) (message.id << 5));
 1f0:	60 2f       	mov	r22, r16
 1f2:	62 95       	swap	r22
 1f4:	66 0f       	add	r22, r22
 1f6:	60 7e       	andi	r22, 0xE0	; 224
 1f8:	82 e3       	ldi	r24, 0x32	; 50
 1fa:	0e 94 b8 01 	call	0x370	; 0x370 <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC,(uint8_t) (message.length));
 1fe:	6c 2d       	mov	r22, r12
 200:	85 e3       	ldi	r24, 0x35	; 53
 202:	0e 94 b8 01 	call	0x370	; 0x370 <mcp2515_write>
	for (int i = 0; i < message.length; i++) {
 206:	d1 2c       	mov	r13, r1
 208:	1c 14       	cp	r1, r12
 20a:	1d 04       	cpc	r1, r13
 20c:	94 f4       	brge	.+36     	; 0x232 <can_send+0x90>
 20e:	7e 01       	movw	r14, r28
 210:	83 e0       	ldi	r24, 0x03	; 3
 212:	e8 0e       	add	r14, r24
 214:	f1 1c       	adc	r15, r1
 216:	00 e0       	ldi	r16, 0x00	; 0
 218:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, (signed char) message.data[i]);
 21a:	f7 01       	movw	r30, r14
 21c:	61 91       	ld	r22, Z+
 21e:	7f 01       	movw	r14, r30
 220:	86 e3       	ldi	r24, 0x36	; 54
 222:	80 0f       	add	r24, r16
 224:	0e 94 b8 01 	call	0x370	; 0x370 <mcp2515_write>
	wait_until_bit_is_clear(mcp2515_read(MCP_TXB0CTRL),3);
	
	mcp2515_write(MCP_TXB0SIDH,(uint8_t) (message.id >> 3));
	mcp2515_write(MCP_TXB0SIDL,(uint8_t) (message.id << 5));
	mcp2515_write(MCP_TXB0DLC,(uint8_t) (message.length));
	for (int i = 0; i < message.length; i++) {
 228:	0f 5f       	subi	r16, 0xFF	; 255
 22a:	1f 4f       	sbci	r17, 0xFF	; 255
 22c:	0c 15       	cp	r16, r12
 22e:	1d 05       	cpc	r17, r13
 230:	a4 f3       	brlt	.-24     	; 0x21a <can_send+0x78>
		mcp2515_write(MCP_TXB0D0 + i, (signed char) message.data[i]);
	}
	
	mcp2515_req_to_send(MCP_RTS_TX0);	
 232:	81 e8       	ldi	r24, 0x81	; 129
 234:	0e 94 cc 01 	call	0x398	; 0x398 <mcp2515_req_to_send>
}
 238:	2a 96       	adiw	r28, 0x0a	; 10
 23a:	0f b6       	in	r0, 0x3f	; 63
 23c:	f8 94       	cli
 23e:	de bf       	out	0x3e, r29	; 62
 240:	0f be       	out	0x3f, r0	; 63
 242:	cd bf       	out	0x3d, r28	; 61
 244:	df 91       	pop	r29
 246:	cf 91       	pop	r28
 248:	1f 91       	pop	r17
 24a:	0f 91       	pop	r16
 24c:	ff 90       	pop	r15
 24e:	ef 90       	pop	r14
 250:	df 90       	pop	r13
 252:	cf 90       	pop	r12
 254:	08 95       	ret

00000256 <joy_calibrate>:
void joy_init() {
    adc_init();
}

void joy_calibrate() {
    zero_x = adc_read(JOY_X);
 256:	80 e0       	ldi	r24, 0x00	; 0
 258:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 25c:	80 93 1f 02 	sts	0x021F, r24
    zero_y = adc_read(JOY_Y);
 260:	81 e0       	ldi	r24, 0x01	; 1
 262:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 266:	80 93 1e 02 	sts	0x021E, r24
 26a:	08 95       	ret

0000026c <get_joy_position>:
}

joystick_position get_joy_position(void) {
 26c:	8f 92       	push	r8
 26e:	9f 92       	push	r9
 270:	af 92       	push	r10
 272:	bf 92       	push	r11
 274:	cf 92       	push	r12
 276:	df 92       	push	r13
 278:	ef 92       	push	r14
 27a:	ff 92       	push	r15
    joystick_position pos;
    pos.x_pos = (int16_t) 100*(((double) adc_read(JOY_X) - (double) zero_x)/129);
 27c:	80 e0       	ldi	r24, 0x00	; 0
 27e:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 282:	68 2f       	mov	r22, r24
 284:	70 e0       	ldi	r23, 0x00	; 0
 286:	80 e0       	ldi	r24, 0x00	; 0
 288:	90 e0       	ldi	r25, 0x00	; 0
 28a:	0e 94 a4 03 	call	0x748	; 0x748 <__floatunsisf>
 28e:	6b 01       	movw	r12, r22
 290:	7c 01       	movw	r14, r24
 292:	60 91 1f 02 	lds	r22, 0x021F
 296:	70 e0       	ldi	r23, 0x00	; 0
 298:	80 e0       	ldi	r24, 0x00	; 0
 29a:	90 e0       	ldi	r25, 0x00	; 0
 29c:	0e 94 a4 03 	call	0x748	; 0x748 <__floatunsisf>
 2a0:	9b 01       	movw	r18, r22
 2a2:	ac 01       	movw	r20, r24
 2a4:	c7 01       	movw	r24, r14
 2a6:	b6 01       	movw	r22, r12
 2a8:	0e 94 a6 02 	call	0x54c	; 0x54c <__subsf3>
 2ac:	20 e0       	ldi	r18, 0x00	; 0
 2ae:	30 e0       	ldi	r19, 0x00	; 0
 2b0:	41 e0       	ldi	r20, 0x01	; 1
 2b2:	53 e4       	ldi	r21, 0x43	; 67
 2b4:	0e 94 0b 03 	call	0x616	; 0x616 <__divsf3>
 2b8:	20 e0       	ldi	r18, 0x00	; 0
 2ba:	30 e0       	ldi	r19, 0x00	; 0
 2bc:	48 ec       	ldi	r20, 0xC8	; 200
 2be:	52 e4       	ldi	r21, 0x42	; 66
 2c0:	0e 94 32 04 	call	0x864	; 0x864 <__mulsf3>
 2c4:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fixsfsi>
 2c8:	6b 01       	movw	r12, r22
 2ca:	7c 01       	movw	r14, r24
    pos.y_pos = (int16_t) 100*(((double) adc_read(JOY_Y) - (double) zero_y)/129);
 2cc:	81 e0       	ldi	r24, 0x01	; 1
 2ce:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 2d2:	68 2f       	mov	r22, r24
 2d4:	70 e0       	ldi	r23, 0x00	; 0
 2d6:	80 e0       	ldi	r24, 0x00	; 0
 2d8:	90 e0       	ldi	r25, 0x00	; 0
 2da:	0e 94 a4 03 	call	0x748	; 0x748 <__floatunsisf>
 2de:	4b 01       	movw	r8, r22
 2e0:	5c 01       	movw	r10, r24
 2e2:	60 91 1e 02 	lds	r22, 0x021E
 2e6:	70 e0       	ldi	r23, 0x00	; 0
 2e8:	80 e0       	ldi	r24, 0x00	; 0
 2ea:	90 e0       	ldi	r25, 0x00	; 0
 2ec:	0e 94 a4 03 	call	0x748	; 0x748 <__floatunsisf>
 2f0:	9b 01       	movw	r18, r22
 2f2:	ac 01       	movw	r20, r24
 2f4:	c5 01       	movw	r24, r10
 2f6:	b4 01       	movw	r22, r8
 2f8:	0e 94 a6 02 	call	0x54c	; 0x54c <__subsf3>
 2fc:	20 e0       	ldi	r18, 0x00	; 0
 2fe:	30 e0       	ldi	r19, 0x00	; 0
 300:	41 e0       	ldi	r20, 0x01	; 1
 302:	53 e4       	ldi	r21, 0x43	; 67
 304:	0e 94 0b 03 	call	0x616	; 0x616 <__divsf3>
 308:	20 e0       	ldi	r18, 0x00	; 0
 30a:	30 e0       	ldi	r19, 0x00	; 0
 30c:	48 ec       	ldi	r20, 0xC8	; 200
 30e:	52 e4       	ldi	r21, 0x42	; 66
 310:	0e 94 32 04 	call	0x864	; 0x864 <__mulsf3>
 314:	0e 94 73 03 	call	0x6e6	; 0x6e6 <__fixsfsi>
 318:	4b 01       	movw	r8, r22
 31a:	5c 01       	movw	r10, r24
    return pos;
 31c:	b6 01       	movw	r22, r12
 31e:	c4 01       	movw	r24, r8
}
 320:	ff 90       	pop	r15
 322:	ef 90       	pop	r14
 324:	df 90       	pop	r13
 326:	cf 90       	pop	r12
 328:	bf 90       	pop	r11
 32a:	af 90       	pop	r10
 32c:	9f 90       	pop	r9
 32e:	8f 90       	pop	r8
 330:	08 95       	ret

00000332 <mcp2515_reset>:
	mcp2515_reset();
}


void mcp2515_reset(void) {
	spi_select();
 332:	0e 94 03 02 	call	0x406	; 0x406 <spi_select>
	spi_write(MCP_RESET);
 336:	80 ec       	ldi	r24, 0xC0	; 192
 338:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_deselect();
 33c:	0e 94 05 02 	call	0x40a	; 0x40a <spi_deselect>
 340:	08 95       	ret

00000342 <mcp2515_init>:
#include "mcp2515.h"

void mcp2515_init(void) {
	spi_init();
 342:	0e 94 f1 01 	call	0x3e2	; 0x3e2 <spi_init>
	mcp2515_reset();
 346:	0e 94 99 01 	call	0x332	; 0x332 <mcp2515_reset>
 34a:	08 95       	ret

0000034c <mcp2515_read>:
	spi_select();
	spi_write(MCP_RESET);
	spi_deselect();
}

char mcp2515_read(char reg_address) {
 34c:	cf 93       	push	r28
 34e:	c8 2f       	mov	r28, r24
	spi_select();
 350:	0e 94 03 02 	call	0x406	; 0x406 <spi_select>
	spi_write(MCP_READ);
 354:	83 e0       	ldi	r24, 0x03	; 3
 356:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_write(reg_address);
 35a:	8c 2f       	mov	r24, r28
 35c:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	char result = spi_read();
 360:	0e 94 fc 01 	call	0x3f8	; 0x3f8 <spi_read>
 364:	c8 2f       	mov	r28, r24
	spi_deselect();
 366:	0e 94 05 02 	call	0x40a	; 0x40a <spi_deselect>
	return result;
}
 36a:	8c 2f       	mov	r24, r28
 36c:	cf 91       	pop	r28
 36e:	08 95       	ret

00000370 <mcp2515_write>:

void mcp2515_write(char reg_address, char data) {
 370:	cf 93       	push	r28
 372:	df 93       	push	r29
 374:	d8 2f       	mov	r29, r24
 376:	c6 2f       	mov	r28, r22
	spi_select();
 378:	0e 94 03 02 	call	0x406	; 0x406 <spi_select>
	spi_write(MCP_WRITE);
 37c:	82 e0       	ldi	r24, 0x02	; 2
 37e:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_write(reg_address);
 382:	8d 2f       	mov	r24, r29
 384:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_write(data);
 388:	8c 2f       	mov	r24, r28
 38a:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_deselect();
 38e:	0e 94 05 02 	call	0x40a	; 0x40a <spi_deselect>
}
 392:	df 91       	pop	r29
 394:	cf 91       	pop	r28
 396:	08 95       	ret

00000398 <mcp2515_req_to_send>:

void mcp2515_req_to_send(char buf_address) {
 398:	cf 93       	push	r28
 39a:	c8 2f       	mov	r28, r24
	spi_select();
 39c:	0e 94 03 02 	call	0x406	; 0x406 <spi_select>
	spi_write(buf_address);
 3a0:	8c 2f       	mov	r24, r28
 3a2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_deselect();
 3a6:	0e 94 05 02 	call	0x40a	; 0x40a <spi_deselect>
}
 3aa:	cf 91       	pop	r28
 3ac:	08 95       	ret

000003ae <mcp2515_bit_modify>:
	char result = spi_read();
	spi_deselect();
	return result;	
}

void mcp2515_bit_modify(char reg_address, char mask, char data) {
 3ae:	1f 93       	push	r17
 3b0:	cf 93       	push	r28
 3b2:	df 93       	push	r29
 3b4:	18 2f       	mov	r17, r24
 3b6:	d6 2f       	mov	r29, r22
 3b8:	c4 2f       	mov	r28, r20
	spi_select();
 3ba:	0e 94 03 02 	call	0x406	; 0x406 <spi_select>
	spi_write(MCP_BITMOD);
 3be:	85 e0       	ldi	r24, 0x05	; 5
 3c0:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_write(reg_address);
 3c4:	81 2f       	mov	r24, r17
 3c6:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_write(mask);
 3ca:	8d 2f       	mov	r24, r29
 3cc:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_write(data);
 3d0:	8c 2f       	mov	r24, r28
 3d2:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	spi_deselect();
 3d6:	0e 94 05 02 	call	0x40a	; 0x40a <spi_deselect>
 3da:	df 91       	pop	r29
 3dc:	cf 91       	pop	r28
 3de:	1f 91       	pop	r17
 3e0:	08 95       	ret

000003e2 <spi_init>:
#include "spi.h"

void spi_init(void) {
	// Set MOSI, SCK and SS output, MISO input 
	set_bit(DDR_SPI,DD_MOSI);
 3e2:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDR_SPI,DD_SCK);
 3e4:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDR_SPI,DD_SS);
 3e6:	bc 9a       	sbi	0x17, 4	; 23
	clear_bit(DDR_SPI,DD_MISO);
 3e8:	be 98       	cbi	0x17, 6	; 23
	// Enable SPI, Master, set clock rate fck/16 
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 3ea:	81 e5       	ldi	r24, 0x51	; 81
 3ec:	8d b9       	out	0x0d, r24	; 13
 3ee:	08 95       	ret

000003f0 <spi_write>:
}

void spi_write(char data) {
	/* Start transmission */
	SPDR = data;
 3f0:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	wait_until_bit_is_set(SPSR,SPIF);
 3f2:	77 9b       	sbis	0x0e, 7	; 14
 3f4:	fe cf       	rjmp	.-4      	; 0x3f2 <spi_write+0x2>
}
 3f6:	08 95       	ret

000003f8 <spi_read>:

char spi_read(void) {
	// Something needs to be sent to be able to read the spi register
	spi_write(0);
 3f8:	80 e0       	ldi	r24, 0x00	; 0
 3fa:	0e 94 f8 01 	call	0x3f0	; 0x3f0 <spi_write>
	
	wait_until_bit_is_set(SPSR,SPIF);
 3fe:	77 9b       	sbis	0x0e, 7	; 14
 400:	fe cf       	rjmp	.-4      	; 0x3fe <spi_read+0x6>
	return SPDR;
 402:	8f b1       	in	r24, 0x0f	; 15
}
 404:	08 95       	ret

00000406 <spi_select>:

void spi_select(void) {
	clear_bit(PORTB,PINB4);
 406:	c4 98       	cbi	0x18, 4	; 24
 408:	08 95       	ret

0000040a <spi_deselect>:
}


void spi_deselect(void) {
	set_bit(PORTB,PINB4);
 40a:	c4 9a       	sbi	0x18, 4	; 24
 40c:	08 95       	ret

0000040e <sram_test>:
#include "setup.h"
#include "sram.h"

void sram_test(void) {
 40e:	cf 92       	push	r12
 410:	df 92       	push	r13
 412:	ef 92       	push	r14
 414:	ff 92       	push	r15
 416:	0f 93       	push	r16
 418:	1f 93       	push	r17
 41a:	cf 93       	push	r28
 41c:	df 93       	push	r29
	uint16_t i, werrors, rerrors;
	werrors = 0;
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
 41e:	88 e3       	ldi	r24, 0x38	; 56
 420:	91 e0       	ldi	r25, 0x01	; 1
 422:	0e 94 a9 04 	call	0x952	; 0x952 <puts>
void sram_test(void) {
    //Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;

	uint16_t i, werrors, rerrors;
	werrors = 0;
 426:	00 e0       	ldi	r16, 0x00	; 0
 428:	10 e0       	ldi	r17, 0x00	; 0
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
 42a:	c0 e0       	ldi	r28, 0x00	; 0
 42c:	d0 e0       	ldi	r29, 0x00	; 0
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
		if (ext_ram[i] != testvalue) {
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
 42e:	0f 2e       	mov	r0, r31
 430:	ff e4       	ldi	r31, 0x4F	; 79
 432:	ef 2e       	mov	r14, r31
 434:	f1 e0       	ldi	r31, 0x01	; 1
 436:	ff 2e       	mov	r15, r31
 438:	f0 2d       	mov	r31, r0
 43a:	8c 2f       	mov	r24, r28
 43c:	80 95       	com	r24
 43e:	fe 01       	movw	r30, r28
 440:	f8 5e       	subi	r31, 0xE8	; 232

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
 442:	80 83       	st	Z, r24
		if (ext_ram[i] != testvalue) {
 444:	90 81       	ld	r25, Z
 446:	98 17       	cp	r25, r24
 448:	a9 f0       	breq	.+42     	; 0x474 <sram_test+0x66>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
 44a:	90 81       	ld	r25, Z
 44c:	1f 92       	push	r1
 44e:	8f 93       	push	r24
 450:	1f 92       	push	r1
 452:	9f 93       	push	r25
 454:	df 93       	push	r29
 456:	cf 93       	push	r28
 458:	ff 92       	push	r15
 45a:	ef 92       	push	r14
 45c:	0e 94 95 04 	call	0x92a	; 0x92a <printf>
			werrors++;
 460:	0f 5f       	subi	r16, 0xFF	; 255
 462:	1f 4f       	sbci	r17, 0xFF	; 255
 464:	8d b7       	in	r24, 0x3d	; 61
 466:	9e b7       	in	r25, 0x3e	; 62
 468:	08 96       	adiw	r24, 0x08	; 8
 46a:	0f b6       	in	r0, 0x3f	; 63
 46c:	f8 94       	cli
 46e:	9e bf       	out	0x3e, r25	; 62
 470:	0f be       	out	0x3f, r0	; 63
 472:	8d bf       	out	0x3d, r24	; 61
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
 474:	21 96       	adiw	r28, 0x01	; 1
 476:	c1 15       	cp	r28, r1
 478:	98 e0       	ldi	r25, 0x08	; 8
 47a:	d9 07       	cpc	r29, r25
 47c:	f1 f6       	brne	.-68     	; 0x43a <sram_test+0x2c>
 47e:	e1 2c       	mov	r14, r1
 480:	f1 2c       	mov	r15, r1
 482:	c0 e0       	ldi	r28, 0x00	; 0
 484:	d0 e0       	ldi	r29, 0x00	; 0
	}

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		if (ext_ram[i] != testvalue) {
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
 486:	0f 2e       	mov	r0, r31
 488:	ff e8       	ldi	r31, 0x8F	; 143
 48a:	cf 2e       	mov	r12, r31
 48c:	f1 e0       	ldi	r31, 0x01	; 1
 48e:	df 2e       	mov	r13, r31
 490:	f0 2d       	mov	r31, r0
 492:	8c 2f       	mov	r24, r28
 494:	80 95       	com	r24
 496:	fe 01       	movw	r30, r28
 498:	f8 5e       	subi	r31, 0xE8	; 232
		}
	}

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		if (ext_ram[i] != testvalue) {
 49a:	90 81       	ld	r25, Z
 49c:	89 17       	cp	r24, r25
 49e:	b1 f0       	breq	.+44     	; 0x4cc <sram_test+0xbe>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
 4a0:	90 81       	ld	r25, Z
 4a2:	1f 92       	push	r1
 4a4:	8f 93       	push	r24
 4a6:	1f 92       	push	r1
 4a8:	9f 93       	push	r25
 4aa:	df 93       	push	r29
 4ac:	cf 93       	push	r28
 4ae:	df 92       	push	r13
 4b0:	cf 92       	push	r12
 4b2:	0e 94 95 04 	call	0x92a	; 0x92a <printf>
			rerrors++;
 4b6:	8f ef       	ldi	r24, 0xFF	; 255
 4b8:	e8 1a       	sub	r14, r24
 4ba:	f8 0a       	sbc	r15, r24
 4bc:	8d b7       	in	r24, 0x3d	; 61
 4be:	9e b7       	in	r25, 0x3e	; 62
 4c0:	08 96       	adiw	r24, 0x08	; 8
 4c2:	0f b6       	in	r0, 0x3f	; 63
 4c4:	f8 94       	cli
 4c6:	9e bf       	out	0x3e, r25	; 62
 4c8:	0f be       	out	0x3f, r0	; 63
 4ca:	8d bf       	out	0x3d, r24	; 61
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			werrors++;
		}
	}

	for (i = 0; i < 0x800; i++) {
 4cc:	21 96       	adiw	r28, 0x01	; 1
 4ce:	c1 15       	cp	r28, r1
 4d0:	98 e0       	ldi	r25, 0x08	; 8
 4d2:	d9 07       	cpc	r29, r25
 4d4:	f1 f6       	brne	.-68     	; 0x492 <sram_test+0x84>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			rerrors++;
		}
	}

	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
 4d6:	ff 92       	push	r15
 4d8:	ef 92       	push	r14
 4da:	1f 93       	push	r17
 4dc:	0f 93       	push	r16
 4de:	8e ec       	ldi	r24, 0xCE	; 206
 4e0:	91 e0       	ldi	r25, 0x01	; 1
 4e2:	9f 93       	push	r25
 4e4:	8f 93       	push	r24
 4e6:	0e 94 95 04 	call	0x92a	; 0x92a <printf>
 4ea:	0f 90       	pop	r0
 4ec:	0f 90       	pop	r0
 4ee:	0f 90       	pop	r0
 4f0:	0f 90       	pop	r0
 4f2:	0f 90       	pop	r0
 4f4:	0f 90       	pop	r0
}
 4f6:	df 91       	pop	r29
 4f8:	cf 91       	pop	r28
 4fa:	1f 91       	pop	r17
 4fc:	0f 91       	pop	r16
 4fe:	ff 90       	pop	r15
 500:	ef 90       	pop	r14
 502:	df 90       	pop	r13
 504:	cf 90       	pop	r12
 506:	08 95       	ret

00000508 <uart_send_char>:
	// Link to stdio
	stdout = &uart_io;
	stdin = &uart_io;
}

void uart_send_char(char c, FILE *stream) {
 508:	cf 93       	push	r28
 50a:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 50c:	8a 30       	cpi	r24, 0x0A	; 10
 50e:	19 f4       	brne	.+6      	; 0x516 <uart_send_char+0xe>
	    uart_send_char('\r', stream);
 510:	8d e0       	ldi	r24, 0x0D	; 13
 512:	0e 94 84 02 	call	0x508	; 0x508 <uart_send_char>
	}
	loop_until_bit_is_set(UCSR0A,UDRE0);
 516:	5d 9b       	sbis	0x0b, 5	; 11
 518:	fe cf       	rjmp	.-4      	; 0x516 <uart_send_char+0xe>
	UDR0 = c;
 51a:	cc b9       	out	0x0c, r28	; 12
}
 51c:	cf 91       	pop	r28
 51e:	08 95       	ret

00000520 <uart_recieve_char>:

char uart_recieve_char(FILE *stream) {
	loop_until_bit_is_set(UCSR0A,RXC0);
 520:	5f 9b       	sbis	0x0b, 7	; 11
 522:	fe cf       	rjmp	.-4      	; 0x520 <uart_recieve_char>
	return UDR0;
 524:	8c b1       	in	r24, 0x0c	; 12
}
 526:	08 95       	ret

00000528 <uart_init>:
#include "setup.h"

void uart_init() {
	//Set baud rate
	unsigned int ubrr = (F_CPU-250)/16/BAUD-1;
	UBRR0H = (unsigned char)(ubrr >> 8);
 528:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(ubrr);
 52a:	8e e1       	ldi	r24, 0x1E	; 30
 52c:	89 b9       	out	0x09, r24	; 9

	// Set 8-bit data 2 stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 52e:	8e e8       	ldi	r24, 0x8E	; 142
 530:	80 bd       	out	0x20, r24	; 32
	// Enable RX0 and TX0
	UCSR0B = (1 << RXEN0 | (1 << TXEN0));
 532:	88 e1       	ldi	r24, 0x18	; 24
 534:	8a b9       	out	0x0a, r24	; 10
	
	// Link to stdio
	stdout = &uart_io;
 536:	80 e0       	ldi	r24, 0x00	; 0
 538:	91 e0       	ldi	r25, 0x01	; 1
 53a:	90 93 23 02 	sts	0x0223, r25
 53e:	80 93 22 02 	sts	0x0222, r24
	stdin = &uart_io;
 542:	90 93 21 02 	sts	0x0221, r25
 546:	80 93 20 02 	sts	0x0220, r24
 54a:	08 95       	ret

0000054c <__subsf3>:
 54c:	50 58       	subi	r21, 0x80	; 128

0000054e <__addsf3>:
 54e:	bb 27       	eor	r27, r27
 550:	aa 27       	eor	r26, r26
 552:	0e d0       	rcall	.+28     	; 0x570 <__addsf3x>
 554:	4d c1       	rjmp	.+666    	; 0x7f0 <__fp_round>
 556:	3e d1       	rcall	.+636    	; 0x7d4 <__fp_pscA>
 558:	30 f0       	brcs	.+12     	; 0x566 <__addsf3+0x18>
 55a:	43 d1       	rcall	.+646    	; 0x7e2 <__fp_pscB>
 55c:	20 f0       	brcs	.+8      	; 0x566 <__addsf3+0x18>
 55e:	31 f4       	brne	.+12     	; 0x56c <__addsf3+0x1e>
 560:	9f 3f       	cpi	r25, 0xFF	; 255
 562:	11 f4       	brne	.+4      	; 0x568 <__addsf3+0x1a>
 564:	1e f4       	brtc	.+6      	; 0x56c <__addsf3+0x1e>
 566:	33 c1       	rjmp	.+614    	; 0x7ce <__fp_nan>
 568:	0e f4       	brtc	.+2      	; 0x56c <__addsf3+0x1e>
 56a:	e0 95       	com	r30
 56c:	e7 fb       	bst	r30, 7
 56e:	29 c1       	rjmp	.+594    	; 0x7c2 <__fp_inf>

00000570 <__addsf3x>:
 570:	e9 2f       	mov	r30, r25
 572:	4f d1       	rcall	.+670    	; 0x812 <__fp_split3>
 574:	80 f3       	brcs	.-32     	; 0x556 <__addsf3+0x8>
 576:	ba 17       	cp	r27, r26
 578:	62 07       	cpc	r22, r18
 57a:	73 07       	cpc	r23, r19
 57c:	84 07       	cpc	r24, r20
 57e:	95 07       	cpc	r25, r21
 580:	18 f0       	brcs	.+6      	; 0x588 <__addsf3x+0x18>
 582:	71 f4       	brne	.+28     	; 0x5a0 <__addsf3x+0x30>
 584:	9e f5       	brtc	.+102    	; 0x5ec <__addsf3x+0x7c>
 586:	67 c1       	rjmp	.+718    	; 0x856 <__fp_zero>
 588:	0e f4       	brtc	.+2      	; 0x58c <__addsf3x+0x1c>
 58a:	e0 95       	com	r30
 58c:	0b 2e       	mov	r0, r27
 58e:	ba 2f       	mov	r27, r26
 590:	a0 2d       	mov	r26, r0
 592:	0b 01       	movw	r0, r22
 594:	b9 01       	movw	r22, r18
 596:	90 01       	movw	r18, r0
 598:	0c 01       	movw	r0, r24
 59a:	ca 01       	movw	r24, r20
 59c:	a0 01       	movw	r20, r0
 59e:	11 24       	eor	r1, r1
 5a0:	ff 27       	eor	r31, r31
 5a2:	59 1b       	sub	r21, r25
 5a4:	99 f0       	breq	.+38     	; 0x5cc <__addsf3x+0x5c>
 5a6:	59 3f       	cpi	r21, 0xF9	; 249
 5a8:	50 f4       	brcc	.+20     	; 0x5be <__addsf3x+0x4e>
 5aa:	50 3e       	cpi	r21, 0xE0	; 224
 5ac:	68 f1       	brcs	.+90     	; 0x608 <__addsf3x+0x98>
 5ae:	1a 16       	cp	r1, r26
 5b0:	f0 40       	sbci	r31, 0x00	; 0
 5b2:	a2 2f       	mov	r26, r18
 5b4:	23 2f       	mov	r18, r19
 5b6:	34 2f       	mov	r19, r20
 5b8:	44 27       	eor	r20, r20
 5ba:	58 5f       	subi	r21, 0xF8	; 248
 5bc:	f3 cf       	rjmp	.-26     	; 0x5a4 <__addsf3x+0x34>
 5be:	46 95       	lsr	r20
 5c0:	37 95       	ror	r19
 5c2:	27 95       	ror	r18
 5c4:	a7 95       	ror	r26
 5c6:	f0 40       	sbci	r31, 0x00	; 0
 5c8:	53 95       	inc	r21
 5ca:	c9 f7       	brne	.-14     	; 0x5be <__addsf3x+0x4e>
 5cc:	7e f4       	brtc	.+30     	; 0x5ec <__addsf3x+0x7c>
 5ce:	1f 16       	cp	r1, r31
 5d0:	ba 0b       	sbc	r27, r26
 5d2:	62 0b       	sbc	r22, r18
 5d4:	73 0b       	sbc	r23, r19
 5d6:	84 0b       	sbc	r24, r20
 5d8:	ba f0       	brmi	.+46     	; 0x608 <__addsf3x+0x98>
 5da:	91 50       	subi	r25, 0x01	; 1
 5dc:	a1 f0       	breq	.+40     	; 0x606 <__addsf3x+0x96>
 5de:	ff 0f       	add	r31, r31
 5e0:	bb 1f       	adc	r27, r27
 5e2:	66 1f       	adc	r22, r22
 5e4:	77 1f       	adc	r23, r23
 5e6:	88 1f       	adc	r24, r24
 5e8:	c2 f7       	brpl	.-16     	; 0x5da <__addsf3x+0x6a>
 5ea:	0e c0       	rjmp	.+28     	; 0x608 <__addsf3x+0x98>
 5ec:	ba 0f       	add	r27, r26
 5ee:	62 1f       	adc	r22, r18
 5f0:	73 1f       	adc	r23, r19
 5f2:	84 1f       	adc	r24, r20
 5f4:	48 f4       	brcc	.+18     	; 0x608 <__addsf3x+0x98>
 5f6:	87 95       	ror	r24
 5f8:	77 95       	ror	r23
 5fa:	67 95       	ror	r22
 5fc:	b7 95       	ror	r27
 5fe:	f7 95       	ror	r31
 600:	9e 3f       	cpi	r25, 0xFE	; 254
 602:	08 f0       	brcs	.+2      	; 0x606 <__addsf3x+0x96>
 604:	b3 cf       	rjmp	.-154    	; 0x56c <__addsf3+0x1e>
 606:	93 95       	inc	r25
 608:	88 0f       	add	r24, r24
 60a:	08 f0       	brcs	.+2      	; 0x60e <__addsf3x+0x9e>
 60c:	99 27       	eor	r25, r25
 60e:	ee 0f       	add	r30, r30
 610:	97 95       	ror	r25
 612:	87 95       	ror	r24
 614:	08 95       	ret

00000616 <__divsf3>:
 616:	0c d0       	rcall	.+24     	; 0x630 <__divsf3x>
 618:	eb c0       	rjmp	.+470    	; 0x7f0 <__fp_round>
 61a:	e3 d0       	rcall	.+454    	; 0x7e2 <__fp_pscB>
 61c:	40 f0       	brcs	.+16     	; 0x62e <__divsf3+0x18>
 61e:	da d0       	rcall	.+436    	; 0x7d4 <__fp_pscA>
 620:	30 f0       	brcs	.+12     	; 0x62e <__divsf3+0x18>
 622:	21 f4       	brne	.+8      	; 0x62c <__divsf3+0x16>
 624:	5f 3f       	cpi	r21, 0xFF	; 255
 626:	19 f0       	breq	.+6      	; 0x62e <__divsf3+0x18>
 628:	cc c0       	rjmp	.+408    	; 0x7c2 <__fp_inf>
 62a:	51 11       	cpse	r21, r1
 62c:	15 c1       	rjmp	.+554    	; 0x858 <__fp_szero>
 62e:	cf c0       	rjmp	.+414    	; 0x7ce <__fp_nan>

00000630 <__divsf3x>:
 630:	f0 d0       	rcall	.+480    	; 0x812 <__fp_split3>
 632:	98 f3       	brcs	.-26     	; 0x61a <__divsf3+0x4>

00000634 <__divsf3_pse>:
 634:	99 23       	and	r25, r25
 636:	c9 f3       	breq	.-14     	; 0x62a <__divsf3+0x14>
 638:	55 23       	and	r21, r21
 63a:	b1 f3       	breq	.-20     	; 0x628 <__divsf3+0x12>
 63c:	95 1b       	sub	r25, r21
 63e:	55 0b       	sbc	r21, r21
 640:	bb 27       	eor	r27, r27
 642:	aa 27       	eor	r26, r26
 644:	62 17       	cp	r22, r18
 646:	73 07       	cpc	r23, r19
 648:	84 07       	cpc	r24, r20
 64a:	38 f0       	brcs	.+14     	; 0x65a <__divsf3_pse+0x26>
 64c:	9f 5f       	subi	r25, 0xFF	; 255
 64e:	5f 4f       	sbci	r21, 0xFF	; 255
 650:	22 0f       	add	r18, r18
 652:	33 1f       	adc	r19, r19
 654:	44 1f       	adc	r20, r20
 656:	aa 1f       	adc	r26, r26
 658:	a9 f3       	breq	.-22     	; 0x644 <__divsf3_pse+0x10>
 65a:	33 d0       	rcall	.+102    	; 0x6c2 <__divsf3_pse+0x8e>
 65c:	0e 2e       	mov	r0, r30
 65e:	3a f0       	brmi	.+14     	; 0x66e <__divsf3_pse+0x3a>
 660:	e0 e8       	ldi	r30, 0x80	; 128
 662:	30 d0       	rcall	.+96     	; 0x6c4 <__divsf3_pse+0x90>
 664:	91 50       	subi	r25, 0x01	; 1
 666:	50 40       	sbci	r21, 0x00	; 0
 668:	e6 95       	lsr	r30
 66a:	00 1c       	adc	r0, r0
 66c:	ca f7       	brpl	.-14     	; 0x660 <__divsf3_pse+0x2c>
 66e:	29 d0       	rcall	.+82     	; 0x6c2 <__divsf3_pse+0x8e>
 670:	fe 2f       	mov	r31, r30
 672:	27 d0       	rcall	.+78     	; 0x6c2 <__divsf3_pse+0x8e>
 674:	66 0f       	add	r22, r22
 676:	77 1f       	adc	r23, r23
 678:	88 1f       	adc	r24, r24
 67a:	bb 1f       	adc	r27, r27
 67c:	26 17       	cp	r18, r22
 67e:	37 07       	cpc	r19, r23
 680:	48 07       	cpc	r20, r24
 682:	ab 07       	cpc	r26, r27
 684:	b0 e8       	ldi	r27, 0x80	; 128
 686:	09 f0       	breq	.+2      	; 0x68a <__divsf3_pse+0x56>
 688:	bb 0b       	sbc	r27, r27
 68a:	80 2d       	mov	r24, r0
 68c:	bf 01       	movw	r22, r30
 68e:	ff 27       	eor	r31, r31
 690:	93 58       	subi	r25, 0x83	; 131
 692:	5f 4f       	sbci	r21, 0xFF	; 255
 694:	2a f0       	brmi	.+10     	; 0x6a0 <__divsf3_pse+0x6c>
 696:	9e 3f       	cpi	r25, 0xFE	; 254
 698:	51 05       	cpc	r21, r1
 69a:	68 f0       	brcs	.+26     	; 0x6b6 <__divsf3_pse+0x82>
 69c:	92 c0       	rjmp	.+292    	; 0x7c2 <__fp_inf>
 69e:	dc c0       	rjmp	.+440    	; 0x858 <__fp_szero>
 6a0:	5f 3f       	cpi	r21, 0xFF	; 255
 6a2:	ec f3       	brlt	.-6      	; 0x69e <__divsf3_pse+0x6a>
 6a4:	98 3e       	cpi	r25, 0xE8	; 232
 6a6:	dc f3       	brlt	.-10     	; 0x69e <__divsf3_pse+0x6a>
 6a8:	86 95       	lsr	r24
 6aa:	77 95       	ror	r23
 6ac:	67 95       	ror	r22
 6ae:	b7 95       	ror	r27
 6b0:	f7 95       	ror	r31
 6b2:	9f 5f       	subi	r25, 0xFF	; 255
 6b4:	c9 f7       	brne	.-14     	; 0x6a8 <__divsf3_pse+0x74>
 6b6:	88 0f       	add	r24, r24
 6b8:	91 1d       	adc	r25, r1
 6ba:	96 95       	lsr	r25
 6bc:	87 95       	ror	r24
 6be:	97 f9       	bld	r25, 7
 6c0:	08 95       	ret
 6c2:	e1 e0       	ldi	r30, 0x01	; 1
 6c4:	66 0f       	add	r22, r22
 6c6:	77 1f       	adc	r23, r23
 6c8:	88 1f       	adc	r24, r24
 6ca:	bb 1f       	adc	r27, r27
 6cc:	62 17       	cp	r22, r18
 6ce:	73 07       	cpc	r23, r19
 6d0:	84 07       	cpc	r24, r20
 6d2:	ba 07       	cpc	r27, r26
 6d4:	20 f0       	brcs	.+8      	; 0x6de <__divsf3_pse+0xaa>
 6d6:	62 1b       	sub	r22, r18
 6d8:	73 0b       	sbc	r23, r19
 6da:	84 0b       	sbc	r24, r20
 6dc:	ba 0b       	sbc	r27, r26
 6de:	ee 1f       	adc	r30, r30
 6e0:	88 f7       	brcc	.-30     	; 0x6c4 <__divsf3_pse+0x90>
 6e2:	e0 95       	com	r30
 6e4:	08 95       	ret

000006e6 <__fixsfsi>:
 6e6:	04 d0       	rcall	.+8      	; 0x6f0 <__fixunssfsi>
 6e8:	68 94       	set
 6ea:	b1 11       	cpse	r27, r1
 6ec:	b5 c0       	rjmp	.+362    	; 0x858 <__fp_szero>
 6ee:	08 95       	ret

000006f0 <__fixunssfsi>:
 6f0:	98 d0       	rcall	.+304    	; 0x822 <__fp_splitA>
 6f2:	88 f0       	brcs	.+34     	; 0x716 <__fixunssfsi+0x26>
 6f4:	9f 57       	subi	r25, 0x7F	; 127
 6f6:	90 f0       	brcs	.+36     	; 0x71c <__fixunssfsi+0x2c>
 6f8:	b9 2f       	mov	r27, r25
 6fa:	99 27       	eor	r25, r25
 6fc:	b7 51       	subi	r27, 0x17	; 23
 6fe:	a0 f0       	brcs	.+40     	; 0x728 <__fixunssfsi+0x38>
 700:	d1 f0       	breq	.+52     	; 0x736 <__fixunssfsi+0x46>
 702:	66 0f       	add	r22, r22
 704:	77 1f       	adc	r23, r23
 706:	88 1f       	adc	r24, r24
 708:	99 1f       	adc	r25, r25
 70a:	1a f0       	brmi	.+6      	; 0x712 <__fixunssfsi+0x22>
 70c:	ba 95       	dec	r27
 70e:	c9 f7       	brne	.-14     	; 0x702 <__fixunssfsi+0x12>
 710:	12 c0       	rjmp	.+36     	; 0x736 <__fixunssfsi+0x46>
 712:	b1 30       	cpi	r27, 0x01	; 1
 714:	81 f0       	breq	.+32     	; 0x736 <__fixunssfsi+0x46>
 716:	9f d0       	rcall	.+318    	; 0x856 <__fp_zero>
 718:	b1 e0       	ldi	r27, 0x01	; 1
 71a:	08 95       	ret
 71c:	9c c0       	rjmp	.+312    	; 0x856 <__fp_zero>
 71e:	67 2f       	mov	r22, r23
 720:	78 2f       	mov	r23, r24
 722:	88 27       	eor	r24, r24
 724:	b8 5f       	subi	r27, 0xF8	; 248
 726:	39 f0       	breq	.+14     	; 0x736 <__fixunssfsi+0x46>
 728:	b9 3f       	cpi	r27, 0xF9	; 249
 72a:	cc f3       	brlt	.-14     	; 0x71e <__fixunssfsi+0x2e>
 72c:	86 95       	lsr	r24
 72e:	77 95       	ror	r23
 730:	67 95       	ror	r22
 732:	b3 95       	inc	r27
 734:	d9 f7       	brne	.-10     	; 0x72c <__fixunssfsi+0x3c>
 736:	3e f4       	brtc	.+14     	; 0x746 <__fixunssfsi+0x56>
 738:	90 95       	com	r25
 73a:	80 95       	com	r24
 73c:	70 95       	com	r23
 73e:	61 95       	neg	r22
 740:	7f 4f       	sbci	r23, 0xFF	; 255
 742:	8f 4f       	sbci	r24, 0xFF	; 255
 744:	9f 4f       	sbci	r25, 0xFF	; 255
 746:	08 95       	ret

00000748 <__floatunsisf>:
 748:	e8 94       	clt
 74a:	09 c0       	rjmp	.+18     	; 0x75e <__floatsisf+0x12>

0000074c <__floatsisf>:
 74c:	97 fb       	bst	r25, 7
 74e:	3e f4       	brtc	.+14     	; 0x75e <__floatsisf+0x12>
 750:	90 95       	com	r25
 752:	80 95       	com	r24
 754:	70 95       	com	r23
 756:	61 95       	neg	r22
 758:	7f 4f       	sbci	r23, 0xFF	; 255
 75a:	8f 4f       	sbci	r24, 0xFF	; 255
 75c:	9f 4f       	sbci	r25, 0xFF	; 255
 75e:	99 23       	and	r25, r25
 760:	a9 f0       	breq	.+42     	; 0x78c <__floatsisf+0x40>
 762:	f9 2f       	mov	r31, r25
 764:	96 e9       	ldi	r25, 0x96	; 150
 766:	bb 27       	eor	r27, r27
 768:	93 95       	inc	r25
 76a:	f6 95       	lsr	r31
 76c:	87 95       	ror	r24
 76e:	77 95       	ror	r23
 770:	67 95       	ror	r22
 772:	b7 95       	ror	r27
 774:	f1 11       	cpse	r31, r1
 776:	f8 cf       	rjmp	.-16     	; 0x768 <__floatsisf+0x1c>
 778:	fa f4       	brpl	.+62     	; 0x7b8 <__floatsisf+0x6c>
 77a:	bb 0f       	add	r27, r27
 77c:	11 f4       	brne	.+4      	; 0x782 <__floatsisf+0x36>
 77e:	60 ff       	sbrs	r22, 0
 780:	1b c0       	rjmp	.+54     	; 0x7b8 <__floatsisf+0x6c>
 782:	6f 5f       	subi	r22, 0xFF	; 255
 784:	7f 4f       	sbci	r23, 0xFF	; 255
 786:	8f 4f       	sbci	r24, 0xFF	; 255
 788:	9f 4f       	sbci	r25, 0xFF	; 255
 78a:	16 c0       	rjmp	.+44     	; 0x7b8 <__floatsisf+0x6c>
 78c:	88 23       	and	r24, r24
 78e:	11 f0       	breq	.+4      	; 0x794 <__floatsisf+0x48>
 790:	96 e9       	ldi	r25, 0x96	; 150
 792:	11 c0       	rjmp	.+34     	; 0x7b6 <__floatsisf+0x6a>
 794:	77 23       	and	r23, r23
 796:	21 f0       	breq	.+8      	; 0x7a0 <__floatsisf+0x54>
 798:	9e e8       	ldi	r25, 0x8E	; 142
 79a:	87 2f       	mov	r24, r23
 79c:	76 2f       	mov	r23, r22
 79e:	05 c0       	rjmp	.+10     	; 0x7aa <__floatsisf+0x5e>
 7a0:	66 23       	and	r22, r22
 7a2:	71 f0       	breq	.+28     	; 0x7c0 <__floatsisf+0x74>
 7a4:	96 e8       	ldi	r25, 0x86	; 134
 7a6:	86 2f       	mov	r24, r22
 7a8:	70 e0       	ldi	r23, 0x00	; 0
 7aa:	60 e0       	ldi	r22, 0x00	; 0
 7ac:	2a f0       	brmi	.+10     	; 0x7b8 <__floatsisf+0x6c>
 7ae:	9a 95       	dec	r25
 7b0:	66 0f       	add	r22, r22
 7b2:	77 1f       	adc	r23, r23
 7b4:	88 1f       	adc	r24, r24
 7b6:	da f7       	brpl	.-10     	; 0x7ae <__floatsisf+0x62>
 7b8:	88 0f       	add	r24, r24
 7ba:	96 95       	lsr	r25
 7bc:	87 95       	ror	r24
 7be:	97 f9       	bld	r25, 7
 7c0:	08 95       	ret

000007c2 <__fp_inf>:
 7c2:	97 f9       	bld	r25, 7
 7c4:	9f 67       	ori	r25, 0x7F	; 127
 7c6:	80 e8       	ldi	r24, 0x80	; 128
 7c8:	70 e0       	ldi	r23, 0x00	; 0
 7ca:	60 e0       	ldi	r22, 0x00	; 0
 7cc:	08 95       	ret

000007ce <__fp_nan>:
 7ce:	9f ef       	ldi	r25, 0xFF	; 255
 7d0:	80 ec       	ldi	r24, 0xC0	; 192
 7d2:	08 95       	ret

000007d4 <__fp_pscA>:
 7d4:	00 24       	eor	r0, r0
 7d6:	0a 94       	dec	r0
 7d8:	16 16       	cp	r1, r22
 7da:	17 06       	cpc	r1, r23
 7dc:	18 06       	cpc	r1, r24
 7de:	09 06       	cpc	r0, r25
 7e0:	08 95       	ret

000007e2 <__fp_pscB>:
 7e2:	00 24       	eor	r0, r0
 7e4:	0a 94       	dec	r0
 7e6:	12 16       	cp	r1, r18
 7e8:	13 06       	cpc	r1, r19
 7ea:	14 06       	cpc	r1, r20
 7ec:	05 06       	cpc	r0, r21
 7ee:	08 95       	ret

000007f0 <__fp_round>:
 7f0:	09 2e       	mov	r0, r25
 7f2:	03 94       	inc	r0
 7f4:	00 0c       	add	r0, r0
 7f6:	11 f4       	brne	.+4      	; 0x7fc <__fp_round+0xc>
 7f8:	88 23       	and	r24, r24
 7fa:	52 f0       	brmi	.+20     	; 0x810 <__fp_round+0x20>
 7fc:	bb 0f       	add	r27, r27
 7fe:	40 f4       	brcc	.+16     	; 0x810 <__fp_round+0x20>
 800:	bf 2b       	or	r27, r31
 802:	11 f4       	brne	.+4      	; 0x808 <__fp_round+0x18>
 804:	60 ff       	sbrs	r22, 0
 806:	04 c0       	rjmp	.+8      	; 0x810 <__fp_round+0x20>
 808:	6f 5f       	subi	r22, 0xFF	; 255
 80a:	7f 4f       	sbci	r23, 0xFF	; 255
 80c:	8f 4f       	sbci	r24, 0xFF	; 255
 80e:	9f 4f       	sbci	r25, 0xFF	; 255
 810:	08 95       	ret

00000812 <__fp_split3>:
 812:	57 fd       	sbrc	r21, 7
 814:	90 58       	subi	r25, 0x80	; 128
 816:	44 0f       	add	r20, r20
 818:	55 1f       	adc	r21, r21
 81a:	59 f0       	breq	.+22     	; 0x832 <__fp_splitA+0x10>
 81c:	5f 3f       	cpi	r21, 0xFF	; 255
 81e:	71 f0       	breq	.+28     	; 0x83c <__fp_splitA+0x1a>
 820:	47 95       	ror	r20

00000822 <__fp_splitA>:
 822:	88 0f       	add	r24, r24
 824:	97 fb       	bst	r25, 7
 826:	99 1f       	adc	r25, r25
 828:	61 f0       	breq	.+24     	; 0x842 <__fp_splitA+0x20>
 82a:	9f 3f       	cpi	r25, 0xFF	; 255
 82c:	79 f0       	breq	.+30     	; 0x84c <__fp_splitA+0x2a>
 82e:	87 95       	ror	r24
 830:	08 95       	ret
 832:	12 16       	cp	r1, r18
 834:	13 06       	cpc	r1, r19
 836:	14 06       	cpc	r1, r20
 838:	55 1f       	adc	r21, r21
 83a:	f2 cf       	rjmp	.-28     	; 0x820 <__fp_split3+0xe>
 83c:	46 95       	lsr	r20
 83e:	f1 df       	rcall	.-30     	; 0x822 <__fp_splitA>
 840:	08 c0       	rjmp	.+16     	; 0x852 <__fp_splitA+0x30>
 842:	16 16       	cp	r1, r22
 844:	17 06       	cpc	r1, r23
 846:	18 06       	cpc	r1, r24
 848:	99 1f       	adc	r25, r25
 84a:	f1 cf       	rjmp	.-30     	; 0x82e <__fp_splitA+0xc>
 84c:	86 95       	lsr	r24
 84e:	71 05       	cpc	r23, r1
 850:	61 05       	cpc	r22, r1
 852:	08 94       	sec
 854:	08 95       	ret

00000856 <__fp_zero>:
 856:	e8 94       	clt

00000858 <__fp_szero>:
 858:	bb 27       	eor	r27, r27
 85a:	66 27       	eor	r22, r22
 85c:	77 27       	eor	r23, r23
 85e:	cb 01       	movw	r24, r22
 860:	97 f9       	bld	r25, 7
 862:	08 95       	ret

00000864 <__mulsf3>:
 864:	0b d0       	rcall	.+22     	; 0x87c <__mulsf3x>
 866:	c4 cf       	rjmp	.-120    	; 0x7f0 <__fp_round>
 868:	b5 df       	rcall	.-150    	; 0x7d4 <__fp_pscA>
 86a:	28 f0       	brcs	.+10     	; 0x876 <__mulsf3+0x12>
 86c:	ba df       	rcall	.-140    	; 0x7e2 <__fp_pscB>
 86e:	18 f0       	brcs	.+6      	; 0x876 <__mulsf3+0x12>
 870:	95 23       	and	r25, r21
 872:	09 f0       	breq	.+2      	; 0x876 <__mulsf3+0x12>
 874:	a6 cf       	rjmp	.-180    	; 0x7c2 <__fp_inf>
 876:	ab cf       	rjmp	.-170    	; 0x7ce <__fp_nan>
 878:	11 24       	eor	r1, r1
 87a:	ee cf       	rjmp	.-36     	; 0x858 <__fp_szero>

0000087c <__mulsf3x>:
 87c:	ca df       	rcall	.-108    	; 0x812 <__fp_split3>
 87e:	a0 f3       	brcs	.-24     	; 0x868 <__mulsf3+0x4>

00000880 <__mulsf3_pse>:
 880:	95 9f       	mul	r25, r21
 882:	d1 f3       	breq	.-12     	; 0x878 <__mulsf3+0x14>
 884:	95 0f       	add	r25, r21
 886:	50 e0       	ldi	r21, 0x00	; 0
 888:	55 1f       	adc	r21, r21
 88a:	62 9f       	mul	r22, r18
 88c:	f0 01       	movw	r30, r0
 88e:	72 9f       	mul	r23, r18
 890:	bb 27       	eor	r27, r27
 892:	f0 0d       	add	r31, r0
 894:	b1 1d       	adc	r27, r1
 896:	63 9f       	mul	r22, r19
 898:	aa 27       	eor	r26, r26
 89a:	f0 0d       	add	r31, r0
 89c:	b1 1d       	adc	r27, r1
 89e:	aa 1f       	adc	r26, r26
 8a0:	64 9f       	mul	r22, r20
 8a2:	66 27       	eor	r22, r22
 8a4:	b0 0d       	add	r27, r0
 8a6:	a1 1d       	adc	r26, r1
 8a8:	66 1f       	adc	r22, r22
 8aa:	82 9f       	mul	r24, r18
 8ac:	22 27       	eor	r18, r18
 8ae:	b0 0d       	add	r27, r0
 8b0:	a1 1d       	adc	r26, r1
 8b2:	62 1f       	adc	r22, r18
 8b4:	73 9f       	mul	r23, r19
 8b6:	b0 0d       	add	r27, r0
 8b8:	a1 1d       	adc	r26, r1
 8ba:	62 1f       	adc	r22, r18
 8bc:	83 9f       	mul	r24, r19
 8be:	a0 0d       	add	r26, r0
 8c0:	61 1d       	adc	r22, r1
 8c2:	22 1f       	adc	r18, r18
 8c4:	74 9f       	mul	r23, r20
 8c6:	33 27       	eor	r19, r19
 8c8:	a0 0d       	add	r26, r0
 8ca:	61 1d       	adc	r22, r1
 8cc:	23 1f       	adc	r18, r19
 8ce:	84 9f       	mul	r24, r20
 8d0:	60 0d       	add	r22, r0
 8d2:	21 1d       	adc	r18, r1
 8d4:	82 2f       	mov	r24, r18
 8d6:	76 2f       	mov	r23, r22
 8d8:	6a 2f       	mov	r22, r26
 8da:	11 24       	eor	r1, r1
 8dc:	9f 57       	subi	r25, 0x7F	; 127
 8de:	50 40       	sbci	r21, 0x00	; 0
 8e0:	8a f0       	brmi	.+34     	; 0x904 <__mulsf3_pse+0x84>
 8e2:	e1 f0       	breq	.+56     	; 0x91c <__mulsf3_pse+0x9c>
 8e4:	88 23       	and	r24, r24
 8e6:	4a f0       	brmi	.+18     	; 0x8fa <__mulsf3_pse+0x7a>
 8e8:	ee 0f       	add	r30, r30
 8ea:	ff 1f       	adc	r31, r31
 8ec:	bb 1f       	adc	r27, r27
 8ee:	66 1f       	adc	r22, r22
 8f0:	77 1f       	adc	r23, r23
 8f2:	88 1f       	adc	r24, r24
 8f4:	91 50       	subi	r25, 0x01	; 1
 8f6:	50 40       	sbci	r21, 0x00	; 0
 8f8:	a9 f7       	brne	.-22     	; 0x8e4 <__mulsf3_pse+0x64>
 8fa:	9e 3f       	cpi	r25, 0xFE	; 254
 8fc:	51 05       	cpc	r21, r1
 8fe:	70 f0       	brcs	.+28     	; 0x91c <__mulsf3_pse+0x9c>
 900:	60 cf       	rjmp	.-320    	; 0x7c2 <__fp_inf>
 902:	aa cf       	rjmp	.-172    	; 0x858 <__fp_szero>
 904:	5f 3f       	cpi	r21, 0xFF	; 255
 906:	ec f3       	brlt	.-6      	; 0x902 <__mulsf3_pse+0x82>
 908:	98 3e       	cpi	r25, 0xE8	; 232
 90a:	dc f3       	brlt	.-10     	; 0x902 <__mulsf3_pse+0x82>
 90c:	86 95       	lsr	r24
 90e:	77 95       	ror	r23
 910:	67 95       	ror	r22
 912:	b7 95       	ror	r27
 914:	f7 95       	ror	r31
 916:	e7 95       	ror	r30
 918:	9f 5f       	subi	r25, 0xFF	; 255
 91a:	c1 f7       	brne	.-16     	; 0x90c <__mulsf3_pse+0x8c>
 91c:	fe 2b       	or	r31, r30
 91e:	88 0f       	add	r24, r24
 920:	91 1d       	adc	r25, r1
 922:	96 95       	lsr	r25
 924:	87 95       	ror	r24
 926:	97 f9       	bld	r25, 7
 928:	08 95       	ret

0000092a <printf>:
 92a:	a0 e0       	ldi	r26, 0x00	; 0
 92c:	b0 e0       	ldi	r27, 0x00	; 0
 92e:	eb e9       	ldi	r30, 0x9B	; 155
 930:	f4 e0       	ldi	r31, 0x04	; 4
 932:	0c 94 5e 07 	jmp	0xebc	; 0xebc <__prologue_saves__+0x20>
 936:	fe 01       	movw	r30, r28
 938:	35 96       	adiw	r30, 0x05	; 5
 93a:	61 91       	ld	r22, Z+
 93c:	71 91       	ld	r23, Z+
 93e:	af 01       	movw	r20, r30
 940:	80 91 22 02 	lds	r24, 0x0222
 944:	90 91 23 02 	lds	r25, 0x0223
 948:	0e 94 d6 04 	call	0x9ac	; 0x9ac <vfprintf>
 94c:	e2 e0       	ldi	r30, 0x02	; 2
 94e:	0c 94 7a 07 	jmp	0xef4	; 0xef4 <__epilogue_restores__+0x20>

00000952 <puts>:
 952:	0f 93       	push	r16
 954:	1f 93       	push	r17
 956:	cf 93       	push	r28
 958:	df 93       	push	r29
 95a:	e0 91 22 02 	lds	r30, 0x0222
 95e:	f0 91 23 02 	lds	r31, 0x0223
 962:	23 81       	ldd	r18, Z+3	; 0x03
 964:	21 ff       	sbrs	r18, 1
 966:	1b c0       	rjmp	.+54     	; 0x99e <puts+0x4c>
 968:	ec 01       	movw	r28, r24
 96a:	00 e0       	ldi	r16, 0x00	; 0
 96c:	10 e0       	ldi	r17, 0x00	; 0
 96e:	89 91       	ld	r24, Y+
 970:	60 91 22 02 	lds	r22, 0x0222
 974:	70 91 23 02 	lds	r23, 0x0223
 978:	db 01       	movw	r26, r22
 97a:	18 96       	adiw	r26, 0x08	; 8
 97c:	ed 91       	ld	r30, X+
 97e:	fc 91       	ld	r31, X
 980:	19 97       	sbiw	r26, 0x09	; 9
 982:	88 23       	and	r24, r24
 984:	31 f0       	breq	.+12     	; 0x992 <puts+0x40>
 986:	09 95       	icall
 988:	89 2b       	or	r24, r25
 98a:	89 f3       	breq	.-30     	; 0x96e <puts+0x1c>
 98c:	0f ef       	ldi	r16, 0xFF	; 255
 98e:	1f ef       	ldi	r17, 0xFF	; 255
 990:	ee cf       	rjmp	.-36     	; 0x96e <puts+0x1c>
 992:	8a e0       	ldi	r24, 0x0A	; 10
 994:	09 95       	icall
 996:	89 2b       	or	r24, r25
 998:	11 f4       	brne	.+4      	; 0x99e <puts+0x4c>
 99a:	c8 01       	movw	r24, r16
 99c:	02 c0       	rjmp	.+4      	; 0x9a2 <puts+0x50>
 99e:	8f ef       	ldi	r24, 0xFF	; 255
 9a0:	9f ef       	ldi	r25, 0xFF	; 255
 9a2:	df 91       	pop	r29
 9a4:	cf 91       	pop	r28
 9a6:	1f 91       	pop	r17
 9a8:	0f 91       	pop	r16
 9aa:	08 95       	ret

000009ac <vfprintf>:
 9ac:	ac e0       	ldi	r26, 0x0C	; 12
 9ae:	b0 e0       	ldi	r27, 0x00	; 0
 9b0:	ec ed       	ldi	r30, 0xDC	; 220
 9b2:	f4 e0       	ldi	r31, 0x04	; 4
 9b4:	0c 94 4e 07 	jmp	0xe9c	; 0xe9c <__prologue_saves__>
 9b8:	7c 01       	movw	r14, r24
 9ba:	6b 01       	movw	r12, r22
 9bc:	8a 01       	movw	r16, r20
 9be:	fc 01       	movw	r30, r24
 9c0:	17 82       	std	Z+7, r1	; 0x07
 9c2:	16 82       	std	Z+6, r1	; 0x06
 9c4:	83 81       	ldd	r24, Z+3	; 0x03
 9c6:	81 ff       	sbrs	r24, 1
 9c8:	bd c1       	rjmp	.+890    	; 0xd44 <vfprintf+0x398>
 9ca:	ce 01       	movw	r24, r28
 9cc:	01 96       	adiw	r24, 0x01	; 1
 9ce:	4c 01       	movw	r8, r24
 9d0:	f7 01       	movw	r30, r14
 9d2:	93 81       	ldd	r25, Z+3	; 0x03
 9d4:	f6 01       	movw	r30, r12
 9d6:	93 fd       	sbrc	r25, 3
 9d8:	85 91       	lpm	r24, Z+
 9da:	93 ff       	sbrs	r25, 3
 9dc:	81 91       	ld	r24, Z+
 9de:	6f 01       	movw	r12, r30
 9e0:	88 23       	and	r24, r24
 9e2:	09 f4       	brne	.+2      	; 0x9e6 <vfprintf+0x3a>
 9e4:	ab c1       	rjmp	.+854    	; 0xd3c <vfprintf+0x390>
 9e6:	85 32       	cpi	r24, 0x25	; 37
 9e8:	39 f4       	brne	.+14     	; 0x9f8 <vfprintf+0x4c>
 9ea:	93 fd       	sbrc	r25, 3
 9ec:	85 91       	lpm	r24, Z+
 9ee:	93 ff       	sbrs	r25, 3
 9f0:	81 91       	ld	r24, Z+
 9f2:	6f 01       	movw	r12, r30
 9f4:	85 32       	cpi	r24, 0x25	; 37
 9f6:	29 f4       	brne	.+10     	; 0xa02 <vfprintf+0x56>
 9f8:	b7 01       	movw	r22, r14
 9fa:	90 e0       	ldi	r25, 0x00	; 0
 9fc:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 a00:	e7 cf       	rjmp	.-50     	; 0x9d0 <vfprintf+0x24>
 a02:	51 2c       	mov	r5, r1
 a04:	31 2c       	mov	r3, r1
 a06:	20 e0       	ldi	r18, 0x00	; 0
 a08:	20 32       	cpi	r18, 0x20	; 32
 a0a:	a0 f4       	brcc	.+40     	; 0xa34 <vfprintf+0x88>
 a0c:	8b 32       	cpi	r24, 0x2B	; 43
 a0e:	69 f0       	breq	.+26     	; 0xa2a <vfprintf+0x7e>
 a10:	30 f4       	brcc	.+12     	; 0xa1e <vfprintf+0x72>
 a12:	80 32       	cpi	r24, 0x20	; 32
 a14:	59 f0       	breq	.+22     	; 0xa2c <vfprintf+0x80>
 a16:	83 32       	cpi	r24, 0x23	; 35
 a18:	69 f4       	brne	.+26     	; 0xa34 <vfprintf+0x88>
 a1a:	20 61       	ori	r18, 0x10	; 16
 a1c:	2c c0       	rjmp	.+88     	; 0xa76 <vfprintf+0xca>
 a1e:	8d 32       	cpi	r24, 0x2D	; 45
 a20:	39 f0       	breq	.+14     	; 0xa30 <vfprintf+0x84>
 a22:	80 33       	cpi	r24, 0x30	; 48
 a24:	39 f4       	brne	.+14     	; 0xa34 <vfprintf+0x88>
 a26:	21 60       	ori	r18, 0x01	; 1
 a28:	26 c0       	rjmp	.+76     	; 0xa76 <vfprintf+0xca>
 a2a:	22 60       	ori	r18, 0x02	; 2
 a2c:	24 60       	ori	r18, 0x04	; 4
 a2e:	23 c0       	rjmp	.+70     	; 0xa76 <vfprintf+0xca>
 a30:	28 60       	ori	r18, 0x08	; 8
 a32:	21 c0       	rjmp	.+66     	; 0xa76 <vfprintf+0xca>
 a34:	27 fd       	sbrc	r18, 7
 a36:	27 c0       	rjmp	.+78     	; 0xa86 <vfprintf+0xda>
 a38:	30 ed       	ldi	r19, 0xD0	; 208
 a3a:	38 0f       	add	r19, r24
 a3c:	3a 30       	cpi	r19, 0x0A	; 10
 a3e:	78 f4       	brcc	.+30     	; 0xa5e <vfprintf+0xb2>
 a40:	26 ff       	sbrs	r18, 6
 a42:	06 c0       	rjmp	.+12     	; 0xa50 <vfprintf+0xa4>
 a44:	fa e0       	ldi	r31, 0x0A	; 10
 a46:	5f 9e       	mul	r5, r31
 a48:	30 0d       	add	r19, r0
 a4a:	11 24       	eor	r1, r1
 a4c:	53 2e       	mov	r5, r19
 a4e:	13 c0       	rjmp	.+38     	; 0xa76 <vfprintf+0xca>
 a50:	8a e0       	ldi	r24, 0x0A	; 10
 a52:	38 9e       	mul	r3, r24
 a54:	30 0d       	add	r19, r0
 a56:	11 24       	eor	r1, r1
 a58:	33 2e       	mov	r3, r19
 a5a:	20 62       	ori	r18, 0x20	; 32
 a5c:	0c c0       	rjmp	.+24     	; 0xa76 <vfprintf+0xca>
 a5e:	8e 32       	cpi	r24, 0x2E	; 46
 a60:	21 f4       	brne	.+8      	; 0xa6a <vfprintf+0xbe>
 a62:	26 fd       	sbrc	r18, 6
 a64:	6b c1       	rjmp	.+726    	; 0xd3c <vfprintf+0x390>
 a66:	20 64       	ori	r18, 0x40	; 64
 a68:	06 c0       	rjmp	.+12     	; 0xa76 <vfprintf+0xca>
 a6a:	8c 36       	cpi	r24, 0x6C	; 108
 a6c:	11 f4       	brne	.+4      	; 0xa72 <vfprintf+0xc6>
 a6e:	20 68       	ori	r18, 0x80	; 128
 a70:	02 c0       	rjmp	.+4      	; 0xa76 <vfprintf+0xca>
 a72:	88 36       	cpi	r24, 0x68	; 104
 a74:	41 f4       	brne	.+16     	; 0xa86 <vfprintf+0xda>
 a76:	f6 01       	movw	r30, r12
 a78:	93 fd       	sbrc	r25, 3
 a7a:	85 91       	lpm	r24, Z+
 a7c:	93 ff       	sbrs	r25, 3
 a7e:	81 91       	ld	r24, Z+
 a80:	6f 01       	movw	r12, r30
 a82:	81 11       	cpse	r24, r1
 a84:	c1 cf       	rjmp	.-126    	; 0xa08 <vfprintf+0x5c>
 a86:	98 2f       	mov	r25, r24
 a88:	9f 7d       	andi	r25, 0xDF	; 223
 a8a:	95 54       	subi	r25, 0x45	; 69
 a8c:	93 30       	cpi	r25, 0x03	; 3
 a8e:	28 f4       	brcc	.+10     	; 0xa9a <vfprintf+0xee>
 a90:	0c 5f       	subi	r16, 0xFC	; 252
 a92:	1f 4f       	sbci	r17, 0xFF	; 255
 a94:	ff e3       	ldi	r31, 0x3F	; 63
 a96:	f9 83       	std	Y+1, r31	; 0x01
 a98:	0d c0       	rjmp	.+26     	; 0xab4 <vfprintf+0x108>
 a9a:	83 36       	cpi	r24, 0x63	; 99
 a9c:	31 f0       	breq	.+12     	; 0xaaa <vfprintf+0xfe>
 a9e:	83 37       	cpi	r24, 0x73	; 115
 aa0:	71 f0       	breq	.+28     	; 0xabe <vfprintf+0x112>
 aa2:	83 35       	cpi	r24, 0x53	; 83
 aa4:	09 f0       	breq	.+2      	; 0xaa8 <vfprintf+0xfc>
 aa6:	5b c0       	rjmp	.+182    	; 0xb5e <vfprintf+0x1b2>
 aa8:	22 c0       	rjmp	.+68     	; 0xaee <vfprintf+0x142>
 aaa:	f8 01       	movw	r30, r16
 aac:	80 81       	ld	r24, Z
 aae:	89 83       	std	Y+1, r24	; 0x01
 ab0:	0e 5f       	subi	r16, 0xFE	; 254
 ab2:	1f 4f       	sbci	r17, 0xFF	; 255
 ab4:	44 24       	eor	r4, r4
 ab6:	43 94       	inc	r4
 ab8:	51 2c       	mov	r5, r1
 aba:	54 01       	movw	r10, r8
 abc:	15 c0       	rjmp	.+42     	; 0xae8 <vfprintf+0x13c>
 abe:	38 01       	movw	r6, r16
 ac0:	f2 e0       	ldi	r31, 0x02	; 2
 ac2:	6f 0e       	add	r6, r31
 ac4:	71 1c       	adc	r7, r1
 ac6:	f8 01       	movw	r30, r16
 ac8:	a0 80       	ld	r10, Z
 aca:	b1 80       	ldd	r11, Z+1	; 0x01
 acc:	26 ff       	sbrs	r18, 6
 ace:	03 c0       	rjmp	.+6      	; 0xad6 <vfprintf+0x12a>
 ad0:	65 2d       	mov	r22, r5
 ad2:	70 e0       	ldi	r23, 0x00	; 0
 ad4:	02 c0       	rjmp	.+4      	; 0xada <vfprintf+0x12e>
 ad6:	6f ef       	ldi	r22, 0xFF	; 255
 ad8:	7f ef       	ldi	r23, 0xFF	; 255
 ada:	c5 01       	movw	r24, r10
 adc:	2c 87       	std	Y+12, r18	; 0x0c
 ade:	0e 94 b3 06 	call	0xd66	; 0xd66 <strnlen>
 ae2:	2c 01       	movw	r4, r24
 ae4:	83 01       	movw	r16, r6
 ae6:	2c 85       	ldd	r18, Y+12	; 0x0c
 ae8:	2f 77       	andi	r18, 0x7F	; 127
 aea:	22 2e       	mov	r2, r18
 aec:	17 c0       	rjmp	.+46     	; 0xb1c <vfprintf+0x170>
 aee:	38 01       	movw	r6, r16
 af0:	f2 e0       	ldi	r31, 0x02	; 2
 af2:	6f 0e       	add	r6, r31
 af4:	71 1c       	adc	r7, r1
 af6:	f8 01       	movw	r30, r16
 af8:	a0 80       	ld	r10, Z
 afa:	b1 80       	ldd	r11, Z+1	; 0x01
 afc:	26 ff       	sbrs	r18, 6
 afe:	03 c0       	rjmp	.+6      	; 0xb06 <vfprintf+0x15a>
 b00:	65 2d       	mov	r22, r5
 b02:	70 e0       	ldi	r23, 0x00	; 0
 b04:	02 c0       	rjmp	.+4      	; 0xb0a <vfprintf+0x15e>
 b06:	6f ef       	ldi	r22, 0xFF	; 255
 b08:	7f ef       	ldi	r23, 0xFF	; 255
 b0a:	c5 01       	movw	r24, r10
 b0c:	2c 87       	std	Y+12, r18	; 0x0c
 b0e:	0e 94 a8 06 	call	0xd50	; 0xd50 <strnlen_P>
 b12:	2c 01       	movw	r4, r24
 b14:	2c 85       	ldd	r18, Y+12	; 0x0c
 b16:	20 68       	ori	r18, 0x80	; 128
 b18:	22 2e       	mov	r2, r18
 b1a:	83 01       	movw	r16, r6
 b1c:	23 fc       	sbrc	r2, 3
 b1e:	1b c0       	rjmp	.+54     	; 0xb56 <vfprintf+0x1aa>
 b20:	83 2d       	mov	r24, r3
 b22:	90 e0       	ldi	r25, 0x00	; 0
 b24:	48 16       	cp	r4, r24
 b26:	59 06       	cpc	r5, r25
 b28:	b0 f4       	brcc	.+44     	; 0xb56 <vfprintf+0x1aa>
 b2a:	b7 01       	movw	r22, r14
 b2c:	80 e2       	ldi	r24, 0x20	; 32
 b2e:	90 e0       	ldi	r25, 0x00	; 0
 b30:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 b34:	3a 94       	dec	r3
 b36:	f4 cf       	rjmp	.-24     	; 0xb20 <vfprintf+0x174>
 b38:	f5 01       	movw	r30, r10
 b3a:	27 fc       	sbrc	r2, 7
 b3c:	85 91       	lpm	r24, Z+
 b3e:	27 fe       	sbrs	r2, 7
 b40:	81 91       	ld	r24, Z+
 b42:	5f 01       	movw	r10, r30
 b44:	b7 01       	movw	r22, r14
 b46:	90 e0       	ldi	r25, 0x00	; 0
 b48:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 b4c:	31 10       	cpse	r3, r1
 b4e:	3a 94       	dec	r3
 b50:	f1 e0       	ldi	r31, 0x01	; 1
 b52:	4f 1a       	sub	r4, r31
 b54:	51 08       	sbc	r5, r1
 b56:	41 14       	cp	r4, r1
 b58:	51 04       	cpc	r5, r1
 b5a:	71 f7       	brne	.-36     	; 0xb38 <vfprintf+0x18c>
 b5c:	e5 c0       	rjmp	.+458    	; 0xd28 <vfprintf+0x37c>
 b5e:	84 36       	cpi	r24, 0x64	; 100
 b60:	11 f0       	breq	.+4      	; 0xb66 <vfprintf+0x1ba>
 b62:	89 36       	cpi	r24, 0x69	; 105
 b64:	39 f5       	brne	.+78     	; 0xbb4 <vfprintf+0x208>
 b66:	f8 01       	movw	r30, r16
 b68:	27 ff       	sbrs	r18, 7
 b6a:	07 c0       	rjmp	.+14     	; 0xb7a <vfprintf+0x1ce>
 b6c:	60 81       	ld	r22, Z
 b6e:	71 81       	ldd	r23, Z+1	; 0x01
 b70:	82 81       	ldd	r24, Z+2	; 0x02
 b72:	93 81       	ldd	r25, Z+3	; 0x03
 b74:	0c 5f       	subi	r16, 0xFC	; 252
 b76:	1f 4f       	sbci	r17, 0xFF	; 255
 b78:	08 c0       	rjmp	.+16     	; 0xb8a <vfprintf+0x1de>
 b7a:	60 81       	ld	r22, Z
 b7c:	71 81       	ldd	r23, Z+1	; 0x01
 b7e:	88 27       	eor	r24, r24
 b80:	77 fd       	sbrc	r23, 7
 b82:	80 95       	com	r24
 b84:	98 2f       	mov	r25, r24
 b86:	0e 5f       	subi	r16, 0xFE	; 254
 b88:	1f 4f       	sbci	r17, 0xFF	; 255
 b8a:	2f 76       	andi	r18, 0x6F	; 111
 b8c:	b2 2e       	mov	r11, r18
 b8e:	97 ff       	sbrs	r25, 7
 b90:	09 c0       	rjmp	.+18     	; 0xba4 <vfprintf+0x1f8>
 b92:	90 95       	com	r25
 b94:	80 95       	com	r24
 b96:	70 95       	com	r23
 b98:	61 95       	neg	r22
 b9a:	7f 4f       	sbci	r23, 0xFF	; 255
 b9c:	8f 4f       	sbci	r24, 0xFF	; 255
 b9e:	9f 4f       	sbci	r25, 0xFF	; 255
 ba0:	20 68       	ori	r18, 0x80	; 128
 ba2:	b2 2e       	mov	r11, r18
 ba4:	2a e0       	ldi	r18, 0x0A	; 10
 ba6:	30 e0       	ldi	r19, 0x00	; 0
 ba8:	a4 01       	movw	r20, r8
 baa:	0e 94 f0 06 	call	0xde0	; 0xde0 <__ultoa_invert>
 bae:	a8 2e       	mov	r10, r24
 bb0:	a8 18       	sub	r10, r8
 bb2:	44 c0       	rjmp	.+136    	; 0xc3c <vfprintf+0x290>
 bb4:	85 37       	cpi	r24, 0x75	; 117
 bb6:	29 f4       	brne	.+10     	; 0xbc2 <vfprintf+0x216>
 bb8:	2f 7e       	andi	r18, 0xEF	; 239
 bba:	b2 2e       	mov	r11, r18
 bbc:	2a e0       	ldi	r18, 0x0A	; 10
 bbe:	30 e0       	ldi	r19, 0x00	; 0
 bc0:	25 c0       	rjmp	.+74     	; 0xc0c <vfprintf+0x260>
 bc2:	f2 2f       	mov	r31, r18
 bc4:	f9 7f       	andi	r31, 0xF9	; 249
 bc6:	bf 2e       	mov	r11, r31
 bc8:	8f 36       	cpi	r24, 0x6F	; 111
 bca:	c1 f0       	breq	.+48     	; 0xbfc <vfprintf+0x250>
 bcc:	18 f4       	brcc	.+6      	; 0xbd4 <vfprintf+0x228>
 bce:	88 35       	cpi	r24, 0x58	; 88
 bd0:	79 f0       	breq	.+30     	; 0xbf0 <vfprintf+0x244>
 bd2:	b4 c0       	rjmp	.+360    	; 0xd3c <vfprintf+0x390>
 bd4:	80 37       	cpi	r24, 0x70	; 112
 bd6:	19 f0       	breq	.+6      	; 0xbde <vfprintf+0x232>
 bd8:	88 37       	cpi	r24, 0x78	; 120
 bda:	21 f0       	breq	.+8      	; 0xbe4 <vfprintf+0x238>
 bdc:	af c0       	rjmp	.+350    	; 0xd3c <vfprintf+0x390>
 bde:	2f 2f       	mov	r18, r31
 be0:	20 61       	ori	r18, 0x10	; 16
 be2:	b2 2e       	mov	r11, r18
 be4:	b4 fe       	sbrs	r11, 4
 be6:	0d c0       	rjmp	.+26     	; 0xc02 <vfprintf+0x256>
 be8:	8b 2d       	mov	r24, r11
 bea:	84 60       	ori	r24, 0x04	; 4
 bec:	b8 2e       	mov	r11, r24
 bee:	09 c0       	rjmp	.+18     	; 0xc02 <vfprintf+0x256>
 bf0:	24 ff       	sbrs	r18, 4
 bf2:	0a c0       	rjmp	.+20     	; 0xc08 <vfprintf+0x25c>
 bf4:	9f 2f       	mov	r25, r31
 bf6:	96 60       	ori	r25, 0x06	; 6
 bf8:	b9 2e       	mov	r11, r25
 bfa:	06 c0       	rjmp	.+12     	; 0xc08 <vfprintf+0x25c>
 bfc:	28 e0       	ldi	r18, 0x08	; 8
 bfe:	30 e0       	ldi	r19, 0x00	; 0
 c00:	05 c0       	rjmp	.+10     	; 0xc0c <vfprintf+0x260>
 c02:	20 e1       	ldi	r18, 0x10	; 16
 c04:	30 e0       	ldi	r19, 0x00	; 0
 c06:	02 c0       	rjmp	.+4      	; 0xc0c <vfprintf+0x260>
 c08:	20 e1       	ldi	r18, 0x10	; 16
 c0a:	32 e0       	ldi	r19, 0x02	; 2
 c0c:	f8 01       	movw	r30, r16
 c0e:	b7 fe       	sbrs	r11, 7
 c10:	07 c0       	rjmp	.+14     	; 0xc20 <vfprintf+0x274>
 c12:	60 81       	ld	r22, Z
 c14:	71 81       	ldd	r23, Z+1	; 0x01
 c16:	82 81       	ldd	r24, Z+2	; 0x02
 c18:	93 81       	ldd	r25, Z+3	; 0x03
 c1a:	0c 5f       	subi	r16, 0xFC	; 252
 c1c:	1f 4f       	sbci	r17, 0xFF	; 255
 c1e:	06 c0       	rjmp	.+12     	; 0xc2c <vfprintf+0x280>
 c20:	60 81       	ld	r22, Z
 c22:	71 81       	ldd	r23, Z+1	; 0x01
 c24:	80 e0       	ldi	r24, 0x00	; 0
 c26:	90 e0       	ldi	r25, 0x00	; 0
 c28:	0e 5f       	subi	r16, 0xFE	; 254
 c2a:	1f 4f       	sbci	r17, 0xFF	; 255
 c2c:	a4 01       	movw	r20, r8
 c2e:	0e 94 f0 06 	call	0xde0	; 0xde0 <__ultoa_invert>
 c32:	a8 2e       	mov	r10, r24
 c34:	a8 18       	sub	r10, r8
 c36:	fb 2d       	mov	r31, r11
 c38:	ff 77       	andi	r31, 0x7F	; 127
 c3a:	bf 2e       	mov	r11, r31
 c3c:	b6 fe       	sbrs	r11, 6
 c3e:	0b c0       	rjmp	.+22     	; 0xc56 <vfprintf+0x2aa>
 c40:	2b 2d       	mov	r18, r11
 c42:	2e 7f       	andi	r18, 0xFE	; 254
 c44:	a5 14       	cp	r10, r5
 c46:	50 f4       	brcc	.+20     	; 0xc5c <vfprintf+0x2b0>
 c48:	b4 fe       	sbrs	r11, 4
 c4a:	0a c0       	rjmp	.+20     	; 0xc60 <vfprintf+0x2b4>
 c4c:	b2 fc       	sbrc	r11, 2
 c4e:	08 c0       	rjmp	.+16     	; 0xc60 <vfprintf+0x2b4>
 c50:	2b 2d       	mov	r18, r11
 c52:	2e 7e       	andi	r18, 0xEE	; 238
 c54:	05 c0       	rjmp	.+10     	; 0xc60 <vfprintf+0x2b4>
 c56:	7a 2c       	mov	r7, r10
 c58:	2b 2d       	mov	r18, r11
 c5a:	03 c0       	rjmp	.+6      	; 0xc62 <vfprintf+0x2b6>
 c5c:	7a 2c       	mov	r7, r10
 c5e:	01 c0       	rjmp	.+2      	; 0xc62 <vfprintf+0x2b6>
 c60:	75 2c       	mov	r7, r5
 c62:	24 ff       	sbrs	r18, 4
 c64:	0d c0       	rjmp	.+26     	; 0xc80 <vfprintf+0x2d4>
 c66:	fe 01       	movw	r30, r28
 c68:	ea 0d       	add	r30, r10
 c6a:	f1 1d       	adc	r31, r1
 c6c:	80 81       	ld	r24, Z
 c6e:	80 33       	cpi	r24, 0x30	; 48
 c70:	11 f4       	brne	.+4      	; 0xc76 <vfprintf+0x2ca>
 c72:	29 7e       	andi	r18, 0xE9	; 233
 c74:	09 c0       	rjmp	.+18     	; 0xc88 <vfprintf+0x2dc>
 c76:	22 ff       	sbrs	r18, 2
 c78:	06 c0       	rjmp	.+12     	; 0xc86 <vfprintf+0x2da>
 c7a:	73 94       	inc	r7
 c7c:	73 94       	inc	r7
 c7e:	04 c0       	rjmp	.+8      	; 0xc88 <vfprintf+0x2dc>
 c80:	82 2f       	mov	r24, r18
 c82:	86 78       	andi	r24, 0x86	; 134
 c84:	09 f0       	breq	.+2      	; 0xc88 <vfprintf+0x2dc>
 c86:	73 94       	inc	r7
 c88:	23 fd       	sbrc	r18, 3
 c8a:	13 c0       	rjmp	.+38     	; 0xcb2 <vfprintf+0x306>
 c8c:	20 ff       	sbrs	r18, 0
 c8e:	06 c0       	rjmp	.+12     	; 0xc9c <vfprintf+0x2f0>
 c90:	5a 2c       	mov	r5, r10
 c92:	73 14       	cp	r7, r3
 c94:	18 f4       	brcc	.+6      	; 0xc9c <vfprintf+0x2f0>
 c96:	53 0c       	add	r5, r3
 c98:	57 18       	sub	r5, r7
 c9a:	73 2c       	mov	r7, r3
 c9c:	73 14       	cp	r7, r3
 c9e:	68 f4       	brcc	.+26     	; 0xcba <vfprintf+0x30e>
 ca0:	b7 01       	movw	r22, r14
 ca2:	80 e2       	ldi	r24, 0x20	; 32
 ca4:	90 e0       	ldi	r25, 0x00	; 0
 ca6:	2c 87       	std	Y+12, r18	; 0x0c
 ca8:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 cac:	73 94       	inc	r7
 cae:	2c 85       	ldd	r18, Y+12	; 0x0c
 cb0:	f5 cf       	rjmp	.-22     	; 0xc9c <vfprintf+0x2f0>
 cb2:	73 14       	cp	r7, r3
 cb4:	10 f4       	brcc	.+4      	; 0xcba <vfprintf+0x30e>
 cb6:	37 18       	sub	r3, r7
 cb8:	01 c0       	rjmp	.+2      	; 0xcbc <vfprintf+0x310>
 cba:	31 2c       	mov	r3, r1
 cbc:	24 ff       	sbrs	r18, 4
 cbe:	12 c0       	rjmp	.+36     	; 0xce4 <vfprintf+0x338>
 cc0:	b7 01       	movw	r22, r14
 cc2:	80 e3       	ldi	r24, 0x30	; 48
 cc4:	90 e0       	ldi	r25, 0x00	; 0
 cc6:	2c 87       	std	Y+12, r18	; 0x0c
 cc8:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 ccc:	2c 85       	ldd	r18, Y+12	; 0x0c
 cce:	22 ff       	sbrs	r18, 2
 cd0:	17 c0       	rjmp	.+46     	; 0xd00 <vfprintf+0x354>
 cd2:	21 ff       	sbrs	r18, 1
 cd4:	03 c0       	rjmp	.+6      	; 0xcdc <vfprintf+0x330>
 cd6:	88 e5       	ldi	r24, 0x58	; 88
 cd8:	90 e0       	ldi	r25, 0x00	; 0
 cda:	02 c0       	rjmp	.+4      	; 0xce0 <vfprintf+0x334>
 cdc:	88 e7       	ldi	r24, 0x78	; 120
 cde:	90 e0       	ldi	r25, 0x00	; 0
 ce0:	b7 01       	movw	r22, r14
 ce2:	0c c0       	rjmp	.+24     	; 0xcfc <vfprintf+0x350>
 ce4:	82 2f       	mov	r24, r18
 ce6:	86 78       	andi	r24, 0x86	; 134
 ce8:	59 f0       	breq	.+22     	; 0xd00 <vfprintf+0x354>
 cea:	21 fd       	sbrc	r18, 1
 cec:	02 c0       	rjmp	.+4      	; 0xcf2 <vfprintf+0x346>
 cee:	80 e2       	ldi	r24, 0x20	; 32
 cf0:	01 c0       	rjmp	.+2      	; 0xcf4 <vfprintf+0x348>
 cf2:	8b e2       	ldi	r24, 0x2B	; 43
 cf4:	27 fd       	sbrc	r18, 7
 cf6:	8d e2       	ldi	r24, 0x2D	; 45
 cf8:	b7 01       	movw	r22, r14
 cfa:	90 e0       	ldi	r25, 0x00	; 0
 cfc:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 d00:	a5 14       	cp	r10, r5
 d02:	38 f4       	brcc	.+14     	; 0xd12 <vfprintf+0x366>
 d04:	b7 01       	movw	r22, r14
 d06:	80 e3       	ldi	r24, 0x30	; 48
 d08:	90 e0       	ldi	r25, 0x00	; 0
 d0a:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 d0e:	5a 94       	dec	r5
 d10:	f7 cf       	rjmp	.-18     	; 0xd00 <vfprintf+0x354>
 d12:	aa 94       	dec	r10
 d14:	f4 01       	movw	r30, r8
 d16:	ea 0d       	add	r30, r10
 d18:	f1 1d       	adc	r31, r1
 d1a:	80 81       	ld	r24, Z
 d1c:	b7 01       	movw	r22, r14
 d1e:	90 e0       	ldi	r25, 0x00	; 0
 d20:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 d24:	a1 10       	cpse	r10, r1
 d26:	f5 cf       	rjmp	.-22     	; 0xd12 <vfprintf+0x366>
 d28:	33 20       	and	r3, r3
 d2a:	09 f4       	brne	.+2      	; 0xd2e <vfprintf+0x382>
 d2c:	51 ce       	rjmp	.-862    	; 0x9d0 <vfprintf+0x24>
 d2e:	b7 01       	movw	r22, r14
 d30:	80 e2       	ldi	r24, 0x20	; 32
 d32:	90 e0       	ldi	r25, 0x00	; 0
 d34:	0e 94 be 06 	call	0xd7c	; 0xd7c <fputc>
 d38:	3a 94       	dec	r3
 d3a:	f6 cf       	rjmp	.-20     	; 0xd28 <vfprintf+0x37c>
 d3c:	f7 01       	movw	r30, r14
 d3e:	86 81       	ldd	r24, Z+6	; 0x06
 d40:	97 81       	ldd	r25, Z+7	; 0x07
 d42:	02 c0       	rjmp	.+4      	; 0xd48 <vfprintf+0x39c>
 d44:	8f ef       	ldi	r24, 0xFF	; 255
 d46:	9f ef       	ldi	r25, 0xFF	; 255
 d48:	2c 96       	adiw	r28, 0x0c	; 12
 d4a:	e2 e1       	ldi	r30, 0x12	; 18
 d4c:	0c 94 6a 07 	jmp	0xed4	; 0xed4 <__epilogue_restores__>

00000d50 <strnlen_P>:
 d50:	fc 01       	movw	r30, r24
 d52:	05 90       	lpm	r0, Z+
 d54:	61 50       	subi	r22, 0x01	; 1
 d56:	70 40       	sbci	r23, 0x00	; 0
 d58:	01 10       	cpse	r0, r1
 d5a:	d8 f7       	brcc	.-10     	; 0xd52 <strnlen_P+0x2>
 d5c:	80 95       	com	r24
 d5e:	90 95       	com	r25
 d60:	8e 0f       	add	r24, r30
 d62:	9f 1f       	adc	r25, r31
 d64:	08 95       	ret

00000d66 <strnlen>:
 d66:	fc 01       	movw	r30, r24
 d68:	61 50       	subi	r22, 0x01	; 1
 d6a:	70 40       	sbci	r23, 0x00	; 0
 d6c:	01 90       	ld	r0, Z+
 d6e:	01 10       	cpse	r0, r1
 d70:	d8 f7       	brcc	.-10     	; 0xd68 <strnlen+0x2>
 d72:	80 95       	com	r24
 d74:	90 95       	com	r25
 d76:	8e 0f       	add	r24, r30
 d78:	9f 1f       	adc	r25, r31
 d7a:	08 95       	ret

00000d7c <fputc>:
 d7c:	0f 93       	push	r16
 d7e:	1f 93       	push	r17
 d80:	cf 93       	push	r28
 d82:	df 93       	push	r29
 d84:	18 2f       	mov	r17, r24
 d86:	09 2f       	mov	r16, r25
 d88:	eb 01       	movw	r28, r22
 d8a:	8b 81       	ldd	r24, Y+3	; 0x03
 d8c:	81 fd       	sbrc	r24, 1
 d8e:	03 c0       	rjmp	.+6      	; 0xd96 <fputc+0x1a>
 d90:	8f ef       	ldi	r24, 0xFF	; 255
 d92:	9f ef       	ldi	r25, 0xFF	; 255
 d94:	20 c0       	rjmp	.+64     	; 0xdd6 <fputc+0x5a>
 d96:	82 ff       	sbrs	r24, 2
 d98:	10 c0       	rjmp	.+32     	; 0xdba <fputc+0x3e>
 d9a:	4e 81       	ldd	r20, Y+6	; 0x06
 d9c:	5f 81       	ldd	r21, Y+7	; 0x07
 d9e:	2c 81       	ldd	r18, Y+4	; 0x04
 da0:	3d 81       	ldd	r19, Y+5	; 0x05
 da2:	42 17       	cp	r20, r18
 da4:	53 07       	cpc	r21, r19
 da6:	7c f4       	brge	.+30     	; 0xdc6 <fputc+0x4a>
 da8:	e8 81       	ld	r30, Y
 daa:	f9 81       	ldd	r31, Y+1	; 0x01
 dac:	9f 01       	movw	r18, r30
 dae:	2f 5f       	subi	r18, 0xFF	; 255
 db0:	3f 4f       	sbci	r19, 0xFF	; 255
 db2:	39 83       	std	Y+1, r19	; 0x01
 db4:	28 83       	st	Y, r18
 db6:	10 83       	st	Z, r17
 db8:	06 c0       	rjmp	.+12     	; 0xdc6 <fputc+0x4a>
 dba:	e8 85       	ldd	r30, Y+8	; 0x08
 dbc:	f9 85       	ldd	r31, Y+9	; 0x09
 dbe:	81 2f       	mov	r24, r17
 dc0:	09 95       	icall
 dc2:	89 2b       	or	r24, r25
 dc4:	29 f7       	brne	.-54     	; 0xd90 <fputc+0x14>
 dc6:	2e 81       	ldd	r18, Y+6	; 0x06
 dc8:	3f 81       	ldd	r19, Y+7	; 0x07
 dca:	2f 5f       	subi	r18, 0xFF	; 255
 dcc:	3f 4f       	sbci	r19, 0xFF	; 255
 dce:	3f 83       	std	Y+7, r19	; 0x07
 dd0:	2e 83       	std	Y+6, r18	; 0x06
 dd2:	81 2f       	mov	r24, r17
 dd4:	90 2f       	mov	r25, r16
 dd6:	df 91       	pop	r29
 dd8:	cf 91       	pop	r28
 dda:	1f 91       	pop	r17
 ddc:	0f 91       	pop	r16
 dde:	08 95       	ret

00000de0 <__ultoa_invert>:
 de0:	fa 01       	movw	r30, r20
 de2:	aa 27       	eor	r26, r26
 de4:	28 30       	cpi	r18, 0x08	; 8
 de6:	51 f1       	breq	.+84     	; 0xe3c <__ultoa_invert+0x5c>
 de8:	20 31       	cpi	r18, 0x10	; 16
 dea:	81 f1       	breq	.+96     	; 0xe4c <__ultoa_invert+0x6c>
 dec:	e8 94       	clt
 dee:	6f 93       	push	r22
 df0:	6e 7f       	andi	r22, 0xFE	; 254
 df2:	6e 5f       	subi	r22, 0xFE	; 254
 df4:	7f 4f       	sbci	r23, 0xFF	; 255
 df6:	8f 4f       	sbci	r24, 0xFF	; 255
 df8:	9f 4f       	sbci	r25, 0xFF	; 255
 dfa:	af 4f       	sbci	r26, 0xFF	; 255
 dfc:	b1 e0       	ldi	r27, 0x01	; 1
 dfe:	3e d0       	rcall	.+124    	; 0xe7c <__ultoa_invert+0x9c>
 e00:	b4 e0       	ldi	r27, 0x04	; 4
 e02:	3c d0       	rcall	.+120    	; 0xe7c <__ultoa_invert+0x9c>
 e04:	67 0f       	add	r22, r23
 e06:	78 1f       	adc	r23, r24
 e08:	89 1f       	adc	r24, r25
 e0a:	9a 1f       	adc	r25, r26
 e0c:	a1 1d       	adc	r26, r1
 e0e:	68 0f       	add	r22, r24
 e10:	79 1f       	adc	r23, r25
 e12:	8a 1f       	adc	r24, r26
 e14:	91 1d       	adc	r25, r1
 e16:	a1 1d       	adc	r26, r1
 e18:	6a 0f       	add	r22, r26
 e1a:	71 1d       	adc	r23, r1
 e1c:	81 1d       	adc	r24, r1
 e1e:	91 1d       	adc	r25, r1
 e20:	a1 1d       	adc	r26, r1
 e22:	20 d0       	rcall	.+64     	; 0xe64 <__ultoa_invert+0x84>
 e24:	09 f4       	brne	.+2      	; 0xe28 <__ultoa_invert+0x48>
 e26:	68 94       	set
 e28:	3f 91       	pop	r19
 e2a:	2a e0       	ldi	r18, 0x0A	; 10
 e2c:	26 9f       	mul	r18, r22
 e2e:	11 24       	eor	r1, r1
 e30:	30 19       	sub	r19, r0
 e32:	30 5d       	subi	r19, 0xD0	; 208
 e34:	31 93       	st	Z+, r19
 e36:	de f6       	brtc	.-74     	; 0xdee <__ultoa_invert+0xe>
 e38:	cf 01       	movw	r24, r30
 e3a:	08 95       	ret
 e3c:	46 2f       	mov	r20, r22
 e3e:	47 70       	andi	r20, 0x07	; 7
 e40:	40 5d       	subi	r20, 0xD0	; 208
 e42:	41 93       	st	Z+, r20
 e44:	b3 e0       	ldi	r27, 0x03	; 3
 e46:	0f d0       	rcall	.+30     	; 0xe66 <__ultoa_invert+0x86>
 e48:	c9 f7       	brne	.-14     	; 0xe3c <__ultoa_invert+0x5c>
 e4a:	f6 cf       	rjmp	.-20     	; 0xe38 <__ultoa_invert+0x58>
 e4c:	46 2f       	mov	r20, r22
 e4e:	4f 70       	andi	r20, 0x0F	; 15
 e50:	40 5d       	subi	r20, 0xD0	; 208
 e52:	4a 33       	cpi	r20, 0x3A	; 58
 e54:	18 f0       	brcs	.+6      	; 0xe5c <__ultoa_invert+0x7c>
 e56:	49 5d       	subi	r20, 0xD9	; 217
 e58:	31 fd       	sbrc	r19, 1
 e5a:	40 52       	subi	r20, 0x20	; 32
 e5c:	41 93       	st	Z+, r20
 e5e:	02 d0       	rcall	.+4      	; 0xe64 <__ultoa_invert+0x84>
 e60:	a9 f7       	brne	.-22     	; 0xe4c <__ultoa_invert+0x6c>
 e62:	ea cf       	rjmp	.-44     	; 0xe38 <__ultoa_invert+0x58>
 e64:	b4 e0       	ldi	r27, 0x04	; 4
 e66:	a6 95       	lsr	r26
 e68:	97 95       	ror	r25
 e6a:	87 95       	ror	r24
 e6c:	77 95       	ror	r23
 e6e:	67 95       	ror	r22
 e70:	ba 95       	dec	r27
 e72:	c9 f7       	brne	.-14     	; 0xe66 <__ultoa_invert+0x86>
 e74:	00 97       	sbiw	r24, 0x00	; 0
 e76:	61 05       	cpc	r22, r1
 e78:	71 05       	cpc	r23, r1
 e7a:	08 95       	ret
 e7c:	9b 01       	movw	r18, r22
 e7e:	ac 01       	movw	r20, r24
 e80:	0a 2e       	mov	r0, r26
 e82:	06 94       	lsr	r0
 e84:	57 95       	ror	r21
 e86:	47 95       	ror	r20
 e88:	37 95       	ror	r19
 e8a:	27 95       	ror	r18
 e8c:	ba 95       	dec	r27
 e8e:	c9 f7       	brne	.-14     	; 0xe82 <__ultoa_invert+0xa2>
 e90:	62 0f       	add	r22, r18
 e92:	73 1f       	adc	r23, r19
 e94:	84 1f       	adc	r24, r20
 e96:	95 1f       	adc	r25, r21
 e98:	a0 1d       	adc	r26, r0
 e9a:	08 95       	ret

00000e9c <__prologue_saves__>:
 e9c:	2f 92       	push	r2
 e9e:	3f 92       	push	r3
 ea0:	4f 92       	push	r4
 ea2:	5f 92       	push	r5
 ea4:	6f 92       	push	r6
 ea6:	7f 92       	push	r7
 ea8:	8f 92       	push	r8
 eaa:	9f 92       	push	r9
 eac:	af 92       	push	r10
 eae:	bf 92       	push	r11
 eb0:	cf 92       	push	r12
 eb2:	df 92       	push	r13
 eb4:	ef 92       	push	r14
 eb6:	ff 92       	push	r15
 eb8:	0f 93       	push	r16
 eba:	1f 93       	push	r17
 ebc:	cf 93       	push	r28
 ebe:	df 93       	push	r29
 ec0:	cd b7       	in	r28, 0x3d	; 61
 ec2:	de b7       	in	r29, 0x3e	; 62
 ec4:	ca 1b       	sub	r28, r26
 ec6:	db 0b       	sbc	r29, r27
 ec8:	0f b6       	in	r0, 0x3f	; 63
 eca:	f8 94       	cli
 ecc:	de bf       	out	0x3e, r29	; 62
 ece:	0f be       	out	0x3f, r0	; 63
 ed0:	cd bf       	out	0x3d, r28	; 61
 ed2:	09 94       	ijmp

00000ed4 <__epilogue_restores__>:
 ed4:	2a 88       	ldd	r2, Y+18	; 0x12
 ed6:	39 88       	ldd	r3, Y+17	; 0x11
 ed8:	48 88       	ldd	r4, Y+16	; 0x10
 eda:	5f 84       	ldd	r5, Y+15	; 0x0f
 edc:	6e 84       	ldd	r6, Y+14	; 0x0e
 ede:	7d 84       	ldd	r7, Y+13	; 0x0d
 ee0:	8c 84       	ldd	r8, Y+12	; 0x0c
 ee2:	9b 84       	ldd	r9, Y+11	; 0x0b
 ee4:	aa 84       	ldd	r10, Y+10	; 0x0a
 ee6:	b9 84       	ldd	r11, Y+9	; 0x09
 ee8:	c8 84       	ldd	r12, Y+8	; 0x08
 eea:	df 80       	ldd	r13, Y+7	; 0x07
 eec:	ee 80       	ldd	r14, Y+6	; 0x06
 eee:	fd 80       	ldd	r15, Y+5	; 0x05
 ef0:	0c 81       	ldd	r16, Y+4	; 0x04
 ef2:	1b 81       	ldd	r17, Y+3	; 0x03
 ef4:	aa 81       	ldd	r26, Y+2	; 0x02
 ef6:	b9 81       	ldd	r27, Y+1	; 0x01
 ef8:	ce 0f       	add	r28, r30
 efa:	d1 1d       	adc	r29, r1
 efc:	0f b6       	in	r0, 0x3f	; 63
 efe:	f8 94       	cli
 f00:	de bf       	out	0x3e, r29	; 62
 f02:	0f be       	out	0x3f, r0	; 63
 f04:	cd bf       	out	0x3d, r28	; 61
 f06:	ed 01       	movw	r28, r26
 f08:	08 95       	ret

00000f0a <_exit>:
 f0a:	f8 94       	cli

00000f0c <__stop_program>:
 f0c:	ff cf       	rjmp	.-2      	; 0xf0c <__stop_program>
