
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         0000011c  00800100  00000baa  00000c3e  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00000baa  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  0080021c  0080021c  00000d5a  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  00000d5a  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001b0  00000000  00000000  00000db6  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   0000158b  00000000  00000000  00000f66  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000a3d  00000000  00000000  000024f1  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000008a6  00000000  00000000  00002f2e  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  000003ec  00000000  00000000  000037d4  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    00000493  00000000  00000000  00003bc0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000a96  00000000  00000000  00004053  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000130  00000000  00000000  00004ae9  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	12 e0       	ldi	r17, 0x02	; 2
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea ea       	ldi	r30, 0xAA	; 170
  84:	fb e0       	ldi	r31, 0x0B	; 11
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	ac 31       	cpi	r26, 0x1C	; 28
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	22 e0       	ldi	r18, 0x02	; 2
  94:	ac e1       	ldi	r26, 0x1C	; 28
  96:	b2 e0       	ldi	r27, 0x02	; 2
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a4 32       	cpi	r26, 0x24	; 36
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 67 00 	call	0xce	; 0xce <main>
  a6:	0c 94 d3 05 	jmp	0xba6	; 0xba6 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include "setup.h"
#include "adc.h"

void adc_init(void) {
	MCUCR |= (1<<SRE);
  ae:	85 b7       	in	r24, 0x35	; 53
  b0:	80 68       	ori	r24, 0x80	; 128
  b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  b4:	80 b7       	in	r24, 0x30	; 48
  b6:	80 62       	ori	r24, 0x20	; 32
  b8:	80 bf       	out	0x30, r24	; 48
	DDRE &= ~(1<<PINE0);    //Enable interrupt pin
  ba:	30 98       	cbi	0x06, 0	; 6
  bc:	08 95       	ret

000000be <adc_read>:
}

uint8_t adc_read(adc_channel channel) {
	volatile char *adc = (char *) 0x1400;

	*adc = 0x04 | channel;
  be:	84 60       	ori	r24, 0x04	; 4
  c0:	80 93 00 14 	sts	0x1400, r24
	wait_until_bit_is_clear(PINE,PINE0);
  c4:	28 99       	sbic	0x05, 0	; 5
  c6:	fe cf       	rjmp	.-4      	; 0xc4 <adc_read+0x6>
	return *adc;
  c8:	80 91 00 14 	lds	r24, 0x1400
}
  cc:	08 95       	ret

000000ce <main>:
#include "mcp2515.h"
#include "can.h"
#include <util/delay.h>


int main(void) {
  ce:	cf 93       	push	r28
  d0:	df 93       	push	r29
  d2:	cd b7       	in	r28, 0x3d	; 61
  d4:	de b7       	in	r29, 0x3e	; 62
  d6:	64 97       	sbiw	r28, 0x14	; 20
  d8:	0f b6       	in	r0, 0x3f	; 63
  da:	f8 94       	cli
  dc:	de bf       	out	0x3e, r29	; 62
  de:	0f be       	out	0x3f, r0	; 63
  e0:	cd bf       	out	0x3d, r28	; 61
	adc_init();	
  e2:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	uart_init();
  e6:	0e 94 ca 02 	call	0x594	; 0x594 <uart_init>

	sram_test();
  ea:	0e 94 3d 02 	call	0x47a	; 0x47a <sram_test>
	joy_calibrate();
  ee:	0e 94 c4 01 	call	0x388	; 0x388 <joy_calibrate>
	//oled_init();
	//OLED_reset();
	joystick_position pos;
	can_init();
  f2:	0e 94 de 00 	call	0x1bc	; 0x1bc <can_init>
	can_message snd_msg;
	can_message rcv_msg;
	snd_msg.id = 3;
  f6:	83 e0       	ldi	r24, 0x03	; 3
  f8:	89 83       	std	Y+1, r24	; 0x01
	
	snd_msg.data[0] = 'h';
  fa:	88 e6       	ldi	r24, 0x68	; 104
  fc:	8b 83       	std	Y+3, r24	; 0x03
	snd_msg.data[1] = 'e';
  fe:	85 e6       	ldi	r24, 0x65	; 101
 100:	8c 83       	std	Y+4, r24	; 0x04
	snd_msg.data[2] = 'l';
 102:	8c e6       	ldi	r24, 0x6C	; 108
 104:	8d 83       	std	Y+5, r24	; 0x05
	snd_msg.data[3] = 'l';
 106:	8e 83       	std	Y+6, r24	; 0x06
	snd_msg.data[4] = 'o';
 108:	8f e6       	ldi	r24, 0x6F	; 111
 10a:	8f 83       	std	Y+7, r24	; 0x07
	snd_msg.length = 5;
 10c:	85 e0       	ldi	r24, 0x05	; 5
 10e:	8a 83       	std	Y+2, r24	; 0x02
    {	
		

		can_send(snd_msg);
		rcv_msg = can_recieve();
		printf("Message ID: %d\n",rcv_msg.id);
 110:	0f 2e       	mov	r0, r31
 112:	fe e0       	ldi	r31, 0x0E	; 14
 114:	cf 2e       	mov	r12, r31
 116:	f1 e0       	ldi	r31, 0x01	; 1
 118:	df 2e       	mov	r13, r31
 11a:	f0 2d       	mov	r31, r0
	snd_msg.length = 5;
	while(1)
    {	
		

		can_send(snd_msg);
 11c:	09 81       	ldd	r16, Y+1	; 0x01
 11e:	1a 81       	ldd	r17, Y+2	; 0x02
 120:	2b 81       	ldd	r18, Y+3	; 0x03
 122:	3c 81       	ldd	r19, Y+4	; 0x04
 124:	4d 81       	ldd	r20, Y+5	; 0x05
 126:	5e 81       	ldd	r21, Y+6	; 0x06
 128:	6f 81       	ldd	r22, Y+7	; 0x07
 12a:	78 85       	ldd	r23, Y+8	; 0x08
 12c:	89 85       	ldd	r24, Y+9	; 0x09
 12e:	9a 85       	ldd	r25, Y+10	; 0x0a
 130:	0e 94 01 01 	call	0x202	; 0x202 <can_send>
		rcv_msg = can_recieve();
 134:	ce 01       	movw	r24, r28
 136:	0b 96       	adiw	r24, 0x0b	; 11
 138:	0e 94 5b 01 	call	0x2b6	; 0x2b6 <can_recieve>
 13c:	fc 84       	ldd	r15, Y+12	; 0x0c
		printf("Message ID: %d\n",rcv_msg.id);
 13e:	8b 85       	ldd	r24, Y+11	; 0x0b
 140:	1f 92       	push	r1
 142:	8f 93       	push	r24
 144:	df 92       	push	r13
 146:	cf 92       	push	r12
 148:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
		for (int i = 0; i < rcv_msg.length; i++) {
 14c:	0f 90       	pop	r0
 14e:	0f 90       	pop	r0
 150:	0f 90       	pop	r0
 152:	0f 90       	pop	r0
 154:	ff 20       	and	r15, r15
 156:	81 f0       	breq	.+32     	; 0x178 <main+0xaa>
 158:	8e 01       	movw	r16, r28
 15a:	03 5f       	subi	r16, 0xF3	; 243
 15c:	1f 4f       	sbci	r17, 0xFF	; 255
 15e:	c8 01       	movw	r24, r16
 160:	8f 0d       	add	r24, r15
 162:	91 1d       	adc	r25, r1
 164:	7c 01       	movw	r14, r24
			printf("%c", rcv_msg.data[i]);
 166:	f8 01       	movw	r30, r16
 168:	81 91       	ld	r24, Z+
 16a:	8f 01       	movw	r16, r30
 16c:	90 e0       	ldi	r25, 0x00	; 0
 16e:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <putchar>
		

		can_send(snd_msg);
		rcv_msg = can_recieve();
		printf("Message ID: %d\n",rcv_msg.id);
		for (int i = 0; i < rcv_msg.length; i++) {
 172:	0e 15       	cp	r16, r14
 174:	1f 05       	cpc	r17, r15
 176:	b9 f7       	brne	.-18     	; 0x166 <main+0x98>
			printf("%c", rcv_msg.data[i]);
		}
		printf("\n");
 178:	8a e0       	ldi	r24, 0x0A	; 10
 17a:	90 e0       	ldi	r25, 0x00	; 0
 17c:	0e 94 f0 02 	call	0x5e0	; 0x5e0 <putchar>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
 180:	ff ef       	ldi	r31, 0xFF	; 255
 182:	2f ef       	ldi	r18, 0xFF	; 255
 184:	8e e0       	ldi	r24, 0x0E	; 14
 186:	f1 50       	subi	r31, 0x01	; 1
 188:	20 40       	sbci	r18, 0x00	; 0
 18a:	80 40       	sbci	r24, 0x00	; 0
 18c:	e1 f7       	brne	.-8      	; 0x186 <main+0xb8>
 18e:	00 c0       	rjmp	.+0      	; 0x190 <main+0xc2>
 190:	00 00       	nop
 192:	c4 cf       	rjmp	.-120    	; 0x11c <main+0x4e>

00000194 <can_set_mode>:
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);
	//can_set_mode(MODE_NORMAL);
	return EXIT_SUCCESS;
}

int can_set_mode(char mode) {
 194:	cf 93       	push	r28
 196:	c8 2f       	mov	r28, r24
	mcp2515_bit_modify(MCP_CANCTRL,MODE_MASK,mode);
 198:	48 2f       	mov	r20, r24
 19a:	60 ee       	ldi	r22, 0xE0	; 224
 19c:	8f e0       	ldi	r24, 0x0F	; 15
 19e:	0e 94 0d 02 	call	0x41a	; 0x41a <mcp2515_bit_modify>
	char new_mode = mcp2515_read(MCP_CANSTAT);
 1a2:	8e e0       	ldi	r24, 0x0E	; 14
 1a4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <mcp2515_read>
	new_mode = new_mode & MODE_MASK;
 1a8:	80 7e       	andi	r24, 0xE0	; 224
	if(new_mode != mode) {
 1aa:	21 e0       	ldi	r18, 0x01	; 1
 1ac:	30 e0       	ldi	r19, 0x00	; 0
 1ae:	c8 13       	cpse	r28, r24
 1b0:	02 c0       	rjmp	.+4      	; 0x1b6 <can_set_mode+0x22>
 1b2:	20 e0       	ldi	r18, 0x00	; 0
 1b4:	30 e0       	ldi	r19, 0x00	; 0
		return EXIT_FAILURE;
	} else{
		return EXIT_SUCCESS;
	}
}
 1b6:	c9 01       	movw	r24, r18
 1b8:	cf 91       	pop	r28
 1ba:	08 95       	ret

000001bc <can_init>:
#include "can.h"

int can_init(void) {
 1bc:	cf 93       	push	r28
 1be:	df 93       	push	r29
	clear_bit(DDRD,PIND2);    //Enable new message interrupt pin
 1c0:	8a 98       	cbi	0x11, 2	; 17
	
	mcp2515_init();
 1c2:	0e 94 d7 01 	call	0x3ae	; 0x3ae <mcp2515_init>
	if (can_set_mode(MODE_CONFIG) != 0) {
 1c6:	80 e8       	ldi	r24, 0x80	; 128
 1c8:	0e 94 ca 00 	call	0x194	; 0x194 <can_set_mode>
 1cc:	ec 01       	movw	r28, r24
 1ce:	00 97       	sbiw	r24, 0x00	; 0
 1d0:	39 f0       	breq	.+14     	; 0x1e0 <can_init+0x24>
		printf("MCP2515 reset failed! \n");
 1d2:	8e e1       	ldi	r24, 0x1E	; 30
 1d4:	91 e0       	ldi	r25, 0x01	; 1
 1d6:	0e 94 f7 02 	call	0x5ee	; 0x5ee <puts>
		return EXIT_FAILURE;
 1da:	c1 e0       	ldi	r28, 0x01	; 1
 1dc:	d0 e0       	ldi	r29, 0x00	; 0
 1de:	0d c0       	rjmp	.+26     	; 0x1fa <can_init+0x3e>
	}
	can_set_mode(MODE_LOOPBACK);
 1e0:	80 e4       	ldi	r24, 0x40	; 64
 1e2:	0e 94 ca 00 	call	0x194	; 0x194 <can_set_mode>
	
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100100, 0xFF);
 1e6:	4f ef       	ldi	r20, 0xFF	; 255
 1e8:	64 e6       	ldi	r22, 0x64	; 100
 1ea:	80 e6       	ldi	r24, 0x60	; 96
 1ec:	0e 94 0d 02 	call	0x41a	; 0x41a <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);
 1f0:	41 e0       	ldi	r20, 0x01	; 1
 1f2:	61 e0       	ldi	r22, 0x01	; 1
 1f4:	8b e2       	ldi	r24, 0x2B	; 43
 1f6:	0e 94 0d 02 	call	0x41a	; 0x41a <mcp2515_bit_modify>
	//can_set_mode(MODE_NORMAL);
	return EXIT_SUCCESS;
}
 1fa:	ce 01       	movw	r24, r28
 1fc:	df 91       	pop	r29
 1fe:	cf 91       	pop	r28
 200:	08 95       	ret

00000202 <can_send>:
	} else{
		return EXIT_SUCCESS;
	}
}

void can_send(can_message message) {
 202:	cf 92       	push	r12
 204:	df 92       	push	r13
 206:	ef 92       	push	r14
 208:	ff 92       	push	r15
 20a:	0f 93       	push	r16
 20c:	1f 93       	push	r17
 20e:	cf 93       	push	r28
 210:	df 93       	push	r29
 212:	cd b7       	in	r28, 0x3d	; 61
 214:	de b7       	in	r29, 0x3e	; 62
 216:	2a 97       	sbiw	r28, 0x0a	; 10
 218:	0f b6       	in	r0, 0x3f	; 63
 21a:	f8 94       	cli
 21c:	de bf       	out	0x3e, r29	; 62
 21e:	0f be       	out	0x3f, r0	; 63
 220:	cd bf       	out	0x3d, r28	; 61
 222:	09 83       	std	Y+1, r16	; 0x01
 224:	c1 2e       	mov	r12, r17
 226:	1a 83       	std	Y+2, r17	; 0x02
 228:	2b 83       	std	Y+3, r18	; 0x03
 22a:	3c 83       	std	Y+4, r19	; 0x04
 22c:	4d 83       	std	Y+5, r20	; 0x05
 22e:	5e 83       	std	Y+6, r21	; 0x06
 230:	6f 83       	std	Y+7, r22	; 0x07
 232:	78 87       	std	Y+8, r23	; 0x08
 234:	89 87       	std	Y+9, r24	; 0x09
 236:	9a 87       	std	Y+10, r25	; 0x0a
	wait_until_bit_is_clear(mcp2515_read(MCP_TXB0CTRL),3);
 238:	80 e3       	ldi	r24, 0x30	; 48
 23a:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <mcp2515_read>
 23e:	83 fd       	sbrc	r24, 3
 240:	fb cf       	rjmp	.-10     	; 0x238 <can_send+0x36>
	
	mcp2515_write(MCP_TXB0SIDH,(char) (message.id >> 3));
 242:	60 2f       	mov	r22, r16
 244:	66 95       	lsr	r22
 246:	66 95       	lsr	r22
 248:	66 95       	lsr	r22
 24a:	81 e3       	ldi	r24, 0x31	; 49
 24c:	0e 94 ee 01 	call	0x3dc	; 0x3dc <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL,(char) (message.id << 5));
 250:	60 2f       	mov	r22, r16
 252:	62 95       	swap	r22
 254:	66 0f       	add	r22, r22
 256:	60 7e       	andi	r22, 0xE0	; 224
 258:	82 e3       	ldi	r24, 0x32	; 50
 25a:	0e 94 ee 01 	call	0x3dc	; 0x3dc <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC,(char) (message.length));
 25e:	6c 2d       	mov	r22, r12
 260:	85 e3       	ldi	r24, 0x35	; 53
 262:	0e 94 ee 01 	call	0x3dc	; 0x3dc <mcp2515_write>
	for (int i = 0; i < message.length; i++) {
 266:	d1 2c       	mov	r13, r1
 268:	1c 14       	cp	r1, r12
 26a:	1d 04       	cpc	r1, r13
 26c:	94 f4       	brge	.+36     	; 0x292 <can_send+0x90>
 26e:	7e 01       	movw	r14, r28
 270:	83 e0       	ldi	r24, 0x03	; 3
 272:	e8 0e       	add	r14, r24
 274:	f1 1c       	adc	r15, r1
 276:	00 e0       	ldi	r16, 0x00	; 0
 278:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, message.data[i]);
 27a:	f7 01       	movw	r30, r14
 27c:	61 91       	ld	r22, Z+
 27e:	7f 01       	movw	r14, r30
 280:	86 e3       	ldi	r24, 0x36	; 54
 282:	80 0f       	add	r24, r16
 284:	0e 94 ee 01 	call	0x3dc	; 0x3dc <mcp2515_write>
	wait_until_bit_is_clear(mcp2515_read(MCP_TXB0CTRL),3);
	
	mcp2515_write(MCP_TXB0SIDH,(char) (message.id >> 3));
	mcp2515_write(MCP_TXB0SIDL,(char) (message.id << 5));
	mcp2515_write(MCP_TXB0DLC,(char) (message.length));
	for (int i = 0; i < message.length; i++) {
 288:	0f 5f       	subi	r16, 0xFF	; 255
 28a:	1f 4f       	sbci	r17, 0xFF	; 255
 28c:	0c 15       	cp	r16, r12
 28e:	1d 05       	cpc	r17, r13
 290:	a4 f3       	brlt	.-24     	; 0x27a <can_send+0x78>
		mcp2515_write(MCP_TXB0D0 + i, message.data[i]);
	}
	
	mcp2515_req_to_send(MCP_RTS_TX0);	
 292:	81 e8       	ldi	r24, 0x81	; 129
 294:	0e 94 02 02 	call	0x404	; 0x404 <mcp2515_req_to_send>
}
 298:	2a 96       	adiw	r28, 0x0a	; 10
 29a:	0f b6       	in	r0, 0x3f	; 63
 29c:	f8 94       	cli
 29e:	de bf       	out	0x3e, r29	; 62
 2a0:	0f be       	out	0x3f, r0	; 63
 2a2:	cd bf       	out	0x3d, r28	; 61
 2a4:	df 91       	pop	r29
 2a6:	cf 91       	pop	r28
 2a8:	1f 91       	pop	r17
 2aa:	0f 91       	pop	r16
 2ac:	ff 90       	pop	r15
 2ae:	ef 90       	pop	r14
 2b0:	df 90       	pop	r13
 2b2:	cf 90       	pop	r12
 2b4:	08 95       	ret

000002b6 <can_recieve>:

can_message can_recieve(void) {
 2b6:	9f 92       	push	r9
 2b8:	af 92       	push	r10
 2ba:	bf 92       	push	r11
 2bc:	cf 92       	push	r12
 2be:	df 92       	push	r13
 2c0:	ef 92       	push	r14
 2c2:	ff 92       	push	r15
 2c4:	0f 93       	push	r16
 2c6:	1f 93       	push	r17
 2c8:	cf 93       	push	r28
 2ca:	df 93       	push	r29
 2cc:	cd b7       	in	r28, 0x3d	; 61
 2ce:	de b7       	in	r29, 0x3e	; 62
 2d0:	2a 97       	sbiw	r28, 0x0a	; 10
 2d2:	0f b6       	in	r0, 0x3f	; 63
 2d4:	f8 94       	cli
 2d6:	de bf       	out	0x3e, r29	; 62
 2d8:	0f be       	out	0x3f, r0	; 63
 2da:	cd bf       	out	0x3d, r28	; 61
 2dc:	6c 01       	movw	r12, r24
	wait_until_bit_is_clear(PIND,PIND2);
 2de:	82 99       	sbic	0x10, 2	; 16
 2e0:	fe cf       	rjmp	.-4      	; 0x2de <can_recieve+0x28>
	//printf("hello \n");
	
	can_message message;
	if (test_bit(mcp2515_read(MCP_CANINTF),MCP_RX0IF)) {
 2e2:	8c e2       	ldi	r24, 0x2C	; 44
 2e4:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <mcp2515_read>
 2e8:	81 ff       	sbrs	r24, 1
 2ea:	2f c0       	rjmp	.+94     	; 0x34a <can_recieve+0x94>
		message.id = (uint8_t) (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
 2ec:	81 e6       	ldi	r24, 0x61	; 97
 2ee:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <mcp2515_read>
 2f2:	18 2f       	mov	r17, r24
 2f4:	82 e6       	ldi	r24, 0x62	; 98
 2f6:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <mcp2515_read>
 2fa:	82 95       	swap	r24
 2fc:	86 95       	lsr	r24
 2fe:	87 70       	andi	r24, 0x07	; 7
 300:	11 0f       	add	r17, r17
 302:	11 0f       	add	r17, r17
 304:	11 0f       	add	r17, r17
 306:	98 2e       	mov	r9, r24
 308:	91 2a       	or	r9, r17
		message.length = (uint8_t) mcp2515_read(MCP_RXB0DLC) & (0x0f);
 30a:	85 e6       	ldi	r24, 0x65	; 101
 30c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <mcp2515_read>
 310:	8f 70       	andi	r24, 0x0F	; 15
 312:	a8 2e       	mov	r10, r24
		//printf("ID: %d \n", message.id);
		for (int i = 0; i < message.length; i++) {
 314:	a1 f0       	breq	.+40     	; 0x33e <can_recieve+0x88>
 316:	8e 01       	movw	r16, r28
 318:	0d 5f       	subi	r16, 0xFD	; 253
 31a:	1f 4f       	sbci	r17, 0xFF	; 255
 31c:	78 01       	movw	r14, r16
 31e:	e8 0e       	add	r14, r24
 320:	f1 1c       	adc	r15, r1
 322:	0f 2e       	mov	r0, r31
 324:	f6 e6       	ldi	r31, 0x66	; 102
 326:	bf 2e       	mov	r11, r31
 328:	f0 2d       	mov	r31, r0
			message.data[i] = (uint8_t) mcp2515_read(MCP_RXB0D0 + i);
 32a:	8b 2d       	mov	r24, r11
 32c:	0e 94 dc 01 	call	0x3b8	; 0x3b8 <mcp2515_read>
 330:	f8 01       	movw	r30, r16
 332:	81 93       	st	Z+, r24
 334:	8f 01       	movw	r16, r30
 336:	b3 94       	inc	r11
	can_message message;
	if (test_bit(mcp2515_read(MCP_CANINTF),MCP_RX0IF)) {
		message.id = (uint8_t) (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
		message.length = (uint8_t) mcp2515_read(MCP_RXB0DLC) & (0x0f);
		//printf("ID: %d \n", message.id);
		for (int i = 0; i < message.length; i++) {
 338:	ee 15       	cp	r30, r14
 33a:	ff 05       	cpc	r31, r15
 33c:	b1 f7       	brne	.-20     	; 0x32a <can_recieve+0x74>
			message.data[i] = (uint8_t) mcp2515_read(MCP_RXB0D0 + i);
		}
		//printf("Data: %d",message.data[0]);
		mcp2515_bit_modify(MCP_CANINTF,0x01,0);
 33e:	40 e0       	ldi	r20, 0x00	; 0
 340:	61 e0       	ldi	r22, 0x01	; 1
 342:	8c e2       	ldi	r24, 0x2C	; 44
 344:	0e 94 0d 02 	call	0x41a	; 0x41a <mcp2515_bit_modify>
 348:	02 c0       	rjmp	.+4      	; 0x34e <can_recieve+0x98>
	} else {
		message.id = -1;
 34a:	99 24       	eor	r9, r9
 34c:	9a 94       	dec	r9
	}
	return message;	
 34e:	99 82       	std	Y+1, r9	; 0x01
 350:	aa 82       	std	Y+2, r10	; 0x02
 352:	8a e0       	ldi	r24, 0x0A	; 10
 354:	fe 01       	movw	r30, r28
 356:	31 96       	adiw	r30, 0x01	; 1
 358:	d6 01       	movw	r26, r12
 35a:	01 90       	ld	r0, Z+
 35c:	0d 92       	st	X+, r0
 35e:	8a 95       	dec	r24
 360:	e1 f7       	brne	.-8      	; 0x35a <can_recieve+0xa4>
 362:	c6 01       	movw	r24, r12
 364:	2a 96       	adiw	r28, 0x0a	; 10
 366:	0f b6       	in	r0, 0x3f	; 63
 368:	f8 94       	cli
 36a:	de bf       	out	0x3e, r29	; 62
 36c:	0f be       	out	0x3f, r0	; 63
 36e:	cd bf       	out	0x3d, r28	; 61
 370:	df 91       	pop	r29
 372:	cf 91       	pop	r28
 374:	1f 91       	pop	r17
 376:	0f 91       	pop	r16
 378:	ff 90       	pop	r15
 37a:	ef 90       	pop	r14
 37c:	df 90       	pop	r13
 37e:	cf 90       	pop	r12
 380:	bf 90       	pop	r11
 382:	af 90       	pop	r10
 384:	9f 90       	pop	r9
 386:	08 95       	ret

00000388 <joy_calibrate>:
void joy_init() {
    adc_init();
}

void joy_calibrate() {
    zero_x = adc_read(JOY_X);
 388:	80 e0       	ldi	r24, 0x00	; 0
 38a:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 38e:	80 93 1d 02 	sts	0x021D, r24
    zero_y = adc_read(JOY_Y);
 392:	81 e0       	ldi	r24, 0x01	; 1
 394:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
 398:	80 93 1c 02 	sts	0x021C, r24
 39c:	08 95       	ret

0000039e <mcp2515_reset>:
	mcp2515_reset();
}


void mcp2515_reset(void) {
	spi_select();
 39e:	0e 94 39 02 	call	0x472	; 0x472 <spi_select>
	spi_write(MCP_RESET);
 3a2:	80 ec       	ldi	r24, 0xC0	; 192
 3a4:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_deselect();
 3a8:	0e 94 3b 02 	call	0x476	; 0x476 <spi_deselect>
 3ac:	08 95       	ret

000003ae <mcp2515_init>:
#include "mcp2515.h"

void mcp2515_init(void) {
	spi_init();
 3ae:	0e 94 27 02 	call	0x44e	; 0x44e <spi_init>
	mcp2515_reset();
 3b2:	0e 94 cf 01 	call	0x39e	; 0x39e <mcp2515_reset>
 3b6:	08 95       	ret

000003b8 <mcp2515_read>:
	spi_select();
	spi_write(MCP_RESET);
	spi_deselect();
}

char mcp2515_read(char reg_address) {
 3b8:	cf 93       	push	r28
 3ba:	c8 2f       	mov	r28, r24
	spi_select();
 3bc:	0e 94 39 02 	call	0x472	; 0x472 <spi_select>
	spi_write(MCP_READ);
 3c0:	83 e0       	ldi	r24, 0x03	; 3
 3c2:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_write(reg_address);
 3c6:	8c 2f       	mov	r24, r28
 3c8:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	char result = spi_read();
 3cc:	0e 94 32 02 	call	0x464	; 0x464 <spi_read>
 3d0:	c8 2f       	mov	r28, r24
	spi_deselect();
 3d2:	0e 94 3b 02 	call	0x476	; 0x476 <spi_deselect>
	return result;
}
 3d6:	8c 2f       	mov	r24, r28
 3d8:	cf 91       	pop	r28
 3da:	08 95       	ret

000003dc <mcp2515_write>:

void mcp2515_write(char reg_address, char data) {
 3dc:	cf 93       	push	r28
 3de:	df 93       	push	r29
 3e0:	d8 2f       	mov	r29, r24
 3e2:	c6 2f       	mov	r28, r22
	spi_select();
 3e4:	0e 94 39 02 	call	0x472	; 0x472 <spi_select>
	spi_write(MCP_WRITE);
 3e8:	82 e0       	ldi	r24, 0x02	; 2
 3ea:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_write(reg_address);
 3ee:	8d 2f       	mov	r24, r29
 3f0:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_write(data);
 3f4:	8c 2f       	mov	r24, r28
 3f6:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_deselect();
 3fa:	0e 94 3b 02 	call	0x476	; 0x476 <spi_deselect>
}
 3fe:	df 91       	pop	r29
 400:	cf 91       	pop	r28
 402:	08 95       	ret

00000404 <mcp2515_req_to_send>:

void mcp2515_req_to_send(char buf_address) {
 404:	cf 93       	push	r28
 406:	c8 2f       	mov	r28, r24
	spi_select();
 408:	0e 94 39 02 	call	0x472	; 0x472 <spi_select>
	spi_write(buf_address);
 40c:	8c 2f       	mov	r24, r28
 40e:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_deselect();
 412:	0e 94 3b 02 	call	0x476	; 0x476 <spi_deselect>
}
 416:	cf 91       	pop	r28
 418:	08 95       	ret

0000041a <mcp2515_bit_modify>:
	char result = spi_read();
	spi_deselect();
	return result;	
}

void mcp2515_bit_modify(char reg_address, char mask, char data) {
 41a:	1f 93       	push	r17
 41c:	cf 93       	push	r28
 41e:	df 93       	push	r29
 420:	18 2f       	mov	r17, r24
 422:	d6 2f       	mov	r29, r22
 424:	c4 2f       	mov	r28, r20
	spi_select();
 426:	0e 94 39 02 	call	0x472	; 0x472 <spi_select>
	spi_write(MCP_BITMOD);
 42a:	85 e0       	ldi	r24, 0x05	; 5
 42c:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_write(reg_address);
 430:	81 2f       	mov	r24, r17
 432:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_write(mask);
 436:	8d 2f       	mov	r24, r29
 438:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_write(data);
 43c:	8c 2f       	mov	r24, r28
 43e:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	spi_deselect();
 442:	0e 94 3b 02 	call	0x476	; 0x476 <spi_deselect>
 446:	df 91       	pop	r29
 448:	cf 91       	pop	r28
 44a:	1f 91       	pop	r17
 44c:	08 95       	ret

0000044e <spi_init>:
#include "spi.h"

void spi_init(void) {
	// Set MOSI, SCK and SS output, MISO input 
	set_bit(DDR_SPI,DD_MOSI);
 44e:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDR_SPI,DD_SCK);
 450:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDR_SPI,DD_SS);
 452:	bc 9a       	sbi	0x17, 4	; 23
	clear_bit(DDR_SPI,DD_MISO);
 454:	be 98       	cbi	0x17, 6	; 23
	// Enable SPI, Master, set clock rate fck/16 
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
 456:	81 e5       	ldi	r24, 0x51	; 81
 458:	8d b9       	out	0x0d, r24	; 13
 45a:	08 95       	ret

0000045c <spi_write>:
}

void spi_write(char data) {
	/* Start transmission */
	SPDR = data;
 45c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	wait_until_bit_is_set(SPSR,SPIF);
 45e:	77 9b       	sbis	0x0e, 7	; 14
 460:	fe cf       	rjmp	.-4      	; 0x45e <spi_write+0x2>
}
 462:	08 95       	ret

00000464 <spi_read>:

char spi_read(void) {
	// Something needs to be sent to be able to read the spi register
	spi_write(0);
 464:	80 e0       	ldi	r24, 0x00	; 0
 466:	0e 94 2e 02 	call	0x45c	; 0x45c <spi_write>
	
	wait_until_bit_is_set(SPSR,SPIF);
 46a:	77 9b       	sbis	0x0e, 7	; 14
 46c:	fe cf       	rjmp	.-4      	; 0x46a <spi_read+0x6>
	return SPDR;
 46e:	8f b1       	in	r24, 0x0f	; 15
}
 470:	08 95       	ret

00000472 <spi_select>:

void spi_select(void) {
	clear_bit(PORTB,PINB4);
 472:	c4 98       	cbi	0x18, 4	; 24
 474:	08 95       	ret

00000476 <spi_deselect>:
}


void spi_deselect(void) {
	set_bit(PORTB,PINB4);
 476:	c4 9a       	sbi	0x18, 4	; 24
 478:	08 95       	ret

0000047a <sram_test>:
#include "setup.h"
#include "sram.h"

void sram_test(void) {
 47a:	cf 92       	push	r12
 47c:	df 92       	push	r13
 47e:	ef 92       	push	r14
 480:	ff 92       	push	r15
 482:	0f 93       	push	r16
 484:	1f 93       	push	r17
 486:	cf 93       	push	r28
 488:	df 93       	push	r29
	uint16_t i, werrors, rerrors;
	werrors = 0;
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
 48a:	85 e3       	ldi	r24, 0x35	; 53
 48c:	91 e0       	ldi	r25, 0x01	; 1
 48e:	0e 94 f7 02 	call	0x5ee	; 0x5ee <puts>
void sram_test(void) {
    //Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;

	uint16_t i, werrors, rerrors;
	werrors = 0;
 492:	00 e0       	ldi	r16, 0x00	; 0
 494:	10 e0       	ldi	r17, 0x00	; 0
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
 496:	c0 e0       	ldi	r28, 0x00	; 0
 498:	d0 e0       	ldi	r29, 0x00	; 0
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
		if (ext_ram[i] != testvalue) {
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
 49a:	0f 2e       	mov	r0, r31
 49c:	fc e4       	ldi	r31, 0x4C	; 76
 49e:	ef 2e       	mov	r14, r31
 4a0:	f1 e0       	ldi	r31, 0x01	; 1
 4a2:	ff 2e       	mov	r15, r31
 4a4:	f0 2d       	mov	r31, r0
 4a6:	8c 2f       	mov	r24, r28
 4a8:	80 95       	com	r24
 4aa:	fe 01       	movw	r30, r28
 4ac:	f8 5e       	subi	r31, 0xE8	; 232

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
 4ae:	80 83       	st	Z, r24
		if (ext_ram[i] != testvalue) {
 4b0:	90 81       	ld	r25, Z
 4b2:	98 17       	cp	r25, r24
 4b4:	a9 f0       	breq	.+42     	; 0x4e0 <sram_test+0x66>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
 4b6:	90 81       	ld	r25, Z
 4b8:	1f 92       	push	r1
 4ba:	8f 93       	push	r24
 4bc:	1f 92       	push	r1
 4be:	9f 93       	push	r25
 4c0:	df 93       	push	r29
 4c2:	cf 93       	push	r28
 4c4:	ff 92       	push	r15
 4c6:	ef 92       	push	r14
 4c8:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
			werrors++;
 4cc:	0f 5f       	subi	r16, 0xFF	; 255
 4ce:	1f 4f       	sbci	r17, 0xFF	; 255
 4d0:	8d b7       	in	r24, 0x3d	; 61
 4d2:	9e b7       	in	r25, 0x3e	; 62
 4d4:	08 96       	adiw	r24, 0x08	; 8
 4d6:	0f b6       	in	r0, 0x3f	; 63
 4d8:	f8 94       	cli
 4da:	9e bf       	out	0x3e, r25	; 62
 4dc:	0f be       	out	0x3f, r0	; 63
 4de:	8d bf       	out	0x3d, r24	; 61
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
 4e0:	21 96       	adiw	r28, 0x01	; 1
 4e2:	c1 15       	cp	r28, r1
 4e4:	98 e0       	ldi	r25, 0x08	; 8
 4e6:	d9 07       	cpc	r29, r25
 4e8:	f1 f6       	brne	.-68     	; 0x4a6 <sram_test+0x2c>
 4ea:	e1 2c       	mov	r14, r1
 4ec:	f1 2c       	mov	r15, r1
 4ee:	c0 e0       	ldi	r28, 0x00	; 0
 4f0:	d0 e0       	ldi	r29, 0x00	; 0
	}

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		if (ext_ram[i] != testvalue) {
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
 4f2:	0f 2e       	mov	r0, r31
 4f4:	fc e8       	ldi	r31, 0x8C	; 140
 4f6:	cf 2e       	mov	r12, r31
 4f8:	f1 e0       	ldi	r31, 0x01	; 1
 4fa:	df 2e       	mov	r13, r31
 4fc:	f0 2d       	mov	r31, r0
 4fe:	8c 2f       	mov	r24, r28
 500:	80 95       	com	r24
 502:	fe 01       	movw	r30, r28
 504:	f8 5e       	subi	r31, 0xE8	; 232
		}
	}

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		if (ext_ram[i] != testvalue) {
 506:	90 81       	ld	r25, Z
 508:	89 17       	cp	r24, r25
 50a:	b1 f0       	breq	.+44     	; 0x538 <__stack+0x39>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
 50c:	90 81       	ld	r25, Z
 50e:	1f 92       	push	r1
 510:	8f 93       	push	r24
 512:	1f 92       	push	r1
 514:	9f 93       	push	r25
 516:	df 93       	push	r29
 518:	cf 93       	push	r28
 51a:	df 92       	push	r13
 51c:	cf 92       	push	r12
 51e:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
			rerrors++;
 522:	8f ef       	ldi	r24, 0xFF	; 255
 524:	e8 1a       	sub	r14, r24
 526:	f8 0a       	sbc	r15, r24
 528:	8d b7       	in	r24, 0x3d	; 61
 52a:	9e b7       	in	r25, 0x3e	; 62
 52c:	08 96       	adiw	r24, 0x08	; 8
 52e:	0f b6       	in	r0, 0x3f	; 63
 530:	f8 94       	cli
 532:	9e bf       	out	0x3e, r25	; 62
 534:	0f be       	out	0x3f, r0	; 63
 536:	8d bf       	out	0x3d, r24	; 61
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			werrors++;
		}
	}

	for (i = 0; i < 0x800; i++) {
 538:	21 96       	adiw	r28, 0x01	; 1
 53a:	c1 15       	cp	r28, r1
 53c:	98 e0       	ldi	r25, 0x08	; 8
 53e:	d9 07       	cpc	r29, r25
 540:	f1 f6       	brne	.-68     	; 0x4fe <sram_test+0x84>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			rerrors++;
		}
	}

	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
 542:	ff 92       	push	r15
 544:	ef 92       	push	r14
 546:	1f 93       	push	r17
 548:	0f 93       	push	r16
 54a:	8b ec       	ldi	r24, 0xCB	; 203
 54c:	91 e0       	ldi	r25, 0x01	; 1
 54e:	9f 93       	push	r25
 550:	8f 93       	push	r24
 552:	0e 94 dc 02 	call	0x5b8	; 0x5b8 <printf>
 556:	0f 90       	pop	r0
 558:	0f 90       	pop	r0
 55a:	0f 90       	pop	r0
 55c:	0f 90       	pop	r0
 55e:	0f 90       	pop	r0
 560:	0f 90       	pop	r0
}
 562:	df 91       	pop	r29
 564:	cf 91       	pop	r28
 566:	1f 91       	pop	r17
 568:	0f 91       	pop	r16
 56a:	ff 90       	pop	r15
 56c:	ef 90       	pop	r14
 56e:	df 90       	pop	r13
 570:	cf 90       	pop	r12
 572:	08 95       	ret

00000574 <uart_send_char>:
	// Link to stdio
	stdout = &uart_io;
	stdin = &uart_io;
}

void uart_send_char(char c, FILE *stream) {
 574:	cf 93       	push	r28
 576:	c8 2f       	mov	r28, r24
	if (c == '\n') {
 578:	8a 30       	cpi	r24, 0x0A	; 10
 57a:	19 f4       	brne	.+6      	; 0x582 <uart_send_char+0xe>
	    uart_send_char('\r', stream);
 57c:	8d e0       	ldi	r24, 0x0D	; 13
 57e:	0e 94 ba 02 	call	0x574	; 0x574 <uart_send_char>
	}
	loop_until_bit_is_set(UCSR0A,UDRE0);
 582:	5d 9b       	sbis	0x0b, 5	; 11
 584:	fe cf       	rjmp	.-4      	; 0x582 <uart_send_char+0xe>
	UDR0 = c;
 586:	cc b9       	out	0x0c, r28	; 12
}
 588:	cf 91       	pop	r28
 58a:	08 95       	ret

0000058c <uart_recieve_char>:

char uart_recieve_char(FILE *stream) {
	loop_until_bit_is_set(UCSR0A,RXC0);
 58c:	5f 9b       	sbis	0x0b, 7	; 11
 58e:	fe cf       	rjmp	.-4      	; 0x58c <uart_recieve_char>
	return UDR0;
 590:	8c b1       	in	r24, 0x0c	; 12
}
 592:	08 95       	ret

00000594 <uart_init>:
#include "setup.h"

void uart_init() {
	//Set baud rate
	unsigned int ubrr = (F_CPU-250)/16/BAUD-1;
	UBRR0H = (unsigned char)(ubrr >> 8);
 594:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(ubrr);
 596:	8e e1       	ldi	r24, 0x1E	; 30
 598:	89 b9       	out	0x09, r24	; 9

	// Set 8-bit data 2 stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
 59a:	8e e8       	ldi	r24, 0x8E	; 142
 59c:	80 bd       	out	0x20, r24	; 32
	// Enable RX0 and TX0
	UCSR0B = (1 << RXEN0 | (1 << TXEN0));
 59e:	88 e1       	ldi	r24, 0x18	; 24
 5a0:	8a b9       	out	0x0a, r24	; 10
	
	// Link to stdio
	stdout = &uart_io;
 5a2:	80 e0       	ldi	r24, 0x00	; 0
 5a4:	91 e0       	ldi	r25, 0x01	; 1
 5a6:	90 93 21 02 	sts	0x0221, r25
 5aa:	80 93 20 02 	sts	0x0220, r24
	stdin = &uart_io;
 5ae:	90 93 1f 02 	sts	0x021F, r25
 5b2:	80 93 1e 02 	sts	0x021E, r24
 5b6:	08 95       	ret

000005b8 <printf>:
 5b8:	a0 e0       	ldi	r26, 0x00	; 0
 5ba:	b0 e0       	ldi	r27, 0x00	; 0
 5bc:	e2 ee       	ldi	r30, 0xE2	; 226
 5be:	f2 e0       	ldi	r31, 0x02	; 2
 5c0:	0c 94 ac 05 	jmp	0xb58	; 0xb58 <__prologue_saves__+0x20>
 5c4:	fe 01       	movw	r30, r28
 5c6:	35 96       	adiw	r30, 0x05	; 5
 5c8:	61 91       	ld	r22, Z+
 5ca:	71 91       	ld	r23, Z+
 5cc:	af 01       	movw	r20, r30
 5ce:	80 91 20 02 	lds	r24, 0x0220
 5d2:	90 91 21 02 	lds	r25, 0x0221
 5d6:	0e 94 24 03 	call	0x648	; 0x648 <vfprintf>
 5da:	e2 e0       	ldi	r30, 0x02	; 2
 5dc:	0c 94 c8 05 	jmp	0xb90	; 0xb90 <__epilogue_restores__+0x20>

000005e0 <putchar>:
 5e0:	60 91 20 02 	lds	r22, 0x0220
 5e4:	70 91 21 02 	lds	r23, 0x0221
 5e8:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 5ec:	08 95       	ret

000005ee <puts>:
 5ee:	0f 93       	push	r16
 5f0:	1f 93       	push	r17
 5f2:	cf 93       	push	r28
 5f4:	df 93       	push	r29
 5f6:	e0 91 20 02 	lds	r30, 0x0220
 5fa:	f0 91 21 02 	lds	r31, 0x0221
 5fe:	23 81       	ldd	r18, Z+3	; 0x03
 600:	21 ff       	sbrs	r18, 1
 602:	1b c0       	rjmp	.+54     	; 0x63a <puts+0x4c>
 604:	ec 01       	movw	r28, r24
 606:	00 e0       	ldi	r16, 0x00	; 0
 608:	10 e0       	ldi	r17, 0x00	; 0
 60a:	89 91       	ld	r24, Y+
 60c:	60 91 20 02 	lds	r22, 0x0220
 610:	70 91 21 02 	lds	r23, 0x0221
 614:	db 01       	movw	r26, r22
 616:	18 96       	adiw	r26, 0x08	; 8
 618:	ed 91       	ld	r30, X+
 61a:	fc 91       	ld	r31, X
 61c:	19 97       	sbiw	r26, 0x09	; 9
 61e:	88 23       	and	r24, r24
 620:	31 f0       	breq	.+12     	; 0x62e <puts+0x40>
 622:	09 95       	icall
 624:	89 2b       	or	r24, r25
 626:	89 f3       	breq	.-30     	; 0x60a <puts+0x1c>
 628:	0f ef       	ldi	r16, 0xFF	; 255
 62a:	1f ef       	ldi	r17, 0xFF	; 255
 62c:	ee cf       	rjmp	.-36     	; 0x60a <puts+0x1c>
 62e:	8a e0       	ldi	r24, 0x0A	; 10
 630:	09 95       	icall
 632:	89 2b       	or	r24, r25
 634:	11 f4       	brne	.+4      	; 0x63a <puts+0x4c>
 636:	c8 01       	movw	r24, r16
 638:	02 c0       	rjmp	.+4      	; 0x63e <puts+0x50>
 63a:	8f ef       	ldi	r24, 0xFF	; 255
 63c:	9f ef       	ldi	r25, 0xFF	; 255
 63e:	df 91       	pop	r29
 640:	cf 91       	pop	r28
 642:	1f 91       	pop	r17
 644:	0f 91       	pop	r16
 646:	08 95       	ret

00000648 <vfprintf>:
 648:	ac e0       	ldi	r26, 0x0C	; 12
 64a:	b0 e0       	ldi	r27, 0x00	; 0
 64c:	ea e2       	ldi	r30, 0x2A	; 42
 64e:	f3 e0       	ldi	r31, 0x03	; 3
 650:	0c 94 9c 05 	jmp	0xb38	; 0xb38 <__prologue_saves__>
 654:	7c 01       	movw	r14, r24
 656:	6b 01       	movw	r12, r22
 658:	8a 01       	movw	r16, r20
 65a:	fc 01       	movw	r30, r24
 65c:	17 82       	std	Z+7, r1	; 0x07
 65e:	16 82       	std	Z+6, r1	; 0x06
 660:	83 81       	ldd	r24, Z+3	; 0x03
 662:	81 ff       	sbrs	r24, 1
 664:	bd c1       	rjmp	.+890    	; 0x9e0 <vfprintf+0x398>
 666:	ce 01       	movw	r24, r28
 668:	01 96       	adiw	r24, 0x01	; 1
 66a:	4c 01       	movw	r8, r24
 66c:	f7 01       	movw	r30, r14
 66e:	93 81       	ldd	r25, Z+3	; 0x03
 670:	f6 01       	movw	r30, r12
 672:	93 fd       	sbrc	r25, 3
 674:	85 91       	lpm	r24, Z+
 676:	93 ff       	sbrs	r25, 3
 678:	81 91       	ld	r24, Z+
 67a:	6f 01       	movw	r12, r30
 67c:	88 23       	and	r24, r24
 67e:	09 f4       	brne	.+2      	; 0x682 <vfprintf+0x3a>
 680:	ab c1       	rjmp	.+854    	; 0x9d8 <vfprintf+0x390>
 682:	85 32       	cpi	r24, 0x25	; 37
 684:	39 f4       	brne	.+14     	; 0x694 <vfprintf+0x4c>
 686:	93 fd       	sbrc	r25, 3
 688:	85 91       	lpm	r24, Z+
 68a:	93 ff       	sbrs	r25, 3
 68c:	81 91       	ld	r24, Z+
 68e:	6f 01       	movw	r12, r30
 690:	85 32       	cpi	r24, 0x25	; 37
 692:	29 f4       	brne	.+10     	; 0x69e <vfprintf+0x56>
 694:	b7 01       	movw	r22, r14
 696:	90 e0       	ldi	r25, 0x00	; 0
 698:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 69c:	e7 cf       	rjmp	.-50     	; 0x66c <vfprintf+0x24>
 69e:	51 2c       	mov	r5, r1
 6a0:	31 2c       	mov	r3, r1
 6a2:	20 e0       	ldi	r18, 0x00	; 0
 6a4:	20 32       	cpi	r18, 0x20	; 32
 6a6:	a0 f4       	brcc	.+40     	; 0x6d0 <vfprintf+0x88>
 6a8:	8b 32       	cpi	r24, 0x2B	; 43
 6aa:	69 f0       	breq	.+26     	; 0x6c6 <vfprintf+0x7e>
 6ac:	30 f4       	brcc	.+12     	; 0x6ba <vfprintf+0x72>
 6ae:	80 32       	cpi	r24, 0x20	; 32
 6b0:	59 f0       	breq	.+22     	; 0x6c8 <vfprintf+0x80>
 6b2:	83 32       	cpi	r24, 0x23	; 35
 6b4:	69 f4       	brne	.+26     	; 0x6d0 <vfprintf+0x88>
 6b6:	20 61       	ori	r18, 0x10	; 16
 6b8:	2c c0       	rjmp	.+88     	; 0x712 <vfprintf+0xca>
 6ba:	8d 32       	cpi	r24, 0x2D	; 45
 6bc:	39 f0       	breq	.+14     	; 0x6cc <vfprintf+0x84>
 6be:	80 33       	cpi	r24, 0x30	; 48
 6c0:	39 f4       	brne	.+14     	; 0x6d0 <vfprintf+0x88>
 6c2:	21 60       	ori	r18, 0x01	; 1
 6c4:	26 c0       	rjmp	.+76     	; 0x712 <vfprintf+0xca>
 6c6:	22 60       	ori	r18, 0x02	; 2
 6c8:	24 60       	ori	r18, 0x04	; 4
 6ca:	23 c0       	rjmp	.+70     	; 0x712 <vfprintf+0xca>
 6cc:	28 60       	ori	r18, 0x08	; 8
 6ce:	21 c0       	rjmp	.+66     	; 0x712 <vfprintf+0xca>
 6d0:	27 fd       	sbrc	r18, 7
 6d2:	27 c0       	rjmp	.+78     	; 0x722 <vfprintf+0xda>
 6d4:	30 ed       	ldi	r19, 0xD0	; 208
 6d6:	38 0f       	add	r19, r24
 6d8:	3a 30       	cpi	r19, 0x0A	; 10
 6da:	78 f4       	brcc	.+30     	; 0x6fa <vfprintf+0xb2>
 6dc:	26 ff       	sbrs	r18, 6
 6de:	06 c0       	rjmp	.+12     	; 0x6ec <vfprintf+0xa4>
 6e0:	fa e0       	ldi	r31, 0x0A	; 10
 6e2:	5f 9e       	mul	r5, r31
 6e4:	30 0d       	add	r19, r0
 6e6:	11 24       	eor	r1, r1
 6e8:	53 2e       	mov	r5, r19
 6ea:	13 c0       	rjmp	.+38     	; 0x712 <vfprintf+0xca>
 6ec:	8a e0       	ldi	r24, 0x0A	; 10
 6ee:	38 9e       	mul	r3, r24
 6f0:	30 0d       	add	r19, r0
 6f2:	11 24       	eor	r1, r1
 6f4:	33 2e       	mov	r3, r19
 6f6:	20 62       	ori	r18, 0x20	; 32
 6f8:	0c c0       	rjmp	.+24     	; 0x712 <vfprintf+0xca>
 6fa:	8e 32       	cpi	r24, 0x2E	; 46
 6fc:	21 f4       	brne	.+8      	; 0x706 <vfprintf+0xbe>
 6fe:	26 fd       	sbrc	r18, 6
 700:	6b c1       	rjmp	.+726    	; 0x9d8 <vfprintf+0x390>
 702:	20 64       	ori	r18, 0x40	; 64
 704:	06 c0       	rjmp	.+12     	; 0x712 <vfprintf+0xca>
 706:	8c 36       	cpi	r24, 0x6C	; 108
 708:	11 f4       	brne	.+4      	; 0x70e <vfprintf+0xc6>
 70a:	20 68       	ori	r18, 0x80	; 128
 70c:	02 c0       	rjmp	.+4      	; 0x712 <vfprintf+0xca>
 70e:	88 36       	cpi	r24, 0x68	; 104
 710:	41 f4       	brne	.+16     	; 0x722 <vfprintf+0xda>
 712:	f6 01       	movw	r30, r12
 714:	93 fd       	sbrc	r25, 3
 716:	85 91       	lpm	r24, Z+
 718:	93 ff       	sbrs	r25, 3
 71a:	81 91       	ld	r24, Z+
 71c:	6f 01       	movw	r12, r30
 71e:	81 11       	cpse	r24, r1
 720:	c1 cf       	rjmp	.-126    	; 0x6a4 <vfprintf+0x5c>
 722:	98 2f       	mov	r25, r24
 724:	9f 7d       	andi	r25, 0xDF	; 223
 726:	95 54       	subi	r25, 0x45	; 69
 728:	93 30       	cpi	r25, 0x03	; 3
 72a:	28 f4       	brcc	.+10     	; 0x736 <vfprintf+0xee>
 72c:	0c 5f       	subi	r16, 0xFC	; 252
 72e:	1f 4f       	sbci	r17, 0xFF	; 255
 730:	ff e3       	ldi	r31, 0x3F	; 63
 732:	f9 83       	std	Y+1, r31	; 0x01
 734:	0d c0       	rjmp	.+26     	; 0x750 <vfprintf+0x108>
 736:	83 36       	cpi	r24, 0x63	; 99
 738:	31 f0       	breq	.+12     	; 0x746 <vfprintf+0xfe>
 73a:	83 37       	cpi	r24, 0x73	; 115
 73c:	71 f0       	breq	.+28     	; 0x75a <vfprintf+0x112>
 73e:	83 35       	cpi	r24, 0x53	; 83
 740:	09 f0       	breq	.+2      	; 0x744 <vfprintf+0xfc>
 742:	5b c0       	rjmp	.+182    	; 0x7fa <vfprintf+0x1b2>
 744:	22 c0       	rjmp	.+68     	; 0x78a <vfprintf+0x142>
 746:	f8 01       	movw	r30, r16
 748:	80 81       	ld	r24, Z
 74a:	89 83       	std	Y+1, r24	; 0x01
 74c:	0e 5f       	subi	r16, 0xFE	; 254
 74e:	1f 4f       	sbci	r17, 0xFF	; 255
 750:	44 24       	eor	r4, r4
 752:	43 94       	inc	r4
 754:	51 2c       	mov	r5, r1
 756:	54 01       	movw	r10, r8
 758:	15 c0       	rjmp	.+42     	; 0x784 <vfprintf+0x13c>
 75a:	38 01       	movw	r6, r16
 75c:	f2 e0       	ldi	r31, 0x02	; 2
 75e:	6f 0e       	add	r6, r31
 760:	71 1c       	adc	r7, r1
 762:	f8 01       	movw	r30, r16
 764:	a0 80       	ld	r10, Z
 766:	b1 80       	ldd	r11, Z+1	; 0x01
 768:	26 ff       	sbrs	r18, 6
 76a:	03 c0       	rjmp	.+6      	; 0x772 <vfprintf+0x12a>
 76c:	65 2d       	mov	r22, r5
 76e:	70 e0       	ldi	r23, 0x00	; 0
 770:	02 c0       	rjmp	.+4      	; 0x776 <vfprintf+0x12e>
 772:	6f ef       	ldi	r22, 0xFF	; 255
 774:	7f ef       	ldi	r23, 0xFF	; 255
 776:	c5 01       	movw	r24, r10
 778:	2c 87       	std	Y+12, r18	; 0x0c
 77a:	0e 94 01 05 	call	0xa02	; 0xa02 <strnlen>
 77e:	2c 01       	movw	r4, r24
 780:	83 01       	movw	r16, r6
 782:	2c 85       	ldd	r18, Y+12	; 0x0c
 784:	2f 77       	andi	r18, 0x7F	; 127
 786:	22 2e       	mov	r2, r18
 788:	17 c0       	rjmp	.+46     	; 0x7b8 <vfprintf+0x170>
 78a:	38 01       	movw	r6, r16
 78c:	f2 e0       	ldi	r31, 0x02	; 2
 78e:	6f 0e       	add	r6, r31
 790:	71 1c       	adc	r7, r1
 792:	f8 01       	movw	r30, r16
 794:	a0 80       	ld	r10, Z
 796:	b1 80       	ldd	r11, Z+1	; 0x01
 798:	26 ff       	sbrs	r18, 6
 79a:	03 c0       	rjmp	.+6      	; 0x7a2 <vfprintf+0x15a>
 79c:	65 2d       	mov	r22, r5
 79e:	70 e0       	ldi	r23, 0x00	; 0
 7a0:	02 c0       	rjmp	.+4      	; 0x7a6 <vfprintf+0x15e>
 7a2:	6f ef       	ldi	r22, 0xFF	; 255
 7a4:	7f ef       	ldi	r23, 0xFF	; 255
 7a6:	c5 01       	movw	r24, r10
 7a8:	2c 87       	std	Y+12, r18	; 0x0c
 7aa:	0e 94 f6 04 	call	0x9ec	; 0x9ec <strnlen_P>
 7ae:	2c 01       	movw	r4, r24
 7b0:	2c 85       	ldd	r18, Y+12	; 0x0c
 7b2:	20 68       	ori	r18, 0x80	; 128
 7b4:	22 2e       	mov	r2, r18
 7b6:	83 01       	movw	r16, r6
 7b8:	23 fc       	sbrc	r2, 3
 7ba:	1b c0       	rjmp	.+54     	; 0x7f2 <vfprintf+0x1aa>
 7bc:	83 2d       	mov	r24, r3
 7be:	90 e0       	ldi	r25, 0x00	; 0
 7c0:	48 16       	cp	r4, r24
 7c2:	59 06       	cpc	r5, r25
 7c4:	b0 f4       	brcc	.+44     	; 0x7f2 <vfprintf+0x1aa>
 7c6:	b7 01       	movw	r22, r14
 7c8:	80 e2       	ldi	r24, 0x20	; 32
 7ca:	90 e0       	ldi	r25, 0x00	; 0
 7cc:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 7d0:	3a 94       	dec	r3
 7d2:	f4 cf       	rjmp	.-24     	; 0x7bc <vfprintf+0x174>
 7d4:	f5 01       	movw	r30, r10
 7d6:	27 fc       	sbrc	r2, 7
 7d8:	85 91       	lpm	r24, Z+
 7da:	27 fe       	sbrs	r2, 7
 7dc:	81 91       	ld	r24, Z+
 7de:	5f 01       	movw	r10, r30
 7e0:	b7 01       	movw	r22, r14
 7e2:	90 e0       	ldi	r25, 0x00	; 0
 7e4:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 7e8:	31 10       	cpse	r3, r1
 7ea:	3a 94       	dec	r3
 7ec:	f1 e0       	ldi	r31, 0x01	; 1
 7ee:	4f 1a       	sub	r4, r31
 7f0:	51 08       	sbc	r5, r1
 7f2:	41 14       	cp	r4, r1
 7f4:	51 04       	cpc	r5, r1
 7f6:	71 f7       	brne	.-36     	; 0x7d4 <vfprintf+0x18c>
 7f8:	e5 c0       	rjmp	.+458    	; 0x9c4 <vfprintf+0x37c>
 7fa:	84 36       	cpi	r24, 0x64	; 100
 7fc:	11 f0       	breq	.+4      	; 0x802 <vfprintf+0x1ba>
 7fe:	89 36       	cpi	r24, 0x69	; 105
 800:	39 f5       	brne	.+78     	; 0x850 <vfprintf+0x208>
 802:	f8 01       	movw	r30, r16
 804:	27 ff       	sbrs	r18, 7
 806:	07 c0       	rjmp	.+14     	; 0x816 <vfprintf+0x1ce>
 808:	60 81       	ld	r22, Z
 80a:	71 81       	ldd	r23, Z+1	; 0x01
 80c:	82 81       	ldd	r24, Z+2	; 0x02
 80e:	93 81       	ldd	r25, Z+3	; 0x03
 810:	0c 5f       	subi	r16, 0xFC	; 252
 812:	1f 4f       	sbci	r17, 0xFF	; 255
 814:	08 c0       	rjmp	.+16     	; 0x826 <vfprintf+0x1de>
 816:	60 81       	ld	r22, Z
 818:	71 81       	ldd	r23, Z+1	; 0x01
 81a:	88 27       	eor	r24, r24
 81c:	77 fd       	sbrc	r23, 7
 81e:	80 95       	com	r24
 820:	98 2f       	mov	r25, r24
 822:	0e 5f       	subi	r16, 0xFE	; 254
 824:	1f 4f       	sbci	r17, 0xFF	; 255
 826:	2f 76       	andi	r18, 0x6F	; 111
 828:	b2 2e       	mov	r11, r18
 82a:	97 ff       	sbrs	r25, 7
 82c:	09 c0       	rjmp	.+18     	; 0x840 <vfprintf+0x1f8>
 82e:	90 95       	com	r25
 830:	80 95       	com	r24
 832:	70 95       	com	r23
 834:	61 95       	neg	r22
 836:	7f 4f       	sbci	r23, 0xFF	; 255
 838:	8f 4f       	sbci	r24, 0xFF	; 255
 83a:	9f 4f       	sbci	r25, 0xFF	; 255
 83c:	20 68       	ori	r18, 0x80	; 128
 83e:	b2 2e       	mov	r11, r18
 840:	2a e0       	ldi	r18, 0x0A	; 10
 842:	30 e0       	ldi	r19, 0x00	; 0
 844:	a4 01       	movw	r20, r8
 846:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__ultoa_invert>
 84a:	a8 2e       	mov	r10, r24
 84c:	a8 18       	sub	r10, r8
 84e:	44 c0       	rjmp	.+136    	; 0x8d8 <vfprintf+0x290>
 850:	85 37       	cpi	r24, 0x75	; 117
 852:	29 f4       	brne	.+10     	; 0x85e <vfprintf+0x216>
 854:	2f 7e       	andi	r18, 0xEF	; 239
 856:	b2 2e       	mov	r11, r18
 858:	2a e0       	ldi	r18, 0x0A	; 10
 85a:	30 e0       	ldi	r19, 0x00	; 0
 85c:	25 c0       	rjmp	.+74     	; 0x8a8 <vfprintf+0x260>
 85e:	f2 2f       	mov	r31, r18
 860:	f9 7f       	andi	r31, 0xF9	; 249
 862:	bf 2e       	mov	r11, r31
 864:	8f 36       	cpi	r24, 0x6F	; 111
 866:	c1 f0       	breq	.+48     	; 0x898 <vfprintf+0x250>
 868:	18 f4       	brcc	.+6      	; 0x870 <vfprintf+0x228>
 86a:	88 35       	cpi	r24, 0x58	; 88
 86c:	79 f0       	breq	.+30     	; 0x88c <vfprintf+0x244>
 86e:	b4 c0       	rjmp	.+360    	; 0x9d8 <vfprintf+0x390>
 870:	80 37       	cpi	r24, 0x70	; 112
 872:	19 f0       	breq	.+6      	; 0x87a <vfprintf+0x232>
 874:	88 37       	cpi	r24, 0x78	; 120
 876:	21 f0       	breq	.+8      	; 0x880 <vfprintf+0x238>
 878:	af c0       	rjmp	.+350    	; 0x9d8 <vfprintf+0x390>
 87a:	2f 2f       	mov	r18, r31
 87c:	20 61       	ori	r18, 0x10	; 16
 87e:	b2 2e       	mov	r11, r18
 880:	b4 fe       	sbrs	r11, 4
 882:	0d c0       	rjmp	.+26     	; 0x89e <vfprintf+0x256>
 884:	8b 2d       	mov	r24, r11
 886:	84 60       	ori	r24, 0x04	; 4
 888:	b8 2e       	mov	r11, r24
 88a:	09 c0       	rjmp	.+18     	; 0x89e <vfprintf+0x256>
 88c:	24 ff       	sbrs	r18, 4
 88e:	0a c0       	rjmp	.+20     	; 0x8a4 <vfprintf+0x25c>
 890:	9f 2f       	mov	r25, r31
 892:	96 60       	ori	r25, 0x06	; 6
 894:	b9 2e       	mov	r11, r25
 896:	06 c0       	rjmp	.+12     	; 0x8a4 <vfprintf+0x25c>
 898:	28 e0       	ldi	r18, 0x08	; 8
 89a:	30 e0       	ldi	r19, 0x00	; 0
 89c:	05 c0       	rjmp	.+10     	; 0x8a8 <vfprintf+0x260>
 89e:	20 e1       	ldi	r18, 0x10	; 16
 8a0:	30 e0       	ldi	r19, 0x00	; 0
 8a2:	02 c0       	rjmp	.+4      	; 0x8a8 <vfprintf+0x260>
 8a4:	20 e1       	ldi	r18, 0x10	; 16
 8a6:	32 e0       	ldi	r19, 0x02	; 2
 8a8:	f8 01       	movw	r30, r16
 8aa:	b7 fe       	sbrs	r11, 7
 8ac:	07 c0       	rjmp	.+14     	; 0x8bc <vfprintf+0x274>
 8ae:	60 81       	ld	r22, Z
 8b0:	71 81       	ldd	r23, Z+1	; 0x01
 8b2:	82 81       	ldd	r24, Z+2	; 0x02
 8b4:	93 81       	ldd	r25, Z+3	; 0x03
 8b6:	0c 5f       	subi	r16, 0xFC	; 252
 8b8:	1f 4f       	sbci	r17, 0xFF	; 255
 8ba:	06 c0       	rjmp	.+12     	; 0x8c8 <vfprintf+0x280>
 8bc:	60 81       	ld	r22, Z
 8be:	71 81       	ldd	r23, Z+1	; 0x01
 8c0:	80 e0       	ldi	r24, 0x00	; 0
 8c2:	90 e0       	ldi	r25, 0x00	; 0
 8c4:	0e 5f       	subi	r16, 0xFE	; 254
 8c6:	1f 4f       	sbci	r17, 0xFF	; 255
 8c8:	a4 01       	movw	r20, r8
 8ca:	0e 94 3e 05 	call	0xa7c	; 0xa7c <__ultoa_invert>
 8ce:	a8 2e       	mov	r10, r24
 8d0:	a8 18       	sub	r10, r8
 8d2:	fb 2d       	mov	r31, r11
 8d4:	ff 77       	andi	r31, 0x7F	; 127
 8d6:	bf 2e       	mov	r11, r31
 8d8:	b6 fe       	sbrs	r11, 6
 8da:	0b c0       	rjmp	.+22     	; 0x8f2 <vfprintf+0x2aa>
 8dc:	2b 2d       	mov	r18, r11
 8de:	2e 7f       	andi	r18, 0xFE	; 254
 8e0:	a5 14       	cp	r10, r5
 8e2:	50 f4       	brcc	.+20     	; 0x8f8 <vfprintf+0x2b0>
 8e4:	b4 fe       	sbrs	r11, 4
 8e6:	0a c0       	rjmp	.+20     	; 0x8fc <vfprintf+0x2b4>
 8e8:	b2 fc       	sbrc	r11, 2
 8ea:	08 c0       	rjmp	.+16     	; 0x8fc <vfprintf+0x2b4>
 8ec:	2b 2d       	mov	r18, r11
 8ee:	2e 7e       	andi	r18, 0xEE	; 238
 8f0:	05 c0       	rjmp	.+10     	; 0x8fc <vfprintf+0x2b4>
 8f2:	7a 2c       	mov	r7, r10
 8f4:	2b 2d       	mov	r18, r11
 8f6:	03 c0       	rjmp	.+6      	; 0x8fe <vfprintf+0x2b6>
 8f8:	7a 2c       	mov	r7, r10
 8fa:	01 c0       	rjmp	.+2      	; 0x8fe <vfprintf+0x2b6>
 8fc:	75 2c       	mov	r7, r5
 8fe:	24 ff       	sbrs	r18, 4
 900:	0d c0       	rjmp	.+26     	; 0x91c <vfprintf+0x2d4>
 902:	fe 01       	movw	r30, r28
 904:	ea 0d       	add	r30, r10
 906:	f1 1d       	adc	r31, r1
 908:	80 81       	ld	r24, Z
 90a:	80 33       	cpi	r24, 0x30	; 48
 90c:	11 f4       	brne	.+4      	; 0x912 <vfprintf+0x2ca>
 90e:	29 7e       	andi	r18, 0xE9	; 233
 910:	09 c0       	rjmp	.+18     	; 0x924 <vfprintf+0x2dc>
 912:	22 ff       	sbrs	r18, 2
 914:	06 c0       	rjmp	.+12     	; 0x922 <vfprintf+0x2da>
 916:	73 94       	inc	r7
 918:	73 94       	inc	r7
 91a:	04 c0       	rjmp	.+8      	; 0x924 <vfprintf+0x2dc>
 91c:	82 2f       	mov	r24, r18
 91e:	86 78       	andi	r24, 0x86	; 134
 920:	09 f0       	breq	.+2      	; 0x924 <vfprintf+0x2dc>
 922:	73 94       	inc	r7
 924:	23 fd       	sbrc	r18, 3
 926:	13 c0       	rjmp	.+38     	; 0x94e <vfprintf+0x306>
 928:	20 ff       	sbrs	r18, 0
 92a:	06 c0       	rjmp	.+12     	; 0x938 <vfprintf+0x2f0>
 92c:	5a 2c       	mov	r5, r10
 92e:	73 14       	cp	r7, r3
 930:	18 f4       	brcc	.+6      	; 0x938 <vfprintf+0x2f0>
 932:	53 0c       	add	r5, r3
 934:	57 18       	sub	r5, r7
 936:	73 2c       	mov	r7, r3
 938:	73 14       	cp	r7, r3
 93a:	68 f4       	brcc	.+26     	; 0x956 <vfprintf+0x30e>
 93c:	b7 01       	movw	r22, r14
 93e:	80 e2       	ldi	r24, 0x20	; 32
 940:	90 e0       	ldi	r25, 0x00	; 0
 942:	2c 87       	std	Y+12, r18	; 0x0c
 944:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 948:	73 94       	inc	r7
 94a:	2c 85       	ldd	r18, Y+12	; 0x0c
 94c:	f5 cf       	rjmp	.-22     	; 0x938 <vfprintf+0x2f0>
 94e:	73 14       	cp	r7, r3
 950:	10 f4       	brcc	.+4      	; 0x956 <vfprintf+0x30e>
 952:	37 18       	sub	r3, r7
 954:	01 c0       	rjmp	.+2      	; 0x958 <vfprintf+0x310>
 956:	31 2c       	mov	r3, r1
 958:	24 ff       	sbrs	r18, 4
 95a:	12 c0       	rjmp	.+36     	; 0x980 <vfprintf+0x338>
 95c:	b7 01       	movw	r22, r14
 95e:	80 e3       	ldi	r24, 0x30	; 48
 960:	90 e0       	ldi	r25, 0x00	; 0
 962:	2c 87       	std	Y+12, r18	; 0x0c
 964:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 968:	2c 85       	ldd	r18, Y+12	; 0x0c
 96a:	22 ff       	sbrs	r18, 2
 96c:	17 c0       	rjmp	.+46     	; 0x99c <vfprintf+0x354>
 96e:	21 ff       	sbrs	r18, 1
 970:	03 c0       	rjmp	.+6      	; 0x978 <vfprintf+0x330>
 972:	88 e5       	ldi	r24, 0x58	; 88
 974:	90 e0       	ldi	r25, 0x00	; 0
 976:	02 c0       	rjmp	.+4      	; 0x97c <vfprintf+0x334>
 978:	88 e7       	ldi	r24, 0x78	; 120
 97a:	90 e0       	ldi	r25, 0x00	; 0
 97c:	b7 01       	movw	r22, r14
 97e:	0c c0       	rjmp	.+24     	; 0x998 <vfprintf+0x350>
 980:	82 2f       	mov	r24, r18
 982:	86 78       	andi	r24, 0x86	; 134
 984:	59 f0       	breq	.+22     	; 0x99c <vfprintf+0x354>
 986:	21 fd       	sbrc	r18, 1
 988:	02 c0       	rjmp	.+4      	; 0x98e <vfprintf+0x346>
 98a:	80 e2       	ldi	r24, 0x20	; 32
 98c:	01 c0       	rjmp	.+2      	; 0x990 <vfprintf+0x348>
 98e:	8b e2       	ldi	r24, 0x2B	; 43
 990:	27 fd       	sbrc	r18, 7
 992:	8d e2       	ldi	r24, 0x2D	; 45
 994:	b7 01       	movw	r22, r14
 996:	90 e0       	ldi	r25, 0x00	; 0
 998:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 99c:	a5 14       	cp	r10, r5
 99e:	38 f4       	brcc	.+14     	; 0x9ae <vfprintf+0x366>
 9a0:	b7 01       	movw	r22, r14
 9a2:	80 e3       	ldi	r24, 0x30	; 48
 9a4:	90 e0       	ldi	r25, 0x00	; 0
 9a6:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 9aa:	5a 94       	dec	r5
 9ac:	f7 cf       	rjmp	.-18     	; 0x99c <vfprintf+0x354>
 9ae:	aa 94       	dec	r10
 9b0:	f4 01       	movw	r30, r8
 9b2:	ea 0d       	add	r30, r10
 9b4:	f1 1d       	adc	r31, r1
 9b6:	80 81       	ld	r24, Z
 9b8:	b7 01       	movw	r22, r14
 9ba:	90 e0       	ldi	r25, 0x00	; 0
 9bc:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 9c0:	a1 10       	cpse	r10, r1
 9c2:	f5 cf       	rjmp	.-22     	; 0x9ae <vfprintf+0x366>
 9c4:	33 20       	and	r3, r3
 9c6:	09 f4       	brne	.+2      	; 0x9ca <vfprintf+0x382>
 9c8:	51 ce       	rjmp	.-862    	; 0x66c <vfprintf+0x24>
 9ca:	b7 01       	movw	r22, r14
 9cc:	80 e2       	ldi	r24, 0x20	; 32
 9ce:	90 e0       	ldi	r25, 0x00	; 0
 9d0:	0e 94 0c 05 	call	0xa18	; 0xa18 <fputc>
 9d4:	3a 94       	dec	r3
 9d6:	f6 cf       	rjmp	.-20     	; 0x9c4 <vfprintf+0x37c>
 9d8:	f7 01       	movw	r30, r14
 9da:	86 81       	ldd	r24, Z+6	; 0x06
 9dc:	97 81       	ldd	r25, Z+7	; 0x07
 9de:	02 c0       	rjmp	.+4      	; 0x9e4 <vfprintf+0x39c>
 9e0:	8f ef       	ldi	r24, 0xFF	; 255
 9e2:	9f ef       	ldi	r25, 0xFF	; 255
 9e4:	2c 96       	adiw	r28, 0x0c	; 12
 9e6:	e2 e1       	ldi	r30, 0x12	; 18
 9e8:	0c 94 b8 05 	jmp	0xb70	; 0xb70 <__epilogue_restores__>

000009ec <strnlen_P>:
 9ec:	fc 01       	movw	r30, r24
 9ee:	05 90       	lpm	r0, Z+
 9f0:	61 50       	subi	r22, 0x01	; 1
 9f2:	70 40       	sbci	r23, 0x00	; 0
 9f4:	01 10       	cpse	r0, r1
 9f6:	d8 f7       	brcc	.-10     	; 0x9ee <strnlen_P+0x2>
 9f8:	80 95       	com	r24
 9fa:	90 95       	com	r25
 9fc:	8e 0f       	add	r24, r30
 9fe:	9f 1f       	adc	r25, r31
 a00:	08 95       	ret

00000a02 <strnlen>:
 a02:	fc 01       	movw	r30, r24
 a04:	61 50       	subi	r22, 0x01	; 1
 a06:	70 40       	sbci	r23, 0x00	; 0
 a08:	01 90       	ld	r0, Z+
 a0a:	01 10       	cpse	r0, r1
 a0c:	d8 f7       	brcc	.-10     	; 0xa04 <strnlen+0x2>
 a0e:	80 95       	com	r24
 a10:	90 95       	com	r25
 a12:	8e 0f       	add	r24, r30
 a14:	9f 1f       	adc	r25, r31
 a16:	08 95       	ret

00000a18 <fputc>:
 a18:	0f 93       	push	r16
 a1a:	1f 93       	push	r17
 a1c:	cf 93       	push	r28
 a1e:	df 93       	push	r29
 a20:	18 2f       	mov	r17, r24
 a22:	09 2f       	mov	r16, r25
 a24:	eb 01       	movw	r28, r22
 a26:	8b 81       	ldd	r24, Y+3	; 0x03
 a28:	81 fd       	sbrc	r24, 1
 a2a:	03 c0       	rjmp	.+6      	; 0xa32 <fputc+0x1a>
 a2c:	8f ef       	ldi	r24, 0xFF	; 255
 a2e:	9f ef       	ldi	r25, 0xFF	; 255
 a30:	20 c0       	rjmp	.+64     	; 0xa72 <fputc+0x5a>
 a32:	82 ff       	sbrs	r24, 2
 a34:	10 c0       	rjmp	.+32     	; 0xa56 <fputc+0x3e>
 a36:	4e 81       	ldd	r20, Y+6	; 0x06
 a38:	5f 81       	ldd	r21, Y+7	; 0x07
 a3a:	2c 81       	ldd	r18, Y+4	; 0x04
 a3c:	3d 81       	ldd	r19, Y+5	; 0x05
 a3e:	42 17       	cp	r20, r18
 a40:	53 07       	cpc	r21, r19
 a42:	7c f4       	brge	.+30     	; 0xa62 <fputc+0x4a>
 a44:	e8 81       	ld	r30, Y
 a46:	f9 81       	ldd	r31, Y+1	; 0x01
 a48:	9f 01       	movw	r18, r30
 a4a:	2f 5f       	subi	r18, 0xFF	; 255
 a4c:	3f 4f       	sbci	r19, 0xFF	; 255
 a4e:	39 83       	std	Y+1, r19	; 0x01
 a50:	28 83       	st	Y, r18
 a52:	10 83       	st	Z, r17
 a54:	06 c0       	rjmp	.+12     	; 0xa62 <fputc+0x4a>
 a56:	e8 85       	ldd	r30, Y+8	; 0x08
 a58:	f9 85       	ldd	r31, Y+9	; 0x09
 a5a:	81 2f       	mov	r24, r17
 a5c:	09 95       	icall
 a5e:	89 2b       	or	r24, r25
 a60:	29 f7       	brne	.-54     	; 0xa2c <fputc+0x14>
 a62:	2e 81       	ldd	r18, Y+6	; 0x06
 a64:	3f 81       	ldd	r19, Y+7	; 0x07
 a66:	2f 5f       	subi	r18, 0xFF	; 255
 a68:	3f 4f       	sbci	r19, 0xFF	; 255
 a6a:	3f 83       	std	Y+7, r19	; 0x07
 a6c:	2e 83       	std	Y+6, r18	; 0x06
 a6e:	81 2f       	mov	r24, r17
 a70:	90 2f       	mov	r25, r16
 a72:	df 91       	pop	r29
 a74:	cf 91       	pop	r28
 a76:	1f 91       	pop	r17
 a78:	0f 91       	pop	r16
 a7a:	08 95       	ret

00000a7c <__ultoa_invert>:
 a7c:	fa 01       	movw	r30, r20
 a7e:	aa 27       	eor	r26, r26
 a80:	28 30       	cpi	r18, 0x08	; 8
 a82:	51 f1       	breq	.+84     	; 0xad8 <__ultoa_invert+0x5c>
 a84:	20 31       	cpi	r18, 0x10	; 16
 a86:	81 f1       	breq	.+96     	; 0xae8 <__ultoa_invert+0x6c>
 a88:	e8 94       	clt
 a8a:	6f 93       	push	r22
 a8c:	6e 7f       	andi	r22, 0xFE	; 254
 a8e:	6e 5f       	subi	r22, 0xFE	; 254
 a90:	7f 4f       	sbci	r23, 0xFF	; 255
 a92:	8f 4f       	sbci	r24, 0xFF	; 255
 a94:	9f 4f       	sbci	r25, 0xFF	; 255
 a96:	af 4f       	sbci	r26, 0xFF	; 255
 a98:	b1 e0       	ldi	r27, 0x01	; 1
 a9a:	3e d0       	rcall	.+124    	; 0xb18 <__ultoa_invert+0x9c>
 a9c:	b4 e0       	ldi	r27, 0x04	; 4
 a9e:	3c d0       	rcall	.+120    	; 0xb18 <__ultoa_invert+0x9c>
 aa0:	67 0f       	add	r22, r23
 aa2:	78 1f       	adc	r23, r24
 aa4:	89 1f       	adc	r24, r25
 aa6:	9a 1f       	adc	r25, r26
 aa8:	a1 1d       	adc	r26, r1
 aaa:	68 0f       	add	r22, r24
 aac:	79 1f       	adc	r23, r25
 aae:	8a 1f       	adc	r24, r26
 ab0:	91 1d       	adc	r25, r1
 ab2:	a1 1d       	adc	r26, r1
 ab4:	6a 0f       	add	r22, r26
 ab6:	71 1d       	adc	r23, r1
 ab8:	81 1d       	adc	r24, r1
 aba:	91 1d       	adc	r25, r1
 abc:	a1 1d       	adc	r26, r1
 abe:	20 d0       	rcall	.+64     	; 0xb00 <__ultoa_invert+0x84>
 ac0:	09 f4       	brne	.+2      	; 0xac4 <__ultoa_invert+0x48>
 ac2:	68 94       	set
 ac4:	3f 91       	pop	r19
 ac6:	2a e0       	ldi	r18, 0x0A	; 10
 ac8:	26 9f       	mul	r18, r22
 aca:	11 24       	eor	r1, r1
 acc:	30 19       	sub	r19, r0
 ace:	30 5d       	subi	r19, 0xD0	; 208
 ad0:	31 93       	st	Z+, r19
 ad2:	de f6       	brtc	.-74     	; 0xa8a <__ultoa_invert+0xe>
 ad4:	cf 01       	movw	r24, r30
 ad6:	08 95       	ret
 ad8:	46 2f       	mov	r20, r22
 ada:	47 70       	andi	r20, 0x07	; 7
 adc:	40 5d       	subi	r20, 0xD0	; 208
 ade:	41 93       	st	Z+, r20
 ae0:	b3 e0       	ldi	r27, 0x03	; 3
 ae2:	0f d0       	rcall	.+30     	; 0xb02 <__ultoa_invert+0x86>
 ae4:	c9 f7       	brne	.-14     	; 0xad8 <__ultoa_invert+0x5c>
 ae6:	f6 cf       	rjmp	.-20     	; 0xad4 <__ultoa_invert+0x58>
 ae8:	46 2f       	mov	r20, r22
 aea:	4f 70       	andi	r20, 0x0F	; 15
 aec:	40 5d       	subi	r20, 0xD0	; 208
 aee:	4a 33       	cpi	r20, 0x3A	; 58
 af0:	18 f0       	brcs	.+6      	; 0xaf8 <__ultoa_invert+0x7c>
 af2:	49 5d       	subi	r20, 0xD9	; 217
 af4:	31 fd       	sbrc	r19, 1
 af6:	40 52       	subi	r20, 0x20	; 32
 af8:	41 93       	st	Z+, r20
 afa:	02 d0       	rcall	.+4      	; 0xb00 <__ultoa_invert+0x84>
 afc:	a9 f7       	brne	.-22     	; 0xae8 <__ultoa_invert+0x6c>
 afe:	ea cf       	rjmp	.-44     	; 0xad4 <__ultoa_invert+0x58>
 b00:	b4 e0       	ldi	r27, 0x04	; 4
 b02:	a6 95       	lsr	r26
 b04:	97 95       	ror	r25
 b06:	87 95       	ror	r24
 b08:	77 95       	ror	r23
 b0a:	67 95       	ror	r22
 b0c:	ba 95       	dec	r27
 b0e:	c9 f7       	brne	.-14     	; 0xb02 <__ultoa_invert+0x86>
 b10:	00 97       	sbiw	r24, 0x00	; 0
 b12:	61 05       	cpc	r22, r1
 b14:	71 05       	cpc	r23, r1
 b16:	08 95       	ret
 b18:	9b 01       	movw	r18, r22
 b1a:	ac 01       	movw	r20, r24
 b1c:	0a 2e       	mov	r0, r26
 b1e:	06 94       	lsr	r0
 b20:	57 95       	ror	r21
 b22:	47 95       	ror	r20
 b24:	37 95       	ror	r19
 b26:	27 95       	ror	r18
 b28:	ba 95       	dec	r27
 b2a:	c9 f7       	brne	.-14     	; 0xb1e <__ultoa_invert+0xa2>
 b2c:	62 0f       	add	r22, r18
 b2e:	73 1f       	adc	r23, r19
 b30:	84 1f       	adc	r24, r20
 b32:	95 1f       	adc	r25, r21
 b34:	a0 1d       	adc	r26, r0
 b36:	08 95       	ret

00000b38 <__prologue_saves__>:
 b38:	2f 92       	push	r2
 b3a:	3f 92       	push	r3
 b3c:	4f 92       	push	r4
 b3e:	5f 92       	push	r5
 b40:	6f 92       	push	r6
 b42:	7f 92       	push	r7
 b44:	8f 92       	push	r8
 b46:	9f 92       	push	r9
 b48:	af 92       	push	r10
 b4a:	bf 92       	push	r11
 b4c:	cf 92       	push	r12
 b4e:	df 92       	push	r13
 b50:	ef 92       	push	r14
 b52:	ff 92       	push	r15
 b54:	0f 93       	push	r16
 b56:	1f 93       	push	r17
 b58:	cf 93       	push	r28
 b5a:	df 93       	push	r29
 b5c:	cd b7       	in	r28, 0x3d	; 61
 b5e:	de b7       	in	r29, 0x3e	; 62
 b60:	ca 1b       	sub	r28, r26
 b62:	db 0b       	sbc	r29, r27
 b64:	0f b6       	in	r0, 0x3f	; 63
 b66:	f8 94       	cli
 b68:	de bf       	out	0x3e, r29	; 62
 b6a:	0f be       	out	0x3f, r0	; 63
 b6c:	cd bf       	out	0x3d, r28	; 61
 b6e:	09 94       	ijmp

00000b70 <__epilogue_restores__>:
 b70:	2a 88       	ldd	r2, Y+18	; 0x12
 b72:	39 88       	ldd	r3, Y+17	; 0x11
 b74:	48 88       	ldd	r4, Y+16	; 0x10
 b76:	5f 84       	ldd	r5, Y+15	; 0x0f
 b78:	6e 84       	ldd	r6, Y+14	; 0x0e
 b7a:	7d 84       	ldd	r7, Y+13	; 0x0d
 b7c:	8c 84       	ldd	r8, Y+12	; 0x0c
 b7e:	9b 84       	ldd	r9, Y+11	; 0x0b
 b80:	aa 84       	ldd	r10, Y+10	; 0x0a
 b82:	b9 84       	ldd	r11, Y+9	; 0x09
 b84:	c8 84       	ldd	r12, Y+8	; 0x08
 b86:	df 80       	ldd	r13, Y+7	; 0x07
 b88:	ee 80       	ldd	r14, Y+6	; 0x06
 b8a:	fd 80       	ldd	r15, Y+5	; 0x05
 b8c:	0c 81       	ldd	r16, Y+4	; 0x04
 b8e:	1b 81       	ldd	r17, Y+3	; 0x03
 b90:	aa 81       	ldd	r26, Y+2	; 0x02
 b92:	b9 81       	ldd	r27, Y+1	; 0x01
 b94:	ce 0f       	add	r28, r30
 b96:	d1 1d       	adc	r29, r1
 b98:	0f b6       	in	r0, 0x3f	; 63
 b9a:	f8 94       	cli
 b9c:	de bf       	out	0x3e, r29	; 62
 b9e:	0f be       	out	0x3f, r0	; 63
 ba0:	cd bf       	out	0x3d, r28	; 61
 ba2:	ed 01       	movw	r28, r26
 ba4:	08 95       	ret

00000ba6 <_exit>:
 ba6:	f8 94       	cli

00000ba8 <__stop_program>:
 ba8:	ff cf       	rjmp	.-2      	; 0xba8 <__stop_program>
