
node1.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .data         00000148  00800100  00001106  0000119a  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  1 .text         00001106  00000000  00000000  00000094  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .bss          00000008  00800248  00800248  000012e2  2**0
                  ALLOC
  3 .comment      0000005c  00000000  00000000  000012e2  2**0
                  CONTENTS, READONLY
  4 .debug_aranges 000001d8  00000000  00000000  0000133e  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_info   000017e3  00000000  00000000  00001516  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_abbrev 00000b80  00000000  00000000  00002cf9  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_line   000009ef  00000000  00000000  00003879  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_frame  00000458  00000000  00000000  00004268  2**2
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_str    000004f6  00000000  00000000  000046c0  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_loc    00000ae6  00000000  00000000  00004bb6  2**0
                  CONTENTS, READONLY, DEBUGGING
 11 .debug_ranges 00000148  00000000  00000000  0000569c  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
       4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
       c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
      6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
      70:	11 24       	eor	r1, r1
      72:	1f be       	out	0x3f, r1	; 63
      74:	cf ef       	ldi	r28, 0xFF	; 255
      76:	d4 e0       	ldi	r29, 0x04	; 4
      78:	de bf       	out	0x3e, r29	; 62
      7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
      7c:	12 e0       	ldi	r17, 0x02	; 2
      7e:	a0 e0       	ldi	r26, 0x00	; 0
      80:	b1 e0       	ldi	r27, 0x01	; 1
      82:	e6 e0       	ldi	r30, 0x06	; 6
      84:	f1 e1       	ldi	r31, 0x11	; 17
      86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
      88:	05 90       	lpm	r0, Z+
      8a:	0d 92       	st	X+, r0
      8c:	a8 34       	cpi	r26, 0x48	; 72
      8e:	b1 07       	cpc	r27, r17
      90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
      92:	22 e0       	ldi	r18, 0x02	; 2
      94:	a8 e4       	ldi	r26, 0x48	; 72
      96:	b2 e0       	ldi	r27, 0x02	; 2
      98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
      9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
      9c:	a0 35       	cpi	r26, 0x50	; 80
      9e:	b2 07       	cpc	r27, r18
      a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
      a2:	0e 94 7e 02 	call	0x4fc	; 0x4fc <main>
      a6:	0c 94 81 08 	jmp	0x1102	; 0x1102 <_exit>

000000aa <__bad_interrupt>:
      aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <adc_init>:
#include "setup.h"
#include <util/delay.h>
#include "adc.h"

void adc_init(void) {
	MCUCR |= (1<<SRE);
      ae:	85 b7       	in	r24, 0x35	; 53
      b0:	80 68       	ori	r24, 0x80	; 128
      b2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
      b4:	80 b7       	in	r24, 0x30	; 48
      b6:	80 62       	ori	r24, 0x20	; 32
      b8:	80 bf       	out	0x30, r24	; 48
	DDRE &= ~(1<<PINE0);    //Enable interrupt pin
      ba:	30 98       	cbi	0x06, 0	; 6
      bc:	08 95       	ret

000000be <adc_read>:
}

uint8_t adc_read(adc_channel channel) {
	volatile char *adc = (char *) 0x1400;

	*adc = 0x04 | channel;
      be:	84 60       	ori	r24, 0x04	; 4
      c0:	80 93 00 14 	sts	0x1400, r24
	wait_until_bit_is_clear(PINE,PINE0);
      c4:	28 99       	sbic	0x05, 0	; 5
      c6:	fe cf       	rjmp	.-4      	; 0xc4 <adc_read+0x6>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
      c8:	84 ea       	ldi	r24, 0xA4	; 164
      ca:	8a 95       	dec	r24
      cc:	f1 f7       	brne	.-4      	; 0xca <adc_read+0xc>
	_delay_us(100);
	return *adc;
      ce:	80 91 00 14 	lds	r24, 0x1400
}
      d2:	08 95       	ret

000000d4 <can_set_mode>:
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);
	//can_set_mode(MODE_NORMAL);
	return EXIT_SUCCESS;
}

int can_set_mode(char mode) {
      d4:	cf 93       	push	r28
      d6:	c8 2f       	mov	r28, r24
	mcp2515_bit_modify(MCP_CANCTRL,MODE_MASK,mode);
      d8:	48 2f       	mov	r20, r24
      da:	60 ee       	ldi	r22, 0xE0	; 224
      dc:	8f e0       	ldi	r24, 0x0F	; 15
      de:	0e 94 64 02 	call	0x4c8	; 0x4c8 <mcp2515_bit_modify>
	char new_mode = mcp2515_read(MCP_CANSTAT);
      e2:	8e e0       	ldi	r24, 0x0E	; 14
      e4:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
	new_mode = new_mode & MODE_MASK;
      e8:	80 7e       	andi	r24, 0xE0	; 224
	if(new_mode != mode) {
      ea:	21 e0       	ldi	r18, 0x01	; 1
      ec:	30 e0       	ldi	r19, 0x00	; 0
      ee:	c8 13       	cpse	r28, r24
      f0:	02 c0       	rjmp	.+4      	; 0xf6 <can_set_mode+0x22>
      f2:	20 e0       	ldi	r18, 0x00	; 0
      f4:	30 e0       	ldi	r19, 0x00	; 0
		return EXIT_FAILURE;
	} else{
		return EXIT_SUCCESS;
	}
}
      f6:	c9 01       	movw	r24, r18
      f8:	cf 91       	pop	r28
      fa:	08 95       	ret

000000fc <can_init>:
#include "can.h"

int can_init(void) {
      fc:	cf 93       	push	r28
      fe:	df 93       	push	r29
	clear_bit(DDRD,PIND2);    //Enable new message interrupt pin
     100:	8a 98       	cbi	0x11, 2	; 17
	
	mcp2515_init();
     102:	0e 94 2e 02 	call	0x45c	; 0x45c <mcp2515_init>
	if (can_set_mode(MODE_CONFIG) != 0) {
     106:	80 e8       	ldi	r24, 0x80	; 128
     108:	0e 94 6a 00 	call	0xd4	; 0xd4 <can_set_mode>
     10c:	ec 01       	movw	r28, r24
     10e:	00 97       	sbiw	r24, 0x00	; 0
     110:	39 f0       	breq	.+14     	; 0x120 <can_init+0x24>
		printf("MCP2515 reset failed! \n");
     112:	8e e0       	ldi	r24, 0x0E	; 14
     114:	91 e0       	ldi	r25, 0x01	; 1
     116:	0e 94 a5 05 	call	0xb4a	; 0xb4a <puts>
		return EXIT_FAILURE;
     11a:	c1 e0       	ldi	r28, 0x01	; 1
     11c:	d0 e0       	ldi	r29, 0x00	; 0
     11e:	0d c0       	rjmp	.+26     	; 0x13a <can_init+0x3e>
	}
	can_set_mode(MODE_NORMAL);
     120:	80 e0       	ldi	r24, 0x00	; 0
     122:	0e 94 6a 00 	call	0xd4	; 0xd4 <can_set_mode>
	
	mcp2515_bit_modify(MCP_RXB0CTRL, 0b01100100, 0xFF);
     126:	4f ef       	ldi	r20, 0xFF	; 255
     128:	64 e6       	ldi	r22, 0x64	; 100
     12a:	80 e6       	ldi	r24, 0x60	; 96
     12c:	0e 94 64 02 	call	0x4c8	; 0x4c8 <mcp2515_bit_modify>
	mcp2515_bit_modify(MCP_CANINTE, 0x01, 1);
     130:	41 e0       	ldi	r20, 0x01	; 1
     132:	61 e0       	ldi	r22, 0x01	; 1
     134:	8b e2       	ldi	r24, 0x2B	; 43
     136:	0e 94 64 02 	call	0x4c8	; 0x4c8 <mcp2515_bit_modify>
	//can_set_mode(MODE_NORMAL);
	return EXIT_SUCCESS;
}
     13a:	ce 01       	movw	r24, r28
     13c:	df 91       	pop	r29
     13e:	cf 91       	pop	r28
     140:	08 95       	ret

00000142 <can_send>:
	} else{
		return EXIT_SUCCESS;
	}
}

void can_send(can_message message) {
     142:	cf 92       	push	r12
     144:	df 92       	push	r13
     146:	ef 92       	push	r14
     148:	ff 92       	push	r15
     14a:	0f 93       	push	r16
     14c:	1f 93       	push	r17
     14e:	cf 93       	push	r28
     150:	df 93       	push	r29
     152:	cd b7       	in	r28, 0x3d	; 61
     154:	de b7       	in	r29, 0x3e	; 62
     156:	2a 97       	sbiw	r28, 0x0a	; 10
     158:	0f b6       	in	r0, 0x3f	; 63
     15a:	f8 94       	cli
     15c:	de bf       	out	0x3e, r29	; 62
     15e:	0f be       	out	0x3f, r0	; 63
     160:	cd bf       	out	0x3d, r28	; 61
     162:	09 83       	std	Y+1, r16	; 0x01
     164:	c1 2e       	mov	r12, r17
     166:	1a 83       	std	Y+2, r17	; 0x02
     168:	2b 83       	std	Y+3, r18	; 0x03
     16a:	3c 83       	std	Y+4, r19	; 0x04
     16c:	4d 83       	std	Y+5, r20	; 0x05
     16e:	5e 83       	std	Y+6, r21	; 0x06
     170:	6f 83       	std	Y+7, r22	; 0x07
     172:	78 87       	std	Y+8, r23	; 0x08
     174:	89 87       	std	Y+9, r24	; 0x09
     176:	9a 87       	std	Y+10, r25	; 0x0a
	wait_until_bit_is_clear(mcp2515_read(MCP_TXB0CTRL),3);
     178:	80 e3       	ldi	r24, 0x30	; 48
     17a:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
     17e:	83 fd       	sbrc	r24, 3
     180:	fb cf       	rjmp	.-10     	; 0x178 <can_send+0x36>
	
	mcp2515_write(MCP_TXB0SIDH,(uint8_t) (message.id >> 3));
     182:	60 2f       	mov	r22, r16
     184:	66 95       	lsr	r22
     186:	66 95       	lsr	r22
     188:	66 95       	lsr	r22
     18a:	81 e3       	ldi	r24, 0x31	; 49
     18c:	0e 94 45 02 	call	0x48a	; 0x48a <mcp2515_write>
	mcp2515_write(MCP_TXB0SIDL,(uint8_t) (message.id << 5));
     190:	60 2f       	mov	r22, r16
     192:	62 95       	swap	r22
     194:	66 0f       	add	r22, r22
     196:	60 7e       	andi	r22, 0xE0	; 224
     198:	82 e3       	ldi	r24, 0x32	; 50
     19a:	0e 94 45 02 	call	0x48a	; 0x48a <mcp2515_write>
	mcp2515_write(MCP_TXB0DLC,(uint8_t) (message.length));
     19e:	6c 2d       	mov	r22, r12
     1a0:	85 e3       	ldi	r24, 0x35	; 53
     1a2:	0e 94 45 02 	call	0x48a	; 0x48a <mcp2515_write>
	for (int i = 0; i < message.length; i++) {
     1a6:	d1 2c       	mov	r13, r1
     1a8:	1c 14       	cp	r1, r12
     1aa:	1d 04       	cpc	r1, r13
     1ac:	94 f4       	brge	.+36     	; 0x1d2 <can_send+0x90>
     1ae:	7e 01       	movw	r14, r28
     1b0:	83 e0       	ldi	r24, 0x03	; 3
     1b2:	e8 0e       	add	r14, r24
     1b4:	f1 1c       	adc	r15, r1
     1b6:	00 e0       	ldi	r16, 0x00	; 0
     1b8:	10 e0       	ldi	r17, 0x00	; 0
		mcp2515_write(MCP_TXB0D0 + i, (signed char) message.data[i]);
     1ba:	f7 01       	movw	r30, r14
     1bc:	61 91       	ld	r22, Z+
     1be:	7f 01       	movw	r14, r30
     1c0:	86 e3       	ldi	r24, 0x36	; 54
     1c2:	80 0f       	add	r24, r16
     1c4:	0e 94 45 02 	call	0x48a	; 0x48a <mcp2515_write>
	wait_until_bit_is_clear(mcp2515_read(MCP_TXB0CTRL),3);
	
	mcp2515_write(MCP_TXB0SIDH,(uint8_t) (message.id >> 3));
	mcp2515_write(MCP_TXB0SIDL,(uint8_t) (message.id << 5));
	mcp2515_write(MCP_TXB0DLC,(uint8_t) (message.length));
	for (int i = 0; i < message.length; i++) {
     1c8:	0f 5f       	subi	r16, 0xFF	; 255
     1ca:	1f 4f       	sbci	r17, 0xFF	; 255
     1cc:	0c 15       	cp	r16, r12
     1ce:	1d 05       	cpc	r17, r13
     1d0:	a4 f3       	brlt	.-24     	; 0x1ba <can_send+0x78>
		mcp2515_write(MCP_TXB0D0 + i, (signed char) message.data[i]);
	}
	
	mcp2515_req_to_send(MCP_RTS_TX0);	
     1d2:	81 e8       	ldi	r24, 0x81	; 129
     1d4:	0e 94 59 02 	call	0x4b2	; 0x4b2 <mcp2515_req_to_send>
}
     1d8:	2a 96       	adiw	r28, 0x0a	; 10
     1da:	0f b6       	in	r0, 0x3f	; 63
     1dc:	f8 94       	cli
     1de:	de bf       	out	0x3e, r29	; 62
     1e0:	0f be       	out	0x3f, r0	; 63
     1e2:	cd bf       	out	0x3d, r28	; 61
     1e4:	df 91       	pop	r29
     1e6:	cf 91       	pop	r28
     1e8:	1f 91       	pop	r17
     1ea:	0f 91       	pop	r16
     1ec:	ff 90       	pop	r15
     1ee:	ef 90       	pop	r14
     1f0:	df 90       	pop	r13
     1f2:	cf 90       	pop	r12
     1f4:	08 95       	ret

000001f6 <can_recieve>:

can_message can_recieve(void) {
     1f6:	9f 92       	push	r9
     1f8:	af 92       	push	r10
     1fa:	bf 92       	push	r11
     1fc:	cf 92       	push	r12
     1fe:	df 92       	push	r13
     200:	ef 92       	push	r14
     202:	ff 92       	push	r15
     204:	0f 93       	push	r16
     206:	1f 93       	push	r17
     208:	cf 93       	push	r28
     20a:	df 93       	push	r29
     20c:	cd b7       	in	r28, 0x3d	; 61
     20e:	de b7       	in	r29, 0x3e	; 62
     210:	2a 97       	sbiw	r28, 0x0a	; 10
     212:	0f b6       	in	r0, 0x3f	; 63
     214:	f8 94       	cli
     216:	de bf       	out	0x3e, r29	; 62
     218:	0f be       	out	0x3f, r0	; 63
     21a:	cd bf       	out	0x3d, r28	; 61
     21c:	6c 01       	movw	r12, r24
	wait_until_bit_is_clear(PIND,PIND2);
     21e:	82 99       	sbic	0x10, 2	; 16
     220:	fe cf       	rjmp	.-4      	; 0x21e <can_recieve+0x28>
	//printf("hello \n");
	
	can_message message;
	if (test_bit(mcp2515_read(MCP_CANINTF),MCP_RX0IF)) {
     222:	8c e2       	ldi	r24, 0x2C	; 44
     224:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
     228:	81 ff       	sbrs	r24, 1
     22a:	2f c0       	rjmp	.+94     	; 0x28a <can_recieve+0x94>
		message.id = (uint8_t) (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
     22c:	81 e6       	ldi	r24, 0x61	; 97
     22e:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
     232:	18 2f       	mov	r17, r24
     234:	82 e6       	ldi	r24, 0x62	; 98
     236:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
     23a:	82 95       	swap	r24
     23c:	86 95       	lsr	r24
     23e:	87 70       	andi	r24, 0x07	; 7
     240:	11 0f       	add	r17, r17
     242:	11 0f       	add	r17, r17
     244:	11 0f       	add	r17, r17
     246:	98 2e       	mov	r9, r24
     248:	91 2a       	or	r9, r17
		message.length = (uint8_t) mcp2515_read(MCP_RXB0DLC) & (0x0f);
     24a:	85 e6       	ldi	r24, 0x65	; 101
     24c:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
     250:	8f 70       	andi	r24, 0x0F	; 15
     252:	a8 2e       	mov	r10, r24
		//printf("ID: %d \n", message.id);
		for (int i = 0; i < message.length; i++) {
     254:	a1 f0       	breq	.+40     	; 0x27e <can_recieve+0x88>
     256:	8e 01       	movw	r16, r28
     258:	0d 5f       	subi	r16, 0xFD	; 253
     25a:	1f 4f       	sbci	r17, 0xFF	; 255
     25c:	78 01       	movw	r14, r16
     25e:	e8 0e       	add	r14, r24
     260:	f1 1c       	adc	r15, r1
     262:	0f 2e       	mov	r0, r31
     264:	f6 e6       	ldi	r31, 0x66	; 102
     266:	bf 2e       	mov	r11, r31
     268:	f0 2d       	mov	r31, r0
			message.data[i] = (signed char) mcp2515_read(MCP_RXB0D0 + i);
     26a:	8b 2d       	mov	r24, r11
     26c:	0e 94 33 02 	call	0x466	; 0x466 <mcp2515_read>
     270:	f8 01       	movw	r30, r16
     272:	81 93       	st	Z+, r24
     274:	8f 01       	movw	r16, r30
     276:	b3 94       	inc	r11
	can_message message;
	if (test_bit(mcp2515_read(MCP_CANINTF),MCP_RX0IF)) {
		message.id = (uint8_t) (mcp2515_read(MCP_RXB0SIDH) << 3) | (mcp2515_read(MCP_RXB0SIDL) >> 5);
		message.length = (uint8_t) mcp2515_read(MCP_RXB0DLC) & (0x0f);
		//printf("ID: %d \n", message.id);
		for (int i = 0; i < message.length; i++) {
     278:	ee 15       	cp	r30, r14
     27a:	ff 05       	cpc	r31, r15
     27c:	b1 f7       	brne	.-20     	; 0x26a <can_recieve+0x74>
			message.data[i] = (signed char) mcp2515_read(MCP_RXB0D0 + i);
		}
		//printf("Data: %d",message.data[0]);
		mcp2515_bit_modify(MCP_CANINTF,0x01,0);
     27e:	40 e0       	ldi	r20, 0x00	; 0
     280:	61 e0       	ldi	r22, 0x01	; 1
     282:	8c e2       	ldi	r24, 0x2C	; 44
     284:	0e 94 64 02 	call	0x4c8	; 0x4c8 <mcp2515_bit_modify>
     288:	02 c0       	rjmp	.+4      	; 0x28e <can_recieve+0x98>
	} else {
		message.id = -1;
     28a:	99 24       	eor	r9, r9
     28c:	9a 94       	dec	r9
	}
	return message;	
     28e:	99 82       	std	Y+1, r9	; 0x01
     290:	aa 82       	std	Y+2, r10	; 0x02
     292:	8a e0       	ldi	r24, 0x0A	; 10
     294:	fe 01       	movw	r30, r28
     296:	31 96       	adiw	r30, 0x01	; 1
     298:	d6 01       	movw	r26, r12
     29a:	01 90       	ld	r0, Z+
     29c:	0d 92       	st	X+, r0
     29e:	8a 95       	dec	r24
     2a0:	e1 f7       	brne	.-8      	; 0x29a <can_recieve+0xa4>
     2a2:	c6 01       	movw	r24, r12
     2a4:	2a 96       	adiw	r28, 0x0a	; 10
     2a6:	0f b6       	in	r0, 0x3f	; 63
     2a8:	f8 94       	cli
     2aa:	de bf       	out	0x3e, r29	; 62
     2ac:	0f be       	out	0x3f, r0	; 63
     2ae:	cd bf       	out	0x3d, r28	; 61
     2b0:	df 91       	pop	r29
     2b2:	cf 91       	pop	r28
     2b4:	1f 91       	pop	r17
     2b6:	0f 91       	pop	r16
     2b8:	ff 90       	pop	r15
     2ba:	ef 90       	pop	r14
     2bc:	df 90       	pop	r13
     2be:	cf 90       	pop	r12
     2c0:	bf 90       	pop	r11
     2c2:	af 90       	pop	r10
     2c4:	9f 90       	pop	r9
     2c6:	08 95       	ret

000002c8 <start_game>:
#include "game.h"

void start_game(void) {
     2c8:	0f 93       	push	r16
     2ca:	1f 93       	push	r17
     2cc:	cf 93       	push	r28
     2ce:	df 93       	push	r29
     2d0:	cd b7       	in	r28, 0x3d	; 61
     2d2:	de b7       	in	r29, 0x3e	; 62
     2d4:	2a 97       	sbiw	r28, 0x0a	; 10
     2d6:	0f b6       	in	r0, 0x3f	; 63
     2d8:	f8 94       	cli
     2da:	de bf       	out	0x3e, r29	; 62
     2dc:	0f be       	out	0x3f, r0	; 63
     2de:	cd bf       	out	0x3d, r28	; 61
    joy_calibrate();
     2e0:	0e 94 b4 01 	call	0x368	; 0x368 <joy_calibrate>
    can_message msg;
    msg.id = NEW_GAME;
    msg.length = 0;
    can_send(msg);
     2e4:	00 e0       	ldi	r16, 0x00	; 0
     2e6:	10 e0       	ldi	r17, 0x00	; 0
     2e8:	2b 81       	ldd	r18, Y+3	; 0x03
     2ea:	3c 81       	ldd	r19, Y+4	; 0x04
     2ec:	4d 81       	ldd	r20, Y+5	; 0x05
     2ee:	5e 81       	ldd	r21, Y+6	; 0x06
     2f0:	6f 81       	ldd	r22, Y+7	; 0x07
     2f2:	78 85       	ldd	r23, Y+8	; 0x08
     2f4:	89 85       	ldd	r24, Y+9	; 0x09
     2f6:	9a 85       	ldd	r25, Y+10	; 0x0a
     2f8:	0e 94 a1 00 	call	0x142	; 0x142 <can_send>
}
     2fc:	2a 96       	adiw	r28, 0x0a	; 10
     2fe:	0f b6       	in	r0, 0x3f	; 63
     300:	f8 94       	cli
     302:	de bf       	out	0x3e, r29	; 62
     304:	0f be       	out	0x3f, r0	; 63
     306:	cd bf       	out	0x3d, r28	; 61
     308:	df 91       	pop	r29
     30a:	cf 91       	pop	r28
     30c:	1f 91       	pop	r17
     30e:	0f 91       	pop	r16
     310:	08 95       	ret

00000312 <send_game_ctrls>:
    
void send_game_ctrls(void) {
     312:	0f 93       	push	r16
     314:	1f 93       	push	r17
     316:	cf 93       	push	r28
     318:	df 93       	push	r29
     31a:	cd b7       	in	r28, 0x3d	; 61
     31c:	de b7       	in	r29, 0x3e	; 62
     31e:	2a 97       	sbiw	r28, 0x0a	; 10
     320:	0f b6       	in	r0, 0x3f	; 63
     322:	f8 94       	cli
     324:	de bf       	out	0x3e, r29	; 62
     326:	0f be       	out	0x3f, r0	; 63
     328:	cd bf       	out	0x3d, r28	; 61
	joystick_position pos = get_joy_position();
     32a:	0e 94 bf 01 	call	0x37e	; 0x37e <get_joy_position>
	can_message msg;
    msg.id = GAME_CTRLS;
     32e:	93 e0       	ldi	r25, 0x03	; 3
     330:	99 83       	std	Y+1, r25	; 0x01
    msg.data[0] = (signed char) pos.x_pos;
     332:	6b 83       	std	Y+3, r22	; 0x03
    msg.data[1] = (signed char) pos.y_pos;
     334:	8c 83       	std	Y+4, r24	; 0x04
	msg.data[2] = (signed char) get_slider_position();
     336:	0e 94 22 02 	call	0x444	; 0x444 <get_slider_position>
	//msg.data[1] = (signed char) get_button_state();
    msg.length = 3;
    can_send(msg);
     33a:	09 81       	ldd	r16, Y+1	; 0x01
     33c:	13 e0       	ldi	r17, 0x03	; 3
     33e:	2b 81       	ldd	r18, Y+3	; 0x03
     340:	3c 81       	ldd	r19, Y+4	; 0x04
     342:	48 2f       	mov	r20, r24
     344:	5e 81       	ldd	r21, Y+6	; 0x06
     346:	6f 81       	ldd	r22, Y+7	; 0x07
     348:	78 85       	ldd	r23, Y+8	; 0x08
     34a:	89 85       	ldd	r24, Y+9	; 0x09
     34c:	9a 85       	ldd	r25, Y+10	; 0x0a
     34e:	0e 94 a1 00 	call	0x142	; 0x142 <can_send>
}
     352:	2a 96       	adiw	r28, 0x0a	; 10
     354:	0f b6       	in	r0, 0x3f	; 63
     356:	f8 94       	cli
     358:	de bf       	out	0x3e, r29	; 62
     35a:	0f be       	out	0x3f, r0	; 63
     35c:	cd bf       	out	0x3d, r28	; 61
     35e:	df 91       	pop	r29
     360:	cf 91       	pop	r28
     362:	1f 91       	pop	r17
     364:	0f 91       	pop	r16
     366:	08 95       	ret

00000368 <joy_calibrate>:
	//clear_bit(DDRD,DDD4);
    adc_init();
}

void joy_calibrate(void) {
    zero_x = adc_read(JOY_X);
     368:	80 e0       	ldi	r24, 0x00	; 0
     36a:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
     36e:	80 93 49 02 	sts	0x0249, r24
    zero_y = adc_read(JOY_Y);
     372:	81 e0       	ldi	r24, 0x01	; 1
     374:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
     378:	80 93 48 02 	sts	0x0248, r24
     37c:	08 95       	ret

0000037e <get_joy_position>:
}

joystick_position get_joy_position(void) {
     37e:	8f 92       	push	r8
     380:	9f 92       	push	r9
     382:	af 92       	push	r10
     384:	bf 92       	push	r11
     386:	cf 92       	push	r12
     388:	df 92       	push	r13
     38a:	ef 92       	push	r14
     38c:	ff 92       	push	r15
    joystick_position pos;
    pos.x_pos = (int16_t) 100*(((double) adc_read(JOY_X) - (double) zero_x)/129);
     38e:	80 e0       	ldi	r24, 0x00	; 0
     390:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
     394:	68 2f       	mov	r22, r24
     396:	70 e0       	ldi	r23, 0x00	; 0
     398:	80 e0       	ldi	r24, 0x00	; 0
     39a:	90 e0       	ldi	r25, 0x00	; 0
     39c:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
     3a0:	6b 01       	movw	r12, r22
     3a2:	7c 01       	movw	r14, r24
     3a4:	60 91 49 02 	lds	r22, 0x0249
     3a8:	70 e0       	ldi	r23, 0x00	; 0
     3aa:	80 e0       	ldi	r24, 0x00	; 0
     3ac:	90 e0       	ldi	r25, 0x00	; 0
     3ae:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
     3b2:	9b 01       	movw	r18, r22
     3b4:	ac 01       	movw	r20, r24
     3b6:	c7 01       	movw	r24, r14
     3b8:	b6 01       	movw	r22, r12
     3ba:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__subsf3>
     3be:	20 e0       	ldi	r18, 0x00	; 0
     3c0:	30 e0       	ldi	r19, 0x00	; 0
     3c2:	41 e0       	ldi	r20, 0x01	; 1
     3c4:	53 e4       	ldi	r21, 0x43	; 67
     3c6:	0e 94 c9 03 	call	0x792	; 0x792 <__divsf3>
     3ca:	20 e0       	ldi	r18, 0x00	; 0
     3cc:	30 e0       	ldi	r19, 0x00	; 0
     3ce:	48 ec       	ldi	r20, 0xC8	; 200
     3d0:	52 e4       	ldi	r21, 0x42	; 66
     3d2:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__mulsf3>
     3d6:	0e 94 31 04 	call	0x862	; 0x862 <__fixsfsi>
     3da:	6b 01       	movw	r12, r22
     3dc:	7c 01       	movw	r14, r24
    pos.y_pos = (int16_t) 100*(((double) adc_read(JOY_Y) - (double) zero_y)/129);
     3de:	81 e0       	ldi	r24, 0x01	; 1
     3e0:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
     3e4:	68 2f       	mov	r22, r24
     3e6:	70 e0       	ldi	r23, 0x00	; 0
     3e8:	80 e0       	ldi	r24, 0x00	; 0
     3ea:	90 e0       	ldi	r25, 0x00	; 0
     3ec:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
     3f0:	4b 01       	movw	r8, r22
     3f2:	5c 01       	movw	r10, r24
     3f4:	60 91 48 02 	lds	r22, 0x0248
     3f8:	70 e0       	ldi	r23, 0x00	; 0
     3fa:	80 e0       	ldi	r24, 0x00	; 0
     3fc:	90 e0       	ldi	r25, 0x00	; 0
     3fe:	0e 94 62 04 	call	0x8c4	; 0x8c4 <__floatunsisf>
     402:	9b 01       	movw	r18, r22
     404:	ac 01       	movw	r20, r24
     406:	c5 01       	movw	r24, r10
     408:	b4 01       	movw	r22, r8
     40a:	0e 94 64 03 	call	0x6c8	; 0x6c8 <__subsf3>
     40e:	20 e0       	ldi	r18, 0x00	; 0
     410:	30 e0       	ldi	r19, 0x00	; 0
     412:	41 e0       	ldi	r20, 0x01	; 1
     414:	53 e4       	ldi	r21, 0x43	; 67
     416:	0e 94 c9 03 	call	0x792	; 0x792 <__divsf3>
     41a:	20 e0       	ldi	r18, 0x00	; 0
     41c:	30 e0       	ldi	r19, 0x00	; 0
     41e:	48 ec       	ldi	r20, 0xC8	; 200
     420:	52 e4       	ldi	r21, 0x42	; 66
     422:	0e 94 f0 04 	call	0x9e0	; 0x9e0 <__mulsf3>
     426:	0e 94 31 04 	call	0x862	; 0x862 <__fixsfsi>
     42a:	4b 01       	movw	r8, r22
     42c:	5c 01       	movw	r10, r24
    return pos;
     42e:	b6 01       	movw	r22, r12
     430:	c4 01       	movw	r24, r8
}
     432:	ff 90       	pop	r15
     434:	ef 90       	pop	r14
     436:	df 90       	pop	r13
     438:	cf 90       	pop	r12
     43a:	bf 90       	pop	r11
     43c:	af 90       	pop	r10
     43e:	9f 90       	pop	r9
     440:	8f 90       	pop	r8
     442:	08 95       	ret

00000444 <get_slider_position>:
    prev_dir = dir;
    return dir;
}

signed char get_slider_position() {
	signed char sl_val = adc_read(SLIDER_RIGHT);
     444:	83 e0       	ldi	r24, 0x03	; 3
     446:	0e 94 5f 00 	call	0xbe	; 0xbe <adc_read>
	return sl_val;
}
     44a:	08 95       	ret

0000044c <mcp2515_reset>:
	mcp2515_reset();
}


void mcp2515_reset(void) {
	spi_select();
     44c:	0e 94 c1 02 	call	0x582	; 0x582 <spi_select>
	spi_write(MCP_RESET);
     450:	80 ec       	ldi	r24, 0xC0	; 192
     452:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_deselect();
     456:	0e 94 c3 02 	call	0x586	; 0x586 <spi_deselect>
     45a:	08 95       	ret

0000045c <mcp2515_init>:
#include "mcp2515.h"

void mcp2515_init(void) {
	spi_init();
     45c:	0e 94 af 02 	call	0x55e	; 0x55e <spi_init>
	mcp2515_reset();
     460:	0e 94 26 02 	call	0x44c	; 0x44c <mcp2515_reset>
     464:	08 95       	ret

00000466 <mcp2515_read>:
	spi_select();
	spi_write(MCP_RESET);
	spi_deselect();
}

char mcp2515_read(char reg_address) {
     466:	cf 93       	push	r28
     468:	c8 2f       	mov	r28, r24
	spi_select();
     46a:	0e 94 c1 02 	call	0x582	; 0x582 <spi_select>
	spi_write(MCP_READ);
     46e:	83 e0       	ldi	r24, 0x03	; 3
     470:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_write(reg_address);
     474:	8c 2f       	mov	r24, r28
     476:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	char result = spi_read();
     47a:	0e 94 ba 02 	call	0x574	; 0x574 <spi_read>
     47e:	c8 2f       	mov	r28, r24
	spi_deselect();
     480:	0e 94 c3 02 	call	0x586	; 0x586 <spi_deselect>
	return result;
}
     484:	8c 2f       	mov	r24, r28
     486:	cf 91       	pop	r28
     488:	08 95       	ret

0000048a <mcp2515_write>:

void mcp2515_write(char reg_address, char data) {
     48a:	cf 93       	push	r28
     48c:	df 93       	push	r29
     48e:	d8 2f       	mov	r29, r24
     490:	c6 2f       	mov	r28, r22
	spi_select();
     492:	0e 94 c1 02 	call	0x582	; 0x582 <spi_select>
	spi_write(MCP_WRITE);
     496:	82 e0       	ldi	r24, 0x02	; 2
     498:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_write(reg_address);
     49c:	8d 2f       	mov	r24, r29
     49e:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_write(data);
     4a2:	8c 2f       	mov	r24, r28
     4a4:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_deselect();
     4a8:	0e 94 c3 02 	call	0x586	; 0x586 <spi_deselect>
}
     4ac:	df 91       	pop	r29
     4ae:	cf 91       	pop	r28
     4b0:	08 95       	ret

000004b2 <mcp2515_req_to_send>:

void mcp2515_req_to_send(char buf_address) {
     4b2:	cf 93       	push	r28
     4b4:	c8 2f       	mov	r28, r24
	spi_select();
     4b6:	0e 94 c1 02 	call	0x582	; 0x582 <spi_select>
	spi_write(buf_address);
     4ba:	8c 2f       	mov	r24, r28
     4bc:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_deselect();
     4c0:	0e 94 c3 02 	call	0x586	; 0x586 <spi_deselect>
}
     4c4:	cf 91       	pop	r28
     4c6:	08 95       	ret

000004c8 <mcp2515_bit_modify>:
	char result = spi_read();
	spi_deselect();
	return result;	
}

void mcp2515_bit_modify(char reg_address, char mask, char data) {
     4c8:	1f 93       	push	r17
     4ca:	cf 93       	push	r28
     4cc:	df 93       	push	r29
     4ce:	18 2f       	mov	r17, r24
     4d0:	d6 2f       	mov	r29, r22
     4d2:	c4 2f       	mov	r28, r20
	spi_select();
     4d4:	0e 94 c1 02 	call	0x582	; 0x582 <spi_select>
	spi_write(MCP_BITMOD);
     4d8:	85 e0       	ldi	r24, 0x05	; 5
     4da:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_write(reg_address);
     4de:	81 2f       	mov	r24, r17
     4e0:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_write(mask);
     4e4:	8d 2f       	mov	r24, r29
     4e6:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_write(data);
     4ea:	8c 2f       	mov	r24, r28
     4ec:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	spi_deselect();
     4f0:	0e 94 c3 02 	call	0x586	; 0x586 <spi_deselect>
     4f4:	df 91       	pop	r29
     4f6:	cf 91       	pop	r28
     4f8:	1f 91       	pop	r17
     4fa:	08 95       	ret

000004fc <main>:
#include "mcp2515.h"
#include "can.h"
#include "game.h"
#include <util/delay.h>

int main(void) {
     4fc:	cf 93       	push	r28
     4fe:	df 93       	push	r29
     500:	cd b7       	in	r28, 0x3d	; 61
     502:	de b7       	in	r29, 0x3e	; 62
     504:	2a 97       	sbiw	r28, 0x0a	; 10
     506:	0f b6       	in	r0, 0x3f	; 63
     508:	f8 94       	cli
     50a:	de bf       	out	0x3e, r29	; 62
     50c:	0f be       	out	0x3f, r0	; 63
     50e:	cd bf       	out	0x3d, r28	; 61
	adc_init();	
     510:	0e 94 57 00 	call	0xae	; 0xae <adc_init>
	uart_init();
     514:	0e 94 52 03 	call	0x6a4	; 0x6a4 <uart_init>
	sram_test();
     518:	0e 94 c5 02 	call	0x58a	; 0x58a <sram_test>
	//oled_init();
	//OLED_reset();
	can_init();
     51c:	0e 94 7e 00 	call	0xfc	; 0xfc <can_init>
	while(1)
    {	
		//send_game_ctrls();
		//printf("Slider position : %d \n",get_slider_position());
		printf("Press enter key to a start new game! \n");
        getchar();
     520:	0a e4       	ldi	r16, 0x4A	; 74
     522:	12 e0       	ldi	r17, 0x02	; 2
	can_message rcv_msg;
	while(1)
    {	
		//send_game_ctrls();
		//printf("Slider position : %d \n",get_slider_position());
		printf("Press enter key to a start new game! \n");
     524:	85 e2       	ldi	r24, 0x25	; 37
     526:	91 e0       	ldi	r25, 0x01	; 1
     528:	0e 94 a5 05 	call	0xb4a	; 0xb4a <puts>
        getchar();
     52c:	f8 01       	movw	r30, r16
     52e:	80 81       	ld	r24, Z
     530:	91 81       	ldd	r25, Z+1	; 0x01
     532:	0e 94 53 05 	call	0xaa6	; 0xaa6 <fgetc>
		start_game();
     536:	0e 94 64 01 	call	0x2c8	; 0x2c8 <start_game>
        while(rcv_msg.id != GAME_OVER) {
		    send_game_ctrls();
     53a:	0e 94 89 01 	call	0x312	; 0x312 <send_game_ctrls>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
     53e:	80 e0       	ldi	r24, 0x00	; 0
     540:	90 ef       	ldi	r25, 0xF0	; 240
     542:	01 97       	sbiw	r24, 0x01	; 1
     544:	f1 f7       	brne	.-4      	; 0x542 <__stack+0x43>
			_delay_ms(50);
            rcv_msg = can_recieve();
     546:	ce 01       	movw	r24, r28
     548:	01 96       	adiw	r24, 0x01	; 1
     54a:	0e 94 fb 00 	call	0x1f6	; 0x1f6 <can_recieve>
		//send_game_ctrls();
		//printf("Slider position : %d \n",get_slider_position());
		printf("Press enter key to a start new game! \n");
        getchar();
		start_game();
        while(rcv_msg.id != GAME_OVER) {
     54e:	89 81       	ldd	r24, Y+1	; 0x01
     550:	81 30       	cpi	r24, 0x01	; 1
     552:	99 f7       	brne	.-26     	; 0x53a <__stack+0x3b>
		    send_game_ctrls();
			_delay_ms(50);
            rcv_msg = can_recieve();
        }
    printf("You lost, game over! \n");
     554:	8b e4       	ldi	r24, 0x4B	; 75
     556:	91 e0       	ldi	r25, 0x01	; 1
     558:	0e 94 a5 05 	call	0xb4a	; 0xb4a <puts>
	rcv_msg.id = -1;
    }
     55c:	e3 cf       	rjmp	.-58     	; 0x524 <__stack+0x25>

0000055e <spi_init>:
#include "spi.h"

void spi_init(void) {
	// Set MOSI, SCK and SS output, MISO input 
	set_bit(DDR_SPI,DD_MOSI);
     55e:	bd 9a       	sbi	0x17, 5	; 23
	set_bit(DDR_SPI,DD_SCK);
     560:	bf 9a       	sbi	0x17, 7	; 23
	set_bit(DDR_SPI,DD_SS);
     562:	bc 9a       	sbi	0x17, 4	; 23
	clear_bit(DDR_SPI,DD_MISO);
     564:	be 98       	cbi	0x17, 6	; 23
	// Enable SPI, Master, set clock rate fck/16 
	SPCR = (1<<SPE)|(1<<MSTR)|(1<<SPR0);
     566:	81 e5       	ldi	r24, 0x51	; 81
     568:	8d b9       	out	0x0d, r24	; 13
     56a:	08 95       	ret

0000056c <spi_write>:
}

void spi_write(char data) {
	/* Start transmission */
	SPDR = data;
     56c:	8f b9       	out	0x0f, r24	; 15
	/* Wait for transmission complete */
	wait_until_bit_is_set(SPSR,SPIF);
     56e:	77 9b       	sbis	0x0e, 7	; 14
     570:	fe cf       	rjmp	.-4      	; 0x56e <spi_write+0x2>
}
     572:	08 95       	ret

00000574 <spi_read>:

char spi_read(void) {
	// Something needs to be sent to be able to read the spi register
	spi_write(0);
     574:	80 e0       	ldi	r24, 0x00	; 0
     576:	0e 94 b6 02 	call	0x56c	; 0x56c <spi_write>
	
	wait_until_bit_is_set(SPSR,SPIF);
     57a:	77 9b       	sbis	0x0e, 7	; 14
     57c:	fe cf       	rjmp	.-4      	; 0x57a <spi_read+0x6>
	return SPDR;
     57e:	8f b1       	in	r24, 0x0f	; 15
}
     580:	08 95       	ret

00000582 <spi_select>:

void spi_select(void) {
	clear_bit(PORTB,PINB4);
     582:	c4 98       	cbi	0x18, 4	; 24
     584:	08 95       	ret

00000586 <spi_deselect>:
}


void spi_deselect(void) {
	set_bit(PORTB,PINB4);
     586:	c4 9a       	sbi	0x18, 4	; 24
     588:	08 95       	ret

0000058a <sram_test>:
#include "setup.h"
#include "sram.h"

void sram_test(void) {
     58a:	cf 92       	push	r12
     58c:	df 92       	push	r13
     58e:	ef 92       	push	r14
     590:	ff 92       	push	r15
     592:	0f 93       	push	r16
     594:	1f 93       	push	r17
     596:	cf 93       	push	r28
     598:	df 93       	push	r29
	uint16_t i, werrors, rerrors;
	werrors = 0;
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");
     59a:	81 e6       	ldi	r24, 0x61	; 97
     59c:	91 e0       	ldi	r25, 0x01	; 1
     59e:	0e 94 a5 05 	call	0xb4a	; 0xb4a <puts>
void sram_test(void) {
    //Start address for the SRAM
	volatile char *ext_ram = (char *) 0x1800;

	uint16_t i, werrors, rerrors;
	werrors = 0;
     5a2:	00 e0       	ldi	r16, 0x00	; 0
     5a4:	10 e0       	ldi	r17, 0x00	; 0
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
     5a6:	c0 e0       	ldi	r28, 0x00	; 0
     5a8:	d0 e0       	ldi	r29, 0x00	; 0
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
		if (ext_ram[i] != testvalue) {
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     5aa:	0f 2e       	mov	r0, r31
     5ac:	f8 e7       	ldi	r31, 0x78	; 120
     5ae:	ef 2e       	mov	r14, r31
     5b0:	f1 e0       	ldi	r31, 0x01	; 1
     5b2:	ff 2e       	mov	r15, r31
     5b4:	f0 2d       	mov	r31, r0
     5b6:	8c 2f       	mov	r24, r28
     5b8:	80 95       	com	r24
     5ba:	fe 01       	movw	r30, r28
     5bc:	f8 5e       	subi	r31, 0xE8	; 232

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		ext_ram[i] = testvalue;
     5be:	80 83       	st	Z, r24
		if (ext_ram[i] != testvalue) {
     5c0:	90 81       	ld	r25, Z
     5c2:	98 17       	cp	r25, r24
     5c4:	a9 f0       	breq	.+42     	; 0x5f0 <sram_test+0x66>
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     5c6:	90 81       	ld	r25, Z
     5c8:	1f 92       	push	r1
     5ca:	8f 93       	push	r24
     5cc:	1f 92       	push	r1
     5ce:	9f 93       	push	r25
     5d0:	df 93       	push	r29
     5d2:	cf 93       	push	r28
     5d4:	ff 92       	push	r15
     5d6:	ef 92       	push	r14
     5d8:	0e 94 91 05 	call	0xb22	; 0xb22 <printf>
			werrors++;
     5dc:	0f 5f       	subi	r16, 0xFF	; 255
     5de:	1f 4f       	sbci	r17, 0xFF	; 255
     5e0:	8d b7       	in	r24, 0x3d	; 61
     5e2:	9e b7       	in	r25, 0x3e	; 62
     5e4:	08 96       	adiw	r24, 0x08	; 8
     5e6:	0f b6       	in	r0, 0x3f	; 63
     5e8:	f8 94       	cli
     5ea:	9e bf       	out	0x3e, r25	; 62
     5ec:	0f be       	out	0x3f, r0	; 63
     5ee:	8d bf       	out	0x3d, r24	; 61
	rerrors = 0;
	unsigned char testvalue;

	printf("Starting SRAM test...\r\n");

	for (i = 0; i < 0x800; i++) {
     5f0:	21 96       	adiw	r28, 0x01	; 1
     5f2:	c1 15       	cp	r28, r1
     5f4:	98 e0       	ldi	r25, 0x08	; 8
     5f6:	d9 07       	cpc	r29, r25
     5f8:	f1 f6       	brne	.-68     	; 0x5b6 <sram_test+0x2c>
     5fa:	e1 2c       	mov	r14, r1
     5fc:	f1 2c       	mov	r15, r1
     5fe:	c0 e0       	ldi	r28, 0x00	; 0
     600:	d0 e0       	ldi	r29, 0x00	; 0
	}

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		if (ext_ram[i] != testvalue) {
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     602:	0f 2e       	mov	r0, r31
     604:	f8 eb       	ldi	r31, 0xB8	; 184
     606:	cf 2e       	mov	r12, r31
     608:	f1 e0       	ldi	r31, 0x01	; 1
     60a:	df 2e       	mov	r13, r31
     60c:	f0 2d       	mov	r31, r0
     60e:	8c 2f       	mov	r24, r28
     610:	80 95       	com	r24
     612:	fe 01       	movw	r30, r28
     614:	f8 5e       	subi	r31, 0xE8	; 232
		}
	}

	for (i = 0; i < 0x800; i++) {
		testvalue = ~(i % 256);
		if (ext_ram[i] != testvalue) {
     616:	90 81       	ld	r25, Z
     618:	89 17       	cp	r24, r25
     61a:	b1 f0       	breq	.+44     	; 0x648 <sram_test+0xbe>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
     61c:	90 81       	ld	r25, Z
     61e:	1f 92       	push	r1
     620:	8f 93       	push	r24
     622:	1f 92       	push	r1
     624:	9f 93       	push	r25
     626:	df 93       	push	r29
     628:	cf 93       	push	r28
     62a:	df 92       	push	r13
     62c:	cf 92       	push	r12
     62e:	0e 94 91 05 	call	0xb22	; 0xb22 <printf>
			rerrors++;
     632:	8f ef       	ldi	r24, 0xFF	; 255
     634:	e8 1a       	sub	r14, r24
     636:	f8 0a       	sbc	r15, r24
     638:	8d b7       	in	r24, 0x3d	; 61
     63a:	9e b7       	in	r25, 0x3e	; 62
     63c:	08 96       	adiw	r24, 0x08	; 8
     63e:	0f b6       	in	r0, 0x3f	; 63
     640:	f8 94       	cli
     642:	9e bf       	out	0x3e, r25	; 62
     644:	0f be       	out	0x3f, r0	; 63
     646:	8d bf       	out	0x3d, r24	; 61
			printf("SRAM error (write phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			werrors++;
		}
	}

	for (i = 0; i < 0x800; i++) {
     648:	21 96       	adiw	r28, 0x01	; 1
     64a:	c1 15       	cp	r28, r1
     64c:	98 e0       	ldi	r25, 0x08	; 8
     64e:	d9 07       	cpc	r29, r25
     650:	f1 f6       	brne	.-68     	; 0x60e <sram_test+0x84>
			printf("SRAM error (read phase): ext_ram[%d] = %02X (should be %02X)\r\n", i, ext_ram[i], testvalue);
			rerrors++;
		}
	}

	printf("SRAM test completed with %d errors in write phase and %d errors in read phase\r\n", werrors, rerrors);
     652:	ff 92       	push	r15
     654:	ef 92       	push	r14
     656:	1f 93       	push	r17
     658:	0f 93       	push	r16
     65a:	87 ef       	ldi	r24, 0xF7	; 247
     65c:	91 e0       	ldi	r25, 0x01	; 1
     65e:	9f 93       	push	r25
     660:	8f 93       	push	r24
     662:	0e 94 91 05 	call	0xb22	; 0xb22 <printf>
     666:	0f 90       	pop	r0
     668:	0f 90       	pop	r0
     66a:	0f 90       	pop	r0
     66c:	0f 90       	pop	r0
     66e:	0f 90       	pop	r0
     670:	0f 90       	pop	r0
}
     672:	df 91       	pop	r29
     674:	cf 91       	pop	r28
     676:	1f 91       	pop	r17
     678:	0f 91       	pop	r16
     67a:	ff 90       	pop	r15
     67c:	ef 90       	pop	r14
     67e:	df 90       	pop	r13
     680:	cf 90       	pop	r12
     682:	08 95       	ret

00000684 <uart_send_char>:
	// Link to stdio
	stdout = &uart_io;
	stdin = &uart_io;
}

void uart_send_char(char c, FILE *stream) {
     684:	cf 93       	push	r28
     686:	c8 2f       	mov	r28, r24
	if (c == '\n') {
     688:	8a 30       	cpi	r24, 0x0A	; 10
     68a:	19 f4       	brne	.+6      	; 0x692 <uart_send_char+0xe>
	    uart_send_char('\r', stream);
     68c:	8d e0       	ldi	r24, 0x0D	; 13
     68e:	0e 94 42 03 	call	0x684	; 0x684 <uart_send_char>
	}
	loop_until_bit_is_set(UCSR0A,UDRE0);
     692:	5d 9b       	sbis	0x0b, 5	; 11
     694:	fe cf       	rjmp	.-4      	; 0x692 <uart_send_char+0xe>
	UDR0 = c;
     696:	cc b9       	out	0x0c, r28	; 12
}
     698:	cf 91       	pop	r28
     69a:	08 95       	ret

0000069c <uart_recieve_char>:

char uart_recieve_char(FILE *stream) {
	loop_until_bit_is_set(UCSR0A,RXC0);
     69c:	5f 9b       	sbis	0x0b, 7	; 11
     69e:	fe cf       	rjmp	.-4      	; 0x69c <uart_recieve_char>
	return UDR0;
     6a0:	8c b1       	in	r24, 0x0c	; 12
}
     6a2:	08 95       	ret

000006a4 <uart_init>:
#include "setup.h"

void uart_init() {
	//Set baud rate
	unsigned int ubrr = (F_CPU-250)/16/BAUD-1;
	UBRR0H = (unsigned char)(ubrr >> 8);
     6a4:	10 bc       	out	0x20, r1	; 32
	UBRR0L = (unsigned char)(ubrr);
     6a6:	8e e1       	ldi	r24, 0x1E	; 30
     6a8:	89 b9       	out	0x09, r24	; 9

	// Set 8-bit data 2 stop bit
	UCSR0C = (1<<URSEL0) | (1<<USBS0) | (3<<UCSZ00);
     6aa:	8e e8       	ldi	r24, 0x8E	; 142
     6ac:	80 bd       	out	0x20, r24	; 32
	// Enable RX0 and TX0
	UCSR0B = (1 << RXEN0 | (1 << TXEN0));
     6ae:	88 e1       	ldi	r24, 0x18	; 24
     6b0:	8a b9       	out	0x0a, r24	; 10
	
	// Link to stdio
	stdout = &uart_io;
     6b2:	80 e0       	ldi	r24, 0x00	; 0
     6b4:	91 e0       	ldi	r25, 0x01	; 1
     6b6:	90 93 4d 02 	sts	0x024D, r25
     6ba:	80 93 4c 02 	sts	0x024C, r24
	stdin = &uart_io;
     6be:	90 93 4b 02 	sts	0x024B, r25
     6c2:	80 93 4a 02 	sts	0x024A, r24
     6c6:	08 95       	ret

000006c8 <__subsf3>:
     6c8:	50 58       	subi	r21, 0x80	; 128

000006ca <__addsf3>:
     6ca:	bb 27       	eor	r27, r27
     6cc:	aa 27       	eor	r26, r26
     6ce:	0e d0       	rcall	.+28     	; 0x6ec <__addsf3x>
     6d0:	4d c1       	rjmp	.+666    	; 0x96c <__fp_round>
     6d2:	3e d1       	rcall	.+636    	; 0x950 <__fp_pscA>
     6d4:	30 f0       	brcs	.+12     	; 0x6e2 <__addsf3+0x18>
     6d6:	43 d1       	rcall	.+646    	; 0x95e <__fp_pscB>
     6d8:	20 f0       	brcs	.+8      	; 0x6e2 <__addsf3+0x18>
     6da:	31 f4       	brne	.+12     	; 0x6e8 <__addsf3+0x1e>
     6dc:	9f 3f       	cpi	r25, 0xFF	; 255
     6de:	11 f4       	brne	.+4      	; 0x6e4 <__addsf3+0x1a>
     6e0:	1e f4       	brtc	.+6      	; 0x6e8 <__addsf3+0x1e>
     6e2:	33 c1       	rjmp	.+614    	; 0x94a <__fp_nan>
     6e4:	0e f4       	brtc	.+2      	; 0x6e8 <__addsf3+0x1e>
     6e6:	e0 95       	com	r30
     6e8:	e7 fb       	bst	r30, 7
     6ea:	29 c1       	rjmp	.+594    	; 0x93e <__fp_inf>

000006ec <__addsf3x>:
     6ec:	e9 2f       	mov	r30, r25
     6ee:	4f d1       	rcall	.+670    	; 0x98e <__fp_split3>
     6f0:	80 f3       	brcs	.-32     	; 0x6d2 <__addsf3+0x8>
     6f2:	ba 17       	cp	r27, r26
     6f4:	62 07       	cpc	r22, r18
     6f6:	73 07       	cpc	r23, r19
     6f8:	84 07       	cpc	r24, r20
     6fa:	95 07       	cpc	r25, r21
     6fc:	18 f0       	brcs	.+6      	; 0x704 <__addsf3x+0x18>
     6fe:	71 f4       	brne	.+28     	; 0x71c <__addsf3x+0x30>
     700:	9e f5       	brtc	.+102    	; 0x768 <__addsf3x+0x7c>
     702:	67 c1       	rjmp	.+718    	; 0x9d2 <__fp_zero>
     704:	0e f4       	brtc	.+2      	; 0x708 <__addsf3x+0x1c>
     706:	e0 95       	com	r30
     708:	0b 2e       	mov	r0, r27
     70a:	ba 2f       	mov	r27, r26
     70c:	a0 2d       	mov	r26, r0
     70e:	0b 01       	movw	r0, r22
     710:	b9 01       	movw	r22, r18
     712:	90 01       	movw	r18, r0
     714:	0c 01       	movw	r0, r24
     716:	ca 01       	movw	r24, r20
     718:	a0 01       	movw	r20, r0
     71a:	11 24       	eor	r1, r1
     71c:	ff 27       	eor	r31, r31
     71e:	59 1b       	sub	r21, r25
     720:	99 f0       	breq	.+38     	; 0x748 <__addsf3x+0x5c>
     722:	59 3f       	cpi	r21, 0xF9	; 249
     724:	50 f4       	brcc	.+20     	; 0x73a <__addsf3x+0x4e>
     726:	50 3e       	cpi	r21, 0xE0	; 224
     728:	68 f1       	brcs	.+90     	; 0x784 <__addsf3x+0x98>
     72a:	1a 16       	cp	r1, r26
     72c:	f0 40       	sbci	r31, 0x00	; 0
     72e:	a2 2f       	mov	r26, r18
     730:	23 2f       	mov	r18, r19
     732:	34 2f       	mov	r19, r20
     734:	44 27       	eor	r20, r20
     736:	58 5f       	subi	r21, 0xF8	; 248
     738:	f3 cf       	rjmp	.-26     	; 0x720 <__addsf3x+0x34>
     73a:	46 95       	lsr	r20
     73c:	37 95       	ror	r19
     73e:	27 95       	ror	r18
     740:	a7 95       	ror	r26
     742:	f0 40       	sbci	r31, 0x00	; 0
     744:	53 95       	inc	r21
     746:	c9 f7       	brne	.-14     	; 0x73a <__addsf3x+0x4e>
     748:	7e f4       	brtc	.+30     	; 0x768 <__addsf3x+0x7c>
     74a:	1f 16       	cp	r1, r31
     74c:	ba 0b       	sbc	r27, r26
     74e:	62 0b       	sbc	r22, r18
     750:	73 0b       	sbc	r23, r19
     752:	84 0b       	sbc	r24, r20
     754:	ba f0       	brmi	.+46     	; 0x784 <__addsf3x+0x98>
     756:	91 50       	subi	r25, 0x01	; 1
     758:	a1 f0       	breq	.+40     	; 0x782 <__addsf3x+0x96>
     75a:	ff 0f       	add	r31, r31
     75c:	bb 1f       	adc	r27, r27
     75e:	66 1f       	adc	r22, r22
     760:	77 1f       	adc	r23, r23
     762:	88 1f       	adc	r24, r24
     764:	c2 f7       	brpl	.-16     	; 0x756 <__addsf3x+0x6a>
     766:	0e c0       	rjmp	.+28     	; 0x784 <__addsf3x+0x98>
     768:	ba 0f       	add	r27, r26
     76a:	62 1f       	adc	r22, r18
     76c:	73 1f       	adc	r23, r19
     76e:	84 1f       	adc	r24, r20
     770:	48 f4       	brcc	.+18     	; 0x784 <__addsf3x+0x98>
     772:	87 95       	ror	r24
     774:	77 95       	ror	r23
     776:	67 95       	ror	r22
     778:	b7 95       	ror	r27
     77a:	f7 95       	ror	r31
     77c:	9e 3f       	cpi	r25, 0xFE	; 254
     77e:	08 f0       	brcs	.+2      	; 0x782 <__addsf3x+0x96>
     780:	b3 cf       	rjmp	.-154    	; 0x6e8 <__addsf3+0x1e>
     782:	93 95       	inc	r25
     784:	88 0f       	add	r24, r24
     786:	08 f0       	brcs	.+2      	; 0x78a <__addsf3x+0x9e>
     788:	99 27       	eor	r25, r25
     78a:	ee 0f       	add	r30, r30
     78c:	97 95       	ror	r25
     78e:	87 95       	ror	r24
     790:	08 95       	ret

00000792 <__divsf3>:
     792:	0c d0       	rcall	.+24     	; 0x7ac <__divsf3x>
     794:	eb c0       	rjmp	.+470    	; 0x96c <__fp_round>
     796:	e3 d0       	rcall	.+454    	; 0x95e <__fp_pscB>
     798:	40 f0       	brcs	.+16     	; 0x7aa <__divsf3+0x18>
     79a:	da d0       	rcall	.+436    	; 0x950 <__fp_pscA>
     79c:	30 f0       	brcs	.+12     	; 0x7aa <__divsf3+0x18>
     79e:	21 f4       	brne	.+8      	; 0x7a8 <__divsf3+0x16>
     7a0:	5f 3f       	cpi	r21, 0xFF	; 255
     7a2:	19 f0       	breq	.+6      	; 0x7aa <__divsf3+0x18>
     7a4:	cc c0       	rjmp	.+408    	; 0x93e <__fp_inf>
     7a6:	51 11       	cpse	r21, r1
     7a8:	15 c1       	rjmp	.+554    	; 0x9d4 <__fp_szero>
     7aa:	cf c0       	rjmp	.+414    	; 0x94a <__fp_nan>

000007ac <__divsf3x>:
     7ac:	f0 d0       	rcall	.+480    	; 0x98e <__fp_split3>
     7ae:	98 f3       	brcs	.-26     	; 0x796 <__divsf3+0x4>

000007b0 <__divsf3_pse>:
     7b0:	99 23       	and	r25, r25
     7b2:	c9 f3       	breq	.-14     	; 0x7a6 <__divsf3+0x14>
     7b4:	55 23       	and	r21, r21
     7b6:	b1 f3       	breq	.-20     	; 0x7a4 <__divsf3+0x12>
     7b8:	95 1b       	sub	r25, r21
     7ba:	55 0b       	sbc	r21, r21
     7bc:	bb 27       	eor	r27, r27
     7be:	aa 27       	eor	r26, r26
     7c0:	62 17       	cp	r22, r18
     7c2:	73 07       	cpc	r23, r19
     7c4:	84 07       	cpc	r24, r20
     7c6:	38 f0       	brcs	.+14     	; 0x7d6 <__divsf3_pse+0x26>
     7c8:	9f 5f       	subi	r25, 0xFF	; 255
     7ca:	5f 4f       	sbci	r21, 0xFF	; 255
     7cc:	22 0f       	add	r18, r18
     7ce:	33 1f       	adc	r19, r19
     7d0:	44 1f       	adc	r20, r20
     7d2:	aa 1f       	adc	r26, r26
     7d4:	a9 f3       	breq	.-22     	; 0x7c0 <__divsf3_pse+0x10>
     7d6:	33 d0       	rcall	.+102    	; 0x83e <__divsf3_pse+0x8e>
     7d8:	0e 2e       	mov	r0, r30
     7da:	3a f0       	brmi	.+14     	; 0x7ea <__divsf3_pse+0x3a>
     7dc:	e0 e8       	ldi	r30, 0x80	; 128
     7de:	30 d0       	rcall	.+96     	; 0x840 <__divsf3_pse+0x90>
     7e0:	91 50       	subi	r25, 0x01	; 1
     7e2:	50 40       	sbci	r21, 0x00	; 0
     7e4:	e6 95       	lsr	r30
     7e6:	00 1c       	adc	r0, r0
     7e8:	ca f7       	brpl	.-14     	; 0x7dc <__divsf3_pse+0x2c>
     7ea:	29 d0       	rcall	.+82     	; 0x83e <__divsf3_pse+0x8e>
     7ec:	fe 2f       	mov	r31, r30
     7ee:	27 d0       	rcall	.+78     	; 0x83e <__divsf3_pse+0x8e>
     7f0:	66 0f       	add	r22, r22
     7f2:	77 1f       	adc	r23, r23
     7f4:	88 1f       	adc	r24, r24
     7f6:	bb 1f       	adc	r27, r27
     7f8:	26 17       	cp	r18, r22
     7fa:	37 07       	cpc	r19, r23
     7fc:	48 07       	cpc	r20, r24
     7fe:	ab 07       	cpc	r26, r27
     800:	b0 e8       	ldi	r27, 0x80	; 128
     802:	09 f0       	breq	.+2      	; 0x806 <__divsf3_pse+0x56>
     804:	bb 0b       	sbc	r27, r27
     806:	80 2d       	mov	r24, r0
     808:	bf 01       	movw	r22, r30
     80a:	ff 27       	eor	r31, r31
     80c:	93 58       	subi	r25, 0x83	; 131
     80e:	5f 4f       	sbci	r21, 0xFF	; 255
     810:	2a f0       	brmi	.+10     	; 0x81c <__divsf3_pse+0x6c>
     812:	9e 3f       	cpi	r25, 0xFE	; 254
     814:	51 05       	cpc	r21, r1
     816:	68 f0       	brcs	.+26     	; 0x832 <__divsf3_pse+0x82>
     818:	92 c0       	rjmp	.+292    	; 0x93e <__fp_inf>
     81a:	dc c0       	rjmp	.+440    	; 0x9d4 <__fp_szero>
     81c:	5f 3f       	cpi	r21, 0xFF	; 255
     81e:	ec f3       	brlt	.-6      	; 0x81a <__divsf3_pse+0x6a>
     820:	98 3e       	cpi	r25, 0xE8	; 232
     822:	dc f3       	brlt	.-10     	; 0x81a <__divsf3_pse+0x6a>
     824:	86 95       	lsr	r24
     826:	77 95       	ror	r23
     828:	67 95       	ror	r22
     82a:	b7 95       	ror	r27
     82c:	f7 95       	ror	r31
     82e:	9f 5f       	subi	r25, 0xFF	; 255
     830:	c9 f7       	brne	.-14     	; 0x824 <__divsf3_pse+0x74>
     832:	88 0f       	add	r24, r24
     834:	91 1d       	adc	r25, r1
     836:	96 95       	lsr	r25
     838:	87 95       	ror	r24
     83a:	97 f9       	bld	r25, 7
     83c:	08 95       	ret
     83e:	e1 e0       	ldi	r30, 0x01	; 1
     840:	66 0f       	add	r22, r22
     842:	77 1f       	adc	r23, r23
     844:	88 1f       	adc	r24, r24
     846:	bb 1f       	adc	r27, r27
     848:	62 17       	cp	r22, r18
     84a:	73 07       	cpc	r23, r19
     84c:	84 07       	cpc	r24, r20
     84e:	ba 07       	cpc	r27, r26
     850:	20 f0       	brcs	.+8      	; 0x85a <__divsf3_pse+0xaa>
     852:	62 1b       	sub	r22, r18
     854:	73 0b       	sbc	r23, r19
     856:	84 0b       	sbc	r24, r20
     858:	ba 0b       	sbc	r27, r26
     85a:	ee 1f       	adc	r30, r30
     85c:	88 f7       	brcc	.-30     	; 0x840 <__divsf3_pse+0x90>
     85e:	e0 95       	com	r30
     860:	08 95       	ret

00000862 <__fixsfsi>:
     862:	04 d0       	rcall	.+8      	; 0x86c <__fixunssfsi>
     864:	68 94       	set
     866:	b1 11       	cpse	r27, r1
     868:	b5 c0       	rjmp	.+362    	; 0x9d4 <__fp_szero>
     86a:	08 95       	ret

0000086c <__fixunssfsi>:
     86c:	98 d0       	rcall	.+304    	; 0x99e <__fp_splitA>
     86e:	88 f0       	brcs	.+34     	; 0x892 <__fixunssfsi+0x26>
     870:	9f 57       	subi	r25, 0x7F	; 127
     872:	90 f0       	brcs	.+36     	; 0x898 <__fixunssfsi+0x2c>
     874:	b9 2f       	mov	r27, r25
     876:	99 27       	eor	r25, r25
     878:	b7 51       	subi	r27, 0x17	; 23
     87a:	a0 f0       	brcs	.+40     	; 0x8a4 <__fixunssfsi+0x38>
     87c:	d1 f0       	breq	.+52     	; 0x8b2 <__fixunssfsi+0x46>
     87e:	66 0f       	add	r22, r22
     880:	77 1f       	adc	r23, r23
     882:	88 1f       	adc	r24, r24
     884:	99 1f       	adc	r25, r25
     886:	1a f0       	brmi	.+6      	; 0x88e <__fixunssfsi+0x22>
     888:	ba 95       	dec	r27
     88a:	c9 f7       	brne	.-14     	; 0x87e <__fixunssfsi+0x12>
     88c:	12 c0       	rjmp	.+36     	; 0x8b2 <__fixunssfsi+0x46>
     88e:	b1 30       	cpi	r27, 0x01	; 1
     890:	81 f0       	breq	.+32     	; 0x8b2 <__fixunssfsi+0x46>
     892:	9f d0       	rcall	.+318    	; 0x9d2 <__fp_zero>
     894:	b1 e0       	ldi	r27, 0x01	; 1
     896:	08 95       	ret
     898:	9c c0       	rjmp	.+312    	; 0x9d2 <__fp_zero>
     89a:	67 2f       	mov	r22, r23
     89c:	78 2f       	mov	r23, r24
     89e:	88 27       	eor	r24, r24
     8a0:	b8 5f       	subi	r27, 0xF8	; 248
     8a2:	39 f0       	breq	.+14     	; 0x8b2 <__fixunssfsi+0x46>
     8a4:	b9 3f       	cpi	r27, 0xF9	; 249
     8a6:	cc f3       	brlt	.-14     	; 0x89a <__fixunssfsi+0x2e>
     8a8:	86 95       	lsr	r24
     8aa:	77 95       	ror	r23
     8ac:	67 95       	ror	r22
     8ae:	b3 95       	inc	r27
     8b0:	d9 f7       	brne	.-10     	; 0x8a8 <__fixunssfsi+0x3c>
     8b2:	3e f4       	brtc	.+14     	; 0x8c2 <__fixunssfsi+0x56>
     8b4:	90 95       	com	r25
     8b6:	80 95       	com	r24
     8b8:	70 95       	com	r23
     8ba:	61 95       	neg	r22
     8bc:	7f 4f       	sbci	r23, 0xFF	; 255
     8be:	8f 4f       	sbci	r24, 0xFF	; 255
     8c0:	9f 4f       	sbci	r25, 0xFF	; 255
     8c2:	08 95       	ret

000008c4 <__floatunsisf>:
     8c4:	e8 94       	clt
     8c6:	09 c0       	rjmp	.+18     	; 0x8da <__floatsisf+0x12>

000008c8 <__floatsisf>:
     8c8:	97 fb       	bst	r25, 7
     8ca:	3e f4       	brtc	.+14     	; 0x8da <__floatsisf+0x12>
     8cc:	90 95       	com	r25
     8ce:	80 95       	com	r24
     8d0:	70 95       	com	r23
     8d2:	61 95       	neg	r22
     8d4:	7f 4f       	sbci	r23, 0xFF	; 255
     8d6:	8f 4f       	sbci	r24, 0xFF	; 255
     8d8:	9f 4f       	sbci	r25, 0xFF	; 255
     8da:	99 23       	and	r25, r25
     8dc:	a9 f0       	breq	.+42     	; 0x908 <__floatsisf+0x40>
     8de:	f9 2f       	mov	r31, r25
     8e0:	96 e9       	ldi	r25, 0x96	; 150
     8e2:	bb 27       	eor	r27, r27
     8e4:	93 95       	inc	r25
     8e6:	f6 95       	lsr	r31
     8e8:	87 95       	ror	r24
     8ea:	77 95       	ror	r23
     8ec:	67 95       	ror	r22
     8ee:	b7 95       	ror	r27
     8f0:	f1 11       	cpse	r31, r1
     8f2:	f8 cf       	rjmp	.-16     	; 0x8e4 <__floatsisf+0x1c>
     8f4:	fa f4       	brpl	.+62     	; 0x934 <__floatsisf+0x6c>
     8f6:	bb 0f       	add	r27, r27
     8f8:	11 f4       	brne	.+4      	; 0x8fe <__floatsisf+0x36>
     8fa:	60 ff       	sbrs	r22, 0
     8fc:	1b c0       	rjmp	.+54     	; 0x934 <__floatsisf+0x6c>
     8fe:	6f 5f       	subi	r22, 0xFF	; 255
     900:	7f 4f       	sbci	r23, 0xFF	; 255
     902:	8f 4f       	sbci	r24, 0xFF	; 255
     904:	9f 4f       	sbci	r25, 0xFF	; 255
     906:	16 c0       	rjmp	.+44     	; 0x934 <__floatsisf+0x6c>
     908:	88 23       	and	r24, r24
     90a:	11 f0       	breq	.+4      	; 0x910 <__floatsisf+0x48>
     90c:	96 e9       	ldi	r25, 0x96	; 150
     90e:	11 c0       	rjmp	.+34     	; 0x932 <__floatsisf+0x6a>
     910:	77 23       	and	r23, r23
     912:	21 f0       	breq	.+8      	; 0x91c <__floatsisf+0x54>
     914:	9e e8       	ldi	r25, 0x8E	; 142
     916:	87 2f       	mov	r24, r23
     918:	76 2f       	mov	r23, r22
     91a:	05 c0       	rjmp	.+10     	; 0x926 <__floatsisf+0x5e>
     91c:	66 23       	and	r22, r22
     91e:	71 f0       	breq	.+28     	; 0x93c <__floatsisf+0x74>
     920:	96 e8       	ldi	r25, 0x86	; 134
     922:	86 2f       	mov	r24, r22
     924:	70 e0       	ldi	r23, 0x00	; 0
     926:	60 e0       	ldi	r22, 0x00	; 0
     928:	2a f0       	brmi	.+10     	; 0x934 <__floatsisf+0x6c>
     92a:	9a 95       	dec	r25
     92c:	66 0f       	add	r22, r22
     92e:	77 1f       	adc	r23, r23
     930:	88 1f       	adc	r24, r24
     932:	da f7       	brpl	.-10     	; 0x92a <__floatsisf+0x62>
     934:	88 0f       	add	r24, r24
     936:	96 95       	lsr	r25
     938:	87 95       	ror	r24
     93a:	97 f9       	bld	r25, 7
     93c:	08 95       	ret

0000093e <__fp_inf>:
     93e:	97 f9       	bld	r25, 7
     940:	9f 67       	ori	r25, 0x7F	; 127
     942:	80 e8       	ldi	r24, 0x80	; 128
     944:	70 e0       	ldi	r23, 0x00	; 0
     946:	60 e0       	ldi	r22, 0x00	; 0
     948:	08 95       	ret

0000094a <__fp_nan>:
     94a:	9f ef       	ldi	r25, 0xFF	; 255
     94c:	80 ec       	ldi	r24, 0xC0	; 192
     94e:	08 95       	ret

00000950 <__fp_pscA>:
     950:	00 24       	eor	r0, r0
     952:	0a 94       	dec	r0
     954:	16 16       	cp	r1, r22
     956:	17 06       	cpc	r1, r23
     958:	18 06       	cpc	r1, r24
     95a:	09 06       	cpc	r0, r25
     95c:	08 95       	ret

0000095e <__fp_pscB>:
     95e:	00 24       	eor	r0, r0
     960:	0a 94       	dec	r0
     962:	12 16       	cp	r1, r18
     964:	13 06       	cpc	r1, r19
     966:	14 06       	cpc	r1, r20
     968:	05 06       	cpc	r0, r21
     96a:	08 95       	ret

0000096c <__fp_round>:
     96c:	09 2e       	mov	r0, r25
     96e:	03 94       	inc	r0
     970:	00 0c       	add	r0, r0
     972:	11 f4       	brne	.+4      	; 0x978 <__fp_round+0xc>
     974:	88 23       	and	r24, r24
     976:	52 f0       	brmi	.+20     	; 0x98c <__fp_round+0x20>
     978:	bb 0f       	add	r27, r27
     97a:	40 f4       	brcc	.+16     	; 0x98c <__fp_round+0x20>
     97c:	bf 2b       	or	r27, r31
     97e:	11 f4       	brne	.+4      	; 0x984 <__fp_round+0x18>
     980:	60 ff       	sbrs	r22, 0
     982:	04 c0       	rjmp	.+8      	; 0x98c <__fp_round+0x20>
     984:	6f 5f       	subi	r22, 0xFF	; 255
     986:	7f 4f       	sbci	r23, 0xFF	; 255
     988:	8f 4f       	sbci	r24, 0xFF	; 255
     98a:	9f 4f       	sbci	r25, 0xFF	; 255
     98c:	08 95       	ret

0000098e <__fp_split3>:
     98e:	57 fd       	sbrc	r21, 7
     990:	90 58       	subi	r25, 0x80	; 128
     992:	44 0f       	add	r20, r20
     994:	55 1f       	adc	r21, r21
     996:	59 f0       	breq	.+22     	; 0x9ae <__fp_splitA+0x10>
     998:	5f 3f       	cpi	r21, 0xFF	; 255
     99a:	71 f0       	breq	.+28     	; 0x9b8 <__fp_splitA+0x1a>
     99c:	47 95       	ror	r20

0000099e <__fp_splitA>:
     99e:	88 0f       	add	r24, r24
     9a0:	97 fb       	bst	r25, 7
     9a2:	99 1f       	adc	r25, r25
     9a4:	61 f0       	breq	.+24     	; 0x9be <__fp_splitA+0x20>
     9a6:	9f 3f       	cpi	r25, 0xFF	; 255
     9a8:	79 f0       	breq	.+30     	; 0x9c8 <__fp_splitA+0x2a>
     9aa:	87 95       	ror	r24
     9ac:	08 95       	ret
     9ae:	12 16       	cp	r1, r18
     9b0:	13 06       	cpc	r1, r19
     9b2:	14 06       	cpc	r1, r20
     9b4:	55 1f       	adc	r21, r21
     9b6:	f2 cf       	rjmp	.-28     	; 0x99c <__fp_split3+0xe>
     9b8:	46 95       	lsr	r20
     9ba:	f1 df       	rcall	.-30     	; 0x99e <__fp_splitA>
     9bc:	08 c0       	rjmp	.+16     	; 0x9ce <__fp_splitA+0x30>
     9be:	16 16       	cp	r1, r22
     9c0:	17 06       	cpc	r1, r23
     9c2:	18 06       	cpc	r1, r24
     9c4:	99 1f       	adc	r25, r25
     9c6:	f1 cf       	rjmp	.-30     	; 0x9aa <__fp_splitA+0xc>
     9c8:	86 95       	lsr	r24
     9ca:	71 05       	cpc	r23, r1
     9cc:	61 05       	cpc	r22, r1
     9ce:	08 94       	sec
     9d0:	08 95       	ret

000009d2 <__fp_zero>:
     9d2:	e8 94       	clt

000009d4 <__fp_szero>:
     9d4:	bb 27       	eor	r27, r27
     9d6:	66 27       	eor	r22, r22
     9d8:	77 27       	eor	r23, r23
     9da:	cb 01       	movw	r24, r22
     9dc:	97 f9       	bld	r25, 7
     9de:	08 95       	ret

000009e0 <__mulsf3>:
     9e0:	0b d0       	rcall	.+22     	; 0x9f8 <__mulsf3x>
     9e2:	c4 cf       	rjmp	.-120    	; 0x96c <__fp_round>
     9e4:	b5 df       	rcall	.-150    	; 0x950 <__fp_pscA>
     9e6:	28 f0       	brcs	.+10     	; 0x9f2 <__mulsf3+0x12>
     9e8:	ba df       	rcall	.-140    	; 0x95e <__fp_pscB>
     9ea:	18 f0       	brcs	.+6      	; 0x9f2 <__mulsf3+0x12>
     9ec:	95 23       	and	r25, r21
     9ee:	09 f0       	breq	.+2      	; 0x9f2 <__mulsf3+0x12>
     9f0:	a6 cf       	rjmp	.-180    	; 0x93e <__fp_inf>
     9f2:	ab cf       	rjmp	.-170    	; 0x94a <__fp_nan>
     9f4:	11 24       	eor	r1, r1
     9f6:	ee cf       	rjmp	.-36     	; 0x9d4 <__fp_szero>

000009f8 <__mulsf3x>:
     9f8:	ca df       	rcall	.-108    	; 0x98e <__fp_split3>
     9fa:	a0 f3       	brcs	.-24     	; 0x9e4 <__mulsf3+0x4>

000009fc <__mulsf3_pse>:
     9fc:	95 9f       	mul	r25, r21
     9fe:	d1 f3       	breq	.-12     	; 0x9f4 <__mulsf3+0x14>
     a00:	95 0f       	add	r25, r21
     a02:	50 e0       	ldi	r21, 0x00	; 0
     a04:	55 1f       	adc	r21, r21
     a06:	62 9f       	mul	r22, r18
     a08:	f0 01       	movw	r30, r0
     a0a:	72 9f       	mul	r23, r18
     a0c:	bb 27       	eor	r27, r27
     a0e:	f0 0d       	add	r31, r0
     a10:	b1 1d       	adc	r27, r1
     a12:	63 9f       	mul	r22, r19
     a14:	aa 27       	eor	r26, r26
     a16:	f0 0d       	add	r31, r0
     a18:	b1 1d       	adc	r27, r1
     a1a:	aa 1f       	adc	r26, r26
     a1c:	64 9f       	mul	r22, r20
     a1e:	66 27       	eor	r22, r22
     a20:	b0 0d       	add	r27, r0
     a22:	a1 1d       	adc	r26, r1
     a24:	66 1f       	adc	r22, r22
     a26:	82 9f       	mul	r24, r18
     a28:	22 27       	eor	r18, r18
     a2a:	b0 0d       	add	r27, r0
     a2c:	a1 1d       	adc	r26, r1
     a2e:	62 1f       	adc	r22, r18
     a30:	73 9f       	mul	r23, r19
     a32:	b0 0d       	add	r27, r0
     a34:	a1 1d       	adc	r26, r1
     a36:	62 1f       	adc	r22, r18
     a38:	83 9f       	mul	r24, r19
     a3a:	a0 0d       	add	r26, r0
     a3c:	61 1d       	adc	r22, r1
     a3e:	22 1f       	adc	r18, r18
     a40:	74 9f       	mul	r23, r20
     a42:	33 27       	eor	r19, r19
     a44:	a0 0d       	add	r26, r0
     a46:	61 1d       	adc	r22, r1
     a48:	23 1f       	adc	r18, r19
     a4a:	84 9f       	mul	r24, r20
     a4c:	60 0d       	add	r22, r0
     a4e:	21 1d       	adc	r18, r1
     a50:	82 2f       	mov	r24, r18
     a52:	76 2f       	mov	r23, r22
     a54:	6a 2f       	mov	r22, r26
     a56:	11 24       	eor	r1, r1
     a58:	9f 57       	subi	r25, 0x7F	; 127
     a5a:	50 40       	sbci	r21, 0x00	; 0
     a5c:	8a f0       	brmi	.+34     	; 0xa80 <__mulsf3_pse+0x84>
     a5e:	e1 f0       	breq	.+56     	; 0xa98 <__mulsf3_pse+0x9c>
     a60:	88 23       	and	r24, r24
     a62:	4a f0       	brmi	.+18     	; 0xa76 <__mulsf3_pse+0x7a>
     a64:	ee 0f       	add	r30, r30
     a66:	ff 1f       	adc	r31, r31
     a68:	bb 1f       	adc	r27, r27
     a6a:	66 1f       	adc	r22, r22
     a6c:	77 1f       	adc	r23, r23
     a6e:	88 1f       	adc	r24, r24
     a70:	91 50       	subi	r25, 0x01	; 1
     a72:	50 40       	sbci	r21, 0x00	; 0
     a74:	a9 f7       	brne	.-22     	; 0xa60 <__mulsf3_pse+0x64>
     a76:	9e 3f       	cpi	r25, 0xFE	; 254
     a78:	51 05       	cpc	r21, r1
     a7a:	70 f0       	brcs	.+28     	; 0xa98 <__mulsf3_pse+0x9c>
     a7c:	60 cf       	rjmp	.-320    	; 0x93e <__fp_inf>
     a7e:	aa cf       	rjmp	.-172    	; 0x9d4 <__fp_szero>
     a80:	5f 3f       	cpi	r21, 0xFF	; 255
     a82:	ec f3       	brlt	.-6      	; 0xa7e <__mulsf3_pse+0x82>
     a84:	98 3e       	cpi	r25, 0xE8	; 232
     a86:	dc f3       	brlt	.-10     	; 0xa7e <__mulsf3_pse+0x82>
     a88:	86 95       	lsr	r24
     a8a:	77 95       	ror	r23
     a8c:	67 95       	ror	r22
     a8e:	b7 95       	ror	r27
     a90:	f7 95       	ror	r31
     a92:	e7 95       	ror	r30
     a94:	9f 5f       	subi	r25, 0xFF	; 255
     a96:	c1 f7       	brne	.-16     	; 0xa88 <__mulsf3_pse+0x8c>
     a98:	fe 2b       	or	r31, r30
     a9a:	88 0f       	add	r24, r24
     a9c:	91 1d       	adc	r25, r1
     a9e:	96 95       	lsr	r25
     aa0:	87 95       	ror	r24
     aa2:	97 f9       	bld	r25, 7
     aa4:	08 95       	ret

00000aa6 <fgetc>:
     aa6:	cf 93       	push	r28
     aa8:	df 93       	push	r29
     aaa:	ec 01       	movw	r28, r24
     aac:	2b 81       	ldd	r18, Y+3	; 0x03
     aae:	20 ff       	sbrs	r18, 0
     ab0:	33 c0       	rjmp	.+102    	; 0xb18 <fgetc+0x72>
     ab2:	26 ff       	sbrs	r18, 6
     ab4:	0a c0       	rjmp	.+20     	; 0xaca <fgetc+0x24>
     ab6:	2f 7b       	andi	r18, 0xBF	; 191
     ab8:	2b 83       	std	Y+3, r18	; 0x03
     aba:	8e 81       	ldd	r24, Y+6	; 0x06
     abc:	9f 81       	ldd	r25, Y+7	; 0x07
     abe:	01 96       	adiw	r24, 0x01	; 1
     ac0:	9f 83       	std	Y+7, r25	; 0x07
     ac2:	8e 83       	std	Y+6, r24	; 0x06
     ac4:	8a 81       	ldd	r24, Y+2	; 0x02
     ac6:	90 e0       	ldi	r25, 0x00	; 0
     ac8:	29 c0       	rjmp	.+82     	; 0xb1c <fgetc+0x76>
     aca:	22 ff       	sbrs	r18, 2
     acc:	0f c0       	rjmp	.+30     	; 0xaec <fgetc+0x46>
     ace:	e8 81       	ld	r30, Y
     ad0:	f9 81       	ldd	r31, Y+1	; 0x01
     ad2:	80 81       	ld	r24, Z
     ad4:	99 27       	eor	r25, r25
     ad6:	87 fd       	sbrc	r24, 7
     ad8:	90 95       	com	r25
     ada:	00 97       	sbiw	r24, 0x00	; 0
     adc:	19 f4       	brne	.+6      	; 0xae4 <fgetc+0x3e>
     ade:	20 62       	ori	r18, 0x20	; 32
     ae0:	2b 83       	std	Y+3, r18	; 0x03
     ae2:	1a c0       	rjmp	.+52     	; 0xb18 <fgetc+0x72>
     ae4:	31 96       	adiw	r30, 0x01	; 1
     ae6:	f9 83       	std	Y+1, r31	; 0x01
     ae8:	e8 83       	st	Y, r30
     aea:	0e c0       	rjmp	.+28     	; 0xb08 <fgetc+0x62>
     aec:	ea 85       	ldd	r30, Y+10	; 0x0a
     aee:	fb 85       	ldd	r31, Y+11	; 0x0b
     af0:	09 95       	icall
     af2:	97 ff       	sbrs	r25, 7
     af4:	09 c0       	rjmp	.+18     	; 0xb08 <fgetc+0x62>
     af6:	2b 81       	ldd	r18, Y+3	; 0x03
     af8:	01 96       	adiw	r24, 0x01	; 1
     afa:	11 f4       	brne	.+4      	; 0xb00 <fgetc+0x5a>
     afc:	80 e1       	ldi	r24, 0x10	; 16
     afe:	01 c0       	rjmp	.+2      	; 0xb02 <fgetc+0x5c>
     b00:	80 e2       	ldi	r24, 0x20	; 32
     b02:	82 2b       	or	r24, r18
     b04:	8b 83       	std	Y+3, r24	; 0x03
     b06:	08 c0       	rjmp	.+16     	; 0xb18 <fgetc+0x72>
     b08:	2e 81       	ldd	r18, Y+6	; 0x06
     b0a:	3f 81       	ldd	r19, Y+7	; 0x07
     b0c:	2f 5f       	subi	r18, 0xFF	; 255
     b0e:	3f 4f       	sbci	r19, 0xFF	; 255
     b10:	3f 83       	std	Y+7, r19	; 0x07
     b12:	2e 83       	std	Y+6, r18	; 0x06
     b14:	99 27       	eor	r25, r25
     b16:	02 c0       	rjmp	.+4      	; 0xb1c <fgetc+0x76>
     b18:	8f ef       	ldi	r24, 0xFF	; 255
     b1a:	9f ef       	ldi	r25, 0xFF	; 255
     b1c:	df 91       	pop	r29
     b1e:	cf 91       	pop	r28
     b20:	08 95       	ret

00000b22 <printf>:
     b22:	a0 e0       	ldi	r26, 0x00	; 0
     b24:	b0 e0       	ldi	r27, 0x00	; 0
     b26:	e7 e9       	ldi	r30, 0x97	; 151
     b28:	f5 e0       	ldi	r31, 0x05	; 5
     b2a:	0c 94 5a 08 	jmp	0x10b4	; 0x10b4 <__prologue_saves__+0x20>
     b2e:	fe 01       	movw	r30, r28
     b30:	35 96       	adiw	r30, 0x05	; 5
     b32:	61 91       	ld	r22, Z+
     b34:	71 91       	ld	r23, Z+
     b36:	af 01       	movw	r20, r30
     b38:	80 91 4c 02 	lds	r24, 0x024C
     b3c:	90 91 4d 02 	lds	r25, 0x024D
     b40:	0e 94 d2 05 	call	0xba4	; 0xba4 <vfprintf>
     b44:	e2 e0       	ldi	r30, 0x02	; 2
     b46:	0c 94 76 08 	jmp	0x10ec	; 0x10ec <__epilogue_restores__+0x20>

00000b4a <puts>:
     b4a:	0f 93       	push	r16
     b4c:	1f 93       	push	r17
     b4e:	cf 93       	push	r28
     b50:	df 93       	push	r29
     b52:	e0 91 4c 02 	lds	r30, 0x024C
     b56:	f0 91 4d 02 	lds	r31, 0x024D
     b5a:	23 81       	ldd	r18, Z+3	; 0x03
     b5c:	21 ff       	sbrs	r18, 1
     b5e:	1b c0       	rjmp	.+54     	; 0xb96 <puts+0x4c>
     b60:	ec 01       	movw	r28, r24
     b62:	00 e0       	ldi	r16, 0x00	; 0
     b64:	10 e0       	ldi	r17, 0x00	; 0
     b66:	89 91       	ld	r24, Y+
     b68:	60 91 4c 02 	lds	r22, 0x024C
     b6c:	70 91 4d 02 	lds	r23, 0x024D
     b70:	db 01       	movw	r26, r22
     b72:	18 96       	adiw	r26, 0x08	; 8
     b74:	ed 91       	ld	r30, X+
     b76:	fc 91       	ld	r31, X
     b78:	19 97       	sbiw	r26, 0x09	; 9
     b7a:	88 23       	and	r24, r24
     b7c:	31 f0       	breq	.+12     	; 0xb8a <puts+0x40>
     b7e:	09 95       	icall
     b80:	89 2b       	or	r24, r25
     b82:	89 f3       	breq	.-30     	; 0xb66 <puts+0x1c>
     b84:	0f ef       	ldi	r16, 0xFF	; 255
     b86:	1f ef       	ldi	r17, 0xFF	; 255
     b88:	ee cf       	rjmp	.-36     	; 0xb66 <puts+0x1c>
     b8a:	8a e0       	ldi	r24, 0x0A	; 10
     b8c:	09 95       	icall
     b8e:	89 2b       	or	r24, r25
     b90:	11 f4       	brne	.+4      	; 0xb96 <puts+0x4c>
     b92:	c8 01       	movw	r24, r16
     b94:	02 c0       	rjmp	.+4      	; 0xb9a <puts+0x50>
     b96:	8f ef       	ldi	r24, 0xFF	; 255
     b98:	9f ef       	ldi	r25, 0xFF	; 255
     b9a:	df 91       	pop	r29
     b9c:	cf 91       	pop	r28
     b9e:	1f 91       	pop	r17
     ba0:	0f 91       	pop	r16
     ba2:	08 95       	ret

00000ba4 <vfprintf>:
     ba4:	ac e0       	ldi	r26, 0x0C	; 12
     ba6:	b0 e0       	ldi	r27, 0x00	; 0
     ba8:	e8 ed       	ldi	r30, 0xD8	; 216
     baa:	f5 e0       	ldi	r31, 0x05	; 5
     bac:	0c 94 4a 08 	jmp	0x1094	; 0x1094 <__prologue_saves__>
     bb0:	7c 01       	movw	r14, r24
     bb2:	6b 01       	movw	r12, r22
     bb4:	8a 01       	movw	r16, r20
     bb6:	fc 01       	movw	r30, r24
     bb8:	17 82       	std	Z+7, r1	; 0x07
     bba:	16 82       	std	Z+6, r1	; 0x06
     bbc:	83 81       	ldd	r24, Z+3	; 0x03
     bbe:	81 ff       	sbrs	r24, 1
     bc0:	bd c1       	rjmp	.+890    	; 0xf3c <vfprintf+0x398>
     bc2:	ce 01       	movw	r24, r28
     bc4:	01 96       	adiw	r24, 0x01	; 1
     bc6:	4c 01       	movw	r8, r24
     bc8:	f7 01       	movw	r30, r14
     bca:	93 81       	ldd	r25, Z+3	; 0x03
     bcc:	f6 01       	movw	r30, r12
     bce:	93 fd       	sbrc	r25, 3
     bd0:	85 91       	lpm	r24, Z+
     bd2:	93 ff       	sbrs	r25, 3
     bd4:	81 91       	ld	r24, Z+
     bd6:	6f 01       	movw	r12, r30
     bd8:	88 23       	and	r24, r24
     bda:	09 f4       	brne	.+2      	; 0xbde <vfprintf+0x3a>
     bdc:	ab c1       	rjmp	.+854    	; 0xf34 <vfprintf+0x390>
     bde:	85 32       	cpi	r24, 0x25	; 37
     be0:	39 f4       	brne	.+14     	; 0xbf0 <vfprintf+0x4c>
     be2:	93 fd       	sbrc	r25, 3
     be4:	85 91       	lpm	r24, Z+
     be6:	93 ff       	sbrs	r25, 3
     be8:	81 91       	ld	r24, Z+
     bea:	6f 01       	movw	r12, r30
     bec:	85 32       	cpi	r24, 0x25	; 37
     bee:	29 f4       	brne	.+10     	; 0xbfa <vfprintf+0x56>
     bf0:	b7 01       	movw	r22, r14
     bf2:	90 e0       	ldi	r25, 0x00	; 0
     bf4:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     bf8:	e7 cf       	rjmp	.-50     	; 0xbc8 <vfprintf+0x24>
     bfa:	51 2c       	mov	r5, r1
     bfc:	31 2c       	mov	r3, r1
     bfe:	20 e0       	ldi	r18, 0x00	; 0
     c00:	20 32       	cpi	r18, 0x20	; 32
     c02:	a0 f4       	brcc	.+40     	; 0xc2c <vfprintf+0x88>
     c04:	8b 32       	cpi	r24, 0x2B	; 43
     c06:	69 f0       	breq	.+26     	; 0xc22 <vfprintf+0x7e>
     c08:	30 f4       	brcc	.+12     	; 0xc16 <vfprintf+0x72>
     c0a:	80 32       	cpi	r24, 0x20	; 32
     c0c:	59 f0       	breq	.+22     	; 0xc24 <vfprintf+0x80>
     c0e:	83 32       	cpi	r24, 0x23	; 35
     c10:	69 f4       	brne	.+26     	; 0xc2c <vfprintf+0x88>
     c12:	20 61       	ori	r18, 0x10	; 16
     c14:	2c c0       	rjmp	.+88     	; 0xc6e <vfprintf+0xca>
     c16:	8d 32       	cpi	r24, 0x2D	; 45
     c18:	39 f0       	breq	.+14     	; 0xc28 <vfprintf+0x84>
     c1a:	80 33       	cpi	r24, 0x30	; 48
     c1c:	39 f4       	brne	.+14     	; 0xc2c <vfprintf+0x88>
     c1e:	21 60       	ori	r18, 0x01	; 1
     c20:	26 c0       	rjmp	.+76     	; 0xc6e <vfprintf+0xca>
     c22:	22 60       	ori	r18, 0x02	; 2
     c24:	24 60       	ori	r18, 0x04	; 4
     c26:	23 c0       	rjmp	.+70     	; 0xc6e <vfprintf+0xca>
     c28:	28 60       	ori	r18, 0x08	; 8
     c2a:	21 c0       	rjmp	.+66     	; 0xc6e <vfprintf+0xca>
     c2c:	27 fd       	sbrc	r18, 7
     c2e:	27 c0       	rjmp	.+78     	; 0xc7e <vfprintf+0xda>
     c30:	30 ed       	ldi	r19, 0xD0	; 208
     c32:	38 0f       	add	r19, r24
     c34:	3a 30       	cpi	r19, 0x0A	; 10
     c36:	78 f4       	brcc	.+30     	; 0xc56 <vfprintf+0xb2>
     c38:	26 ff       	sbrs	r18, 6
     c3a:	06 c0       	rjmp	.+12     	; 0xc48 <vfprintf+0xa4>
     c3c:	fa e0       	ldi	r31, 0x0A	; 10
     c3e:	5f 9e       	mul	r5, r31
     c40:	30 0d       	add	r19, r0
     c42:	11 24       	eor	r1, r1
     c44:	53 2e       	mov	r5, r19
     c46:	13 c0       	rjmp	.+38     	; 0xc6e <vfprintf+0xca>
     c48:	8a e0       	ldi	r24, 0x0A	; 10
     c4a:	38 9e       	mul	r3, r24
     c4c:	30 0d       	add	r19, r0
     c4e:	11 24       	eor	r1, r1
     c50:	33 2e       	mov	r3, r19
     c52:	20 62       	ori	r18, 0x20	; 32
     c54:	0c c0       	rjmp	.+24     	; 0xc6e <vfprintf+0xca>
     c56:	8e 32       	cpi	r24, 0x2E	; 46
     c58:	21 f4       	brne	.+8      	; 0xc62 <vfprintf+0xbe>
     c5a:	26 fd       	sbrc	r18, 6
     c5c:	6b c1       	rjmp	.+726    	; 0xf34 <vfprintf+0x390>
     c5e:	20 64       	ori	r18, 0x40	; 64
     c60:	06 c0       	rjmp	.+12     	; 0xc6e <vfprintf+0xca>
     c62:	8c 36       	cpi	r24, 0x6C	; 108
     c64:	11 f4       	brne	.+4      	; 0xc6a <vfprintf+0xc6>
     c66:	20 68       	ori	r18, 0x80	; 128
     c68:	02 c0       	rjmp	.+4      	; 0xc6e <vfprintf+0xca>
     c6a:	88 36       	cpi	r24, 0x68	; 104
     c6c:	41 f4       	brne	.+16     	; 0xc7e <vfprintf+0xda>
     c6e:	f6 01       	movw	r30, r12
     c70:	93 fd       	sbrc	r25, 3
     c72:	85 91       	lpm	r24, Z+
     c74:	93 ff       	sbrs	r25, 3
     c76:	81 91       	ld	r24, Z+
     c78:	6f 01       	movw	r12, r30
     c7a:	81 11       	cpse	r24, r1
     c7c:	c1 cf       	rjmp	.-126    	; 0xc00 <vfprintf+0x5c>
     c7e:	98 2f       	mov	r25, r24
     c80:	9f 7d       	andi	r25, 0xDF	; 223
     c82:	95 54       	subi	r25, 0x45	; 69
     c84:	93 30       	cpi	r25, 0x03	; 3
     c86:	28 f4       	brcc	.+10     	; 0xc92 <vfprintf+0xee>
     c88:	0c 5f       	subi	r16, 0xFC	; 252
     c8a:	1f 4f       	sbci	r17, 0xFF	; 255
     c8c:	ff e3       	ldi	r31, 0x3F	; 63
     c8e:	f9 83       	std	Y+1, r31	; 0x01
     c90:	0d c0       	rjmp	.+26     	; 0xcac <vfprintf+0x108>
     c92:	83 36       	cpi	r24, 0x63	; 99
     c94:	31 f0       	breq	.+12     	; 0xca2 <vfprintf+0xfe>
     c96:	83 37       	cpi	r24, 0x73	; 115
     c98:	71 f0       	breq	.+28     	; 0xcb6 <vfprintf+0x112>
     c9a:	83 35       	cpi	r24, 0x53	; 83
     c9c:	09 f0       	breq	.+2      	; 0xca0 <vfprintf+0xfc>
     c9e:	5b c0       	rjmp	.+182    	; 0xd56 <vfprintf+0x1b2>
     ca0:	22 c0       	rjmp	.+68     	; 0xce6 <vfprintf+0x142>
     ca2:	f8 01       	movw	r30, r16
     ca4:	80 81       	ld	r24, Z
     ca6:	89 83       	std	Y+1, r24	; 0x01
     ca8:	0e 5f       	subi	r16, 0xFE	; 254
     caa:	1f 4f       	sbci	r17, 0xFF	; 255
     cac:	44 24       	eor	r4, r4
     cae:	43 94       	inc	r4
     cb0:	51 2c       	mov	r5, r1
     cb2:	54 01       	movw	r10, r8
     cb4:	15 c0       	rjmp	.+42     	; 0xce0 <vfprintf+0x13c>
     cb6:	38 01       	movw	r6, r16
     cb8:	f2 e0       	ldi	r31, 0x02	; 2
     cba:	6f 0e       	add	r6, r31
     cbc:	71 1c       	adc	r7, r1
     cbe:	f8 01       	movw	r30, r16
     cc0:	a0 80       	ld	r10, Z
     cc2:	b1 80       	ldd	r11, Z+1	; 0x01
     cc4:	26 ff       	sbrs	r18, 6
     cc6:	03 c0       	rjmp	.+6      	; 0xcce <vfprintf+0x12a>
     cc8:	65 2d       	mov	r22, r5
     cca:	70 e0       	ldi	r23, 0x00	; 0
     ccc:	02 c0       	rjmp	.+4      	; 0xcd2 <vfprintf+0x12e>
     cce:	6f ef       	ldi	r22, 0xFF	; 255
     cd0:	7f ef       	ldi	r23, 0xFF	; 255
     cd2:	c5 01       	movw	r24, r10
     cd4:	2c 87       	std	Y+12, r18	; 0x0c
     cd6:	0e 94 af 07 	call	0xf5e	; 0xf5e <strnlen>
     cda:	2c 01       	movw	r4, r24
     cdc:	83 01       	movw	r16, r6
     cde:	2c 85       	ldd	r18, Y+12	; 0x0c
     ce0:	2f 77       	andi	r18, 0x7F	; 127
     ce2:	22 2e       	mov	r2, r18
     ce4:	17 c0       	rjmp	.+46     	; 0xd14 <vfprintf+0x170>
     ce6:	38 01       	movw	r6, r16
     ce8:	f2 e0       	ldi	r31, 0x02	; 2
     cea:	6f 0e       	add	r6, r31
     cec:	71 1c       	adc	r7, r1
     cee:	f8 01       	movw	r30, r16
     cf0:	a0 80       	ld	r10, Z
     cf2:	b1 80       	ldd	r11, Z+1	; 0x01
     cf4:	26 ff       	sbrs	r18, 6
     cf6:	03 c0       	rjmp	.+6      	; 0xcfe <vfprintf+0x15a>
     cf8:	65 2d       	mov	r22, r5
     cfa:	70 e0       	ldi	r23, 0x00	; 0
     cfc:	02 c0       	rjmp	.+4      	; 0xd02 <vfprintf+0x15e>
     cfe:	6f ef       	ldi	r22, 0xFF	; 255
     d00:	7f ef       	ldi	r23, 0xFF	; 255
     d02:	c5 01       	movw	r24, r10
     d04:	2c 87       	std	Y+12, r18	; 0x0c
     d06:	0e 94 a4 07 	call	0xf48	; 0xf48 <strnlen_P>
     d0a:	2c 01       	movw	r4, r24
     d0c:	2c 85       	ldd	r18, Y+12	; 0x0c
     d0e:	20 68       	ori	r18, 0x80	; 128
     d10:	22 2e       	mov	r2, r18
     d12:	83 01       	movw	r16, r6
     d14:	23 fc       	sbrc	r2, 3
     d16:	1b c0       	rjmp	.+54     	; 0xd4e <vfprintf+0x1aa>
     d18:	83 2d       	mov	r24, r3
     d1a:	90 e0       	ldi	r25, 0x00	; 0
     d1c:	48 16       	cp	r4, r24
     d1e:	59 06       	cpc	r5, r25
     d20:	b0 f4       	brcc	.+44     	; 0xd4e <vfprintf+0x1aa>
     d22:	b7 01       	movw	r22, r14
     d24:	80 e2       	ldi	r24, 0x20	; 32
     d26:	90 e0       	ldi	r25, 0x00	; 0
     d28:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     d2c:	3a 94       	dec	r3
     d2e:	f4 cf       	rjmp	.-24     	; 0xd18 <vfprintf+0x174>
     d30:	f5 01       	movw	r30, r10
     d32:	27 fc       	sbrc	r2, 7
     d34:	85 91       	lpm	r24, Z+
     d36:	27 fe       	sbrs	r2, 7
     d38:	81 91       	ld	r24, Z+
     d3a:	5f 01       	movw	r10, r30
     d3c:	b7 01       	movw	r22, r14
     d3e:	90 e0       	ldi	r25, 0x00	; 0
     d40:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     d44:	31 10       	cpse	r3, r1
     d46:	3a 94       	dec	r3
     d48:	f1 e0       	ldi	r31, 0x01	; 1
     d4a:	4f 1a       	sub	r4, r31
     d4c:	51 08       	sbc	r5, r1
     d4e:	41 14       	cp	r4, r1
     d50:	51 04       	cpc	r5, r1
     d52:	71 f7       	brne	.-36     	; 0xd30 <vfprintf+0x18c>
     d54:	e5 c0       	rjmp	.+458    	; 0xf20 <vfprintf+0x37c>
     d56:	84 36       	cpi	r24, 0x64	; 100
     d58:	11 f0       	breq	.+4      	; 0xd5e <vfprintf+0x1ba>
     d5a:	89 36       	cpi	r24, 0x69	; 105
     d5c:	39 f5       	brne	.+78     	; 0xdac <vfprintf+0x208>
     d5e:	f8 01       	movw	r30, r16
     d60:	27 ff       	sbrs	r18, 7
     d62:	07 c0       	rjmp	.+14     	; 0xd72 <vfprintf+0x1ce>
     d64:	60 81       	ld	r22, Z
     d66:	71 81       	ldd	r23, Z+1	; 0x01
     d68:	82 81       	ldd	r24, Z+2	; 0x02
     d6a:	93 81       	ldd	r25, Z+3	; 0x03
     d6c:	0c 5f       	subi	r16, 0xFC	; 252
     d6e:	1f 4f       	sbci	r17, 0xFF	; 255
     d70:	08 c0       	rjmp	.+16     	; 0xd82 <vfprintf+0x1de>
     d72:	60 81       	ld	r22, Z
     d74:	71 81       	ldd	r23, Z+1	; 0x01
     d76:	88 27       	eor	r24, r24
     d78:	77 fd       	sbrc	r23, 7
     d7a:	80 95       	com	r24
     d7c:	98 2f       	mov	r25, r24
     d7e:	0e 5f       	subi	r16, 0xFE	; 254
     d80:	1f 4f       	sbci	r17, 0xFF	; 255
     d82:	2f 76       	andi	r18, 0x6F	; 111
     d84:	b2 2e       	mov	r11, r18
     d86:	97 ff       	sbrs	r25, 7
     d88:	09 c0       	rjmp	.+18     	; 0xd9c <vfprintf+0x1f8>
     d8a:	90 95       	com	r25
     d8c:	80 95       	com	r24
     d8e:	70 95       	com	r23
     d90:	61 95       	neg	r22
     d92:	7f 4f       	sbci	r23, 0xFF	; 255
     d94:	8f 4f       	sbci	r24, 0xFF	; 255
     d96:	9f 4f       	sbci	r25, 0xFF	; 255
     d98:	20 68       	ori	r18, 0x80	; 128
     d9a:	b2 2e       	mov	r11, r18
     d9c:	2a e0       	ldi	r18, 0x0A	; 10
     d9e:	30 e0       	ldi	r19, 0x00	; 0
     da0:	a4 01       	movw	r20, r8
     da2:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__ultoa_invert>
     da6:	a8 2e       	mov	r10, r24
     da8:	a8 18       	sub	r10, r8
     daa:	44 c0       	rjmp	.+136    	; 0xe34 <vfprintf+0x290>
     dac:	85 37       	cpi	r24, 0x75	; 117
     dae:	29 f4       	brne	.+10     	; 0xdba <vfprintf+0x216>
     db0:	2f 7e       	andi	r18, 0xEF	; 239
     db2:	b2 2e       	mov	r11, r18
     db4:	2a e0       	ldi	r18, 0x0A	; 10
     db6:	30 e0       	ldi	r19, 0x00	; 0
     db8:	25 c0       	rjmp	.+74     	; 0xe04 <vfprintf+0x260>
     dba:	f2 2f       	mov	r31, r18
     dbc:	f9 7f       	andi	r31, 0xF9	; 249
     dbe:	bf 2e       	mov	r11, r31
     dc0:	8f 36       	cpi	r24, 0x6F	; 111
     dc2:	c1 f0       	breq	.+48     	; 0xdf4 <vfprintf+0x250>
     dc4:	18 f4       	brcc	.+6      	; 0xdcc <vfprintf+0x228>
     dc6:	88 35       	cpi	r24, 0x58	; 88
     dc8:	79 f0       	breq	.+30     	; 0xde8 <vfprintf+0x244>
     dca:	b4 c0       	rjmp	.+360    	; 0xf34 <vfprintf+0x390>
     dcc:	80 37       	cpi	r24, 0x70	; 112
     dce:	19 f0       	breq	.+6      	; 0xdd6 <vfprintf+0x232>
     dd0:	88 37       	cpi	r24, 0x78	; 120
     dd2:	21 f0       	breq	.+8      	; 0xddc <vfprintf+0x238>
     dd4:	af c0       	rjmp	.+350    	; 0xf34 <vfprintf+0x390>
     dd6:	2f 2f       	mov	r18, r31
     dd8:	20 61       	ori	r18, 0x10	; 16
     dda:	b2 2e       	mov	r11, r18
     ddc:	b4 fe       	sbrs	r11, 4
     dde:	0d c0       	rjmp	.+26     	; 0xdfa <vfprintf+0x256>
     de0:	8b 2d       	mov	r24, r11
     de2:	84 60       	ori	r24, 0x04	; 4
     de4:	b8 2e       	mov	r11, r24
     de6:	09 c0       	rjmp	.+18     	; 0xdfa <vfprintf+0x256>
     de8:	24 ff       	sbrs	r18, 4
     dea:	0a c0       	rjmp	.+20     	; 0xe00 <vfprintf+0x25c>
     dec:	9f 2f       	mov	r25, r31
     dee:	96 60       	ori	r25, 0x06	; 6
     df0:	b9 2e       	mov	r11, r25
     df2:	06 c0       	rjmp	.+12     	; 0xe00 <vfprintf+0x25c>
     df4:	28 e0       	ldi	r18, 0x08	; 8
     df6:	30 e0       	ldi	r19, 0x00	; 0
     df8:	05 c0       	rjmp	.+10     	; 0xe04 <vfprintf+0x260>
     dfa:	20 e1       	ldi	r18, 0x10	; 16
     dfc:	30 e0       	ldi	r19, 0x00	; 0
     dfe:	02 c0       	rjmp	.+4      	; 0xe04 <vfprintf+0x260>
     e00:	20 e1       	ldi	r18, 0x10	; 16
     e02:	32 e0       	ldi	r19, 0x02	; 2
     e04:	f8 01       	movw	r30, r16
     e06:	b7 fe       	sbrs	r11, 7
     e08:	07 c0       	rjmp	.+14     	; 0xe18 <vfprintf+0x274>
     e0a:	60 81       	ld	r22, Z
     e0c:	71 81       	ldd	r23, Z+1	; 0x01
     e0e:	82 81       	ldd	r24, Z+2	; 0x02
     e10:	93 81       	ldd	r25, Z+3	; 0x03
     e12:	0c 5f       	subi	r16, 0xFC	; 252
     e14:	1f 4f       	sbci	r17, 0xFF	; 255
     e16:	06 c0       	rjmp	.+12     	; 0xe24 <vfprintf+0x280>
     e18:	60 81       	ld	r22, Z
     e1a:	71 81       	ldd	r23, Z+1	; 0x01
     e1c:	80 e0       	ldi	r24, 0x00	; 0
     e1e:	90 e0       	ldi	r25, 0x00	; 0
     e20:	0e 5f       	subi	r16, 0xFE	; 254
     e22:	1f 4f       	sbci	r17, 0xFF	; 255
     e24:	a4 01       	movw	r20, r8
     e26:	0e 94 ec 07 	call	0xfd8	; 0xfd8 <__ultoa_invert>
     e2a:	a8 2e       	mov	r10, r24
     e2c:	a8 18       	sub	r10, r8
     e2e:	fb 2d       	mov	r31, r11
     e30:	ff 77       	andi	r31, 0x7F	; 127
     e32:	bf 2e       	mov	r11, r31
     e34:	b6 fe       	sbrs	r11, 6
     e36:	0b c0       	rjmp	.+22     	; 0xe4e <vfprintf+0x2aa>
     e38:	2b 2d       	mov	r18, r11
     e3a:	2e 7f       	andi	r18, 0xFE	; 254
     e3c:	a5 14       	cp	r10, r5
     e3e:	50 f4       	brcc	.+20     	; 0xe54 <vfprintf+0x2b0>
     e40:	b4 fe       	sbrs	r11, 4
     e42:	0a c0       	rjmp	.+20     	; 0xe58 <vfprintf+0x2b4>
     e44:	b2 fc       	sbrc	r11, 2
     e46:	08 c0       	rjmp	.+16     	; 0xe58 <vfprintf+0x2b4>
     e48:	2b 2d       	mov	r18, r11
     e4a:	2e 7e       	andi	r18, 0xEE	; 238
     e4c:	05 c0       	rjmp	.+10     	; 0xe58 <vfprintf+0x2b4>
     e4e:	7a 2c       	mov	r7, r10
     e50:	2b 2d       	mov	r18, r11
     e52:	03 c0       	rjmp	.+6      	; 0xe5a <vfprintf+0x2b6>
     e54:	7a 2c       	mov	r7, r10
     e56:	01 c0       	rjmp	.+2      	; 0xe5a <vfprintf+0x2b6>
     e58:	75 2c       	mov	r7, r5
     e5a:	24 ff       	sbrs	r18, 4
     e5c:	0d c0       	rjmp	.+26     	; 0xe78 <vfprintf+0x2d4>
     e5e:	fe 01       	movw	r30, r28
     e60:	ea 0d       	add	r30, r10
     e62:	f1 1d       	adc	r31, r1
     e64:	80 81       	ld	r24, Z
     e66:	80 33       	cpi	r24, 0x30	; 48
     e68:	11 f4       	brne	.+4      	; 0xe6e <vfprintf+0x2ca>
     e6a:	29 7e       	andi	r18, 0xE9	; 233
     e6c:	09 c0       	rjmp	.+18     	; 0xe80 <vfprintf+0x2dc>
     e6e:	22 ff       	sbrs	r18, 2
     e70:	06 c0       	rjmp	.+12     	; 0xe7e <vfprintf+0x2da>
     e72:	73 94       	inc	r7
     e74:	73 94       	inc	r7
     e76:	04 c0       	rjmp	.+8      	; 0xe80 <vfprintf+0x2dc>
     e78:	82 2f       	mov	r24, r18
     e7a:	86 78       	andi	r24, 0x86	; 134
     e7c:	09 f0       	breq	.+2      	; 0xe80 <vfprintf+0x2dc>
     e7e:	73 94       	inc	r7
     e80:	23 fd       	sbrc	r18, 3
     e82:	13 c0       	rjmp	.+38     	; 0xeaa <vfprintf+0x306>
     e84:	20 ff       	sbrs	r18, 0
     e86:	06 c0       	rjmp	.+12     	; 0xe94 <vfprintf+0x2f0>
     e88:	5a 2c       	mov	r5, r10
     e8a:	73 14       	cp	r7, r3
     e8c:	18 f4       	brcc	.+6      	; 0xe94 <vfprintf+0x2f0>
     e8e:	53 0c       	add	r5, r3
     e90:	57 18       	sub	r5, r7
     e92:	73 2c       	mov	r7, r3
     e94:	73 14       	cp	r7, r3
     e96:	68 f4       	brcc	.+26     	; 0xeb2 <vfprintf+0x30e>
     e98:	b7 01       	movw	r22, r14
     e9a:	80 e2       	ldi	r24, 0x20	; 32
     e9c:	90 e0       	ldi	r25, 0x00	; 0
     e9e:	2c 87       	std	Y+12, r18	; 0x0c
     ea0:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     ea4:	73 94       	inc	r7
     ea6:	2c 85       	ldd	r18, Y+12	; 0x0c
     ea8:	f5 cf       	rjmp	.-22     	; 0xe94 <vfprintf+0x2f0>
     eaa:	73 14       	cp	r7, r3
     eac:	10 f4       	brcc	.+4      	; 0xeb2 <vfprintf+0x30e>
     eae:	37 18       	sub	r3, r7
     eb0:	01 c0       	rjmp	.+2      	; 0xeb4 <vfprintf+0x310>
     eb2:	31 2c       	mov	r3, r1
     eb4:	24 ff       	sbrs	r18, 4
     eb6:	12 c0       	rjmp	.+36     	; 0xedc <vfprintf+0x338>
     eb8:	b7 01       	movw	r22, r14
     eba:	80 e3       	ldi	r24, 0x30	; 48
     ebc:	90 e0       	ldi	r25, 0x00	; 0
     ebe:	2c 87       	std	Y+12, r18	; 0x0c
     ec0:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     ec4:	2c 85       	ldd	r18, Y+12	; 0x0c
     ec6:	22 ff       	sbrs	r18, 2
     ec8:	17 c0       	rjmp	.+46     	; 0xef8 <vfprintf+0x354>
     eca:	21 ff       	sbrs	r18, 1
     ecc:	03 c0       	rjmp	.+6      	; 0xed4 <vfprintf+0x330>
     ece:	88 e5       	ldi	r24, 0x58	; 88
     ed0:	90 e0       	ldi	r25, 0x00	; 0
     ed2:	02 c0       	rjmp	.+4      	; 0xed8 <vfprintf+0x334>
     ed4:	88 e7       	ldi	r24, 0x78	; 120
     ed6:	90 e0       	ldi	r25, 0x00	; 0
     ed8:	b7 01       	movw	r22, r14
     eda:	0c c0       	rjmp	.+24     	; 0xef4 <vfprintf+0x350>
     edc:	82 2f       	mov	r24, r18
     ede:	86 78       	andi	r24, 0x86	; 134
     ee0:	59 f0       	breq	.+22     	; 0xef8 <vfprintf+0x354>
     ee2:	21 fd       	sbrc	r18, 1
     ee4:	02 c0       	rjmp	.+4      	; 0xeea <vfprintf+0x346>
     ee6:	80 e2       	ldi	r24, 0x20	; 32
     ee8:	01 c0       	rjmp	.+2      	; 0xeec <vfprintf+0x348>
     eea:	8b e2       	ldi	r24, 0x2B	; 43
     eec:	27 fd       	sbrc	r18, 7
     eee:	8d e2       	ldi	r24, 0x2D	; 45
     ef0:	b7 01       	movw	r22, r14
     ef2:	90 e0       	ldi	r25, 0x00	; 0
     ef4:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     ef8:	a5 14       	cp	r10, r5
     efa:	38 f4       	brcc	.+14     	; 0xf0a <vfprintf+0x366>
     efc:	b7 01       	movw	r22, r14
     efe:	80 e3       	ldi	r24, 0x30	; 48
     f00:	90 e0       	ldi	r25, 0x00	; 0
     f02:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     f06:	5a 94       	dec	r5
     f08:	f7 cf       	rjmp	.-18     	; 0xef8 <vfprintf+0x354>
     f0a:	aa 94       	dec	r10
     f0c:	f4 01       	movw	r30, r8
     f0e:	ea 0d       	add	r30, r10
     f10:	f1 1d       	adc	r31, r1
     f12:	80 81       	ld	r24, Z
     f14:	b7 01       	movw	r22, r14
     f16:	90 e0       	ldi	r25, 0x00	; 0
     f18:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     f1c:	a1 10       	cpse	r10, r1
     f1e:	f5 cf       	rjmp	.-22     	; 0xf0a <vfprintf+0x366>
     f20:	33 20       	and	r3, r3
     f22:	09 f4       	brne	.+2      	; 0xf26 <vfprintf+0x382>
     f24:	51 ce       	rjmp	.-862    	; 0xbc8 <vfprintf+0x24>
     f26:	b7 01       	movw	r22, r14
     f28:	80 e2       	ldi	r24, 0x20	; 32
     f2a:	90 e0       	ldi	r25, 0x00	; 0
     f2c:	0e 94 ba 07 	call	0xf74	; 0xf74 <fputc>
     f30:	3a 94       	dec	r3
     f32:	f6 cf       	rjmp	.-20     	; 0xf20 <vfprintf+0x37c>
     f34:	f7 01       	movw	r30, r14
     f36:	86 81       	ldd	r24, Z+6	; 0x06
     f38:	97 81       	ldd	r25, Z+7	; 0x07
     f3a:	02 c0       	rjmp	.+4      	; 0xf40 <vfprintf+0x39c>
     f3c:	8f ef       	ldi	r24, 0xFF	; 255
     f3e:	9f ef       	ldi	r25, 0xFF	; 255
     f40:	2c 96       	adiw	r28, 0x0c	; 12
     f42:	e2 e1       	ldi	r30, 0x12	; 18
     f44:	0c 94 66 08 	jmp	0x10cc	; 0x10cc <__epilogue_restores__>

00000f48 <strnlen_P>:
     f48:	fc 01       	movw	r30, r24
     f4a:	05 90       	lpm	r0, Z+
     f4c:	61 50       	subi	r22, 0x01	; 1
     f4e:	70 40       	sbci	r23, 0x00	; 0
     f50:	01 10       	cpse	r0, r1
     f52:	d8 f7       	brcc	.-10     	; 0xf4a <strnlen_P+0x2>
     f54:	80 95       	com	r24
     f56:	90 95       	com	r25
     f58:	8e 0f       	add	r24, r30
     f5a:	9f 1f       	adc	r25, r31
     f5c:	08 95       	ret

00000f5e <strnlen>:
     f5e:	fc 01       	movw	r30, r24
     f60:	61 50       	subi	r22, 0x01	; 1
     f62:	70 40       	sbci	r23, 0x00	; 0
     f64:	01 90       	ld	r0, Z+
     f66:	01 10       	cpse	r0, r1
     f68:	d8 f7       	brcc	.-10     	; 0xf60 <strnlen+0x2>
     f6a:	80 95       	com	r24
     f6c:	90 95       	com	r25
     f6e:	8e 0f       	add	r24, r30
     f70:	9f 1f       	adc	r25, r31
     f72:	08 95       	ret

00000f74 <fputc>:
     f74:	0f 93       	push	r16
     f76:	1f 93       	push	r17
     f78:	cf 93       	push	r28
     f7a:	df 93       	push	r29
     f7c:	18 2f       	mov	r17, r24
     f7e:	09 2f       	mov	r16, r25
     f80:	eb 01       	movw	r28, r22
     f82:	8b 81       	ldd	r24, Y+3	; 0x03
     f84:	81 fd       	sbrc	r24, 1
     f86:	03 c0       	rjmp	.+6      	; 0xf8e <fputc+0x1a>
     f88:	8f ef       	ldi	r24, 0xFF	; 255
     f8a:	9f ef       	ldi	r25, 0xFF	; 255
     f8c:	20 c0       	rjmp	.+64     	; 0xfce <fputc+0x5a>
     f8e:	82 ff       	sbrs	r24, 2
     f90:	10 c0       	rjmp	.+32     	; 0xfb2 <fputc+0x3e>
     f92:	4e 81       	ldd	r20, Y+6	; 0x06
     f94:	5f 81       	ldd	r21, Y+7	; 0x07
     f96:	2c 81       	ldd	r18, Y+4	; 0x04
     f98:	3d 81       	ldd	r19, Y+5	; 0x05
     f9a:	42 17       	cp	r20, r18
     f9c:	53 07       	cpc	r21, r19
     f9e:	7c f4       	brge	.+30     	; 0xfbe <fputc+0x4a>
     fa0:	e8 81       	ld	r30, Y
     fa2:	f9 81       	ldd	r31, Y+1	; 0x01
     fa4:	9f 01       	movw	r18, r30
     fa6:	2f 5f       	subi	r18, 0xFF	; 255
     fa8:	3f 4f       	sbci	r19, 0xFF	; 255
     faa:	39 83       	std	Y+1, r19	; 0x01
     fac:	28 83       	st	Y, r18
     fae:	10 83       	st	Z, r17
     fb0:	06 c0       	rjmp	.+12     	; 0xfbe <fputc+0x4a>
     fb2:	e8 85       	ldd	r30, Y+8	; 0x08
     fb4:	f9 85       	ldd	r31, Y+9	; 0x09
     fb6:	81 2f       	mov	r24, r17
     fb8:	09 95       	icall
     fba:	89 2b       	or	r24, r25
     fbc:	29 f7       	brne	.-54     	; 0xf88 <fputc+0x14>
     fbe:	2e 81       	ldd	r18, Y+6	; 0x06
     fc0:	3f 81       	ldd	r19, Y+7	; 0x07
     fc2:	2f 5f       	subi	r18, 0xFF	; 255
     fc4:	3f 4f       	sbci	r19, 0xFF	; 255
     fc6:	3f 83       	std	Y+7, r19	; 0x07
     fc8:	2e 83       	std	Y+6, r18	; 0x06
     fca:	81 2f       	mov	r24, r17
     fcc:	90 2f       	mov	r25, r16
     fce:	df 91       	pop	r29
     fd0:	cf 91       	pop	r28
     fd2:	1f 91       	pop	r17
     fd4:	0f 91       	pop	r16
     fd6:	08 95       	ret

00000fd8 <__ultoa_invert>:
     fd8:	fa 01       	movw	r30, r20
     fda:	aa 27       	eor	r26, r26
     fdc:	28 30       	cpi	r18, 0x08	; 8
     fde:	51 f1       	breq	.+84     	; 0x1034 <__ultoa_invert+0x5c>
     fe0:	20 31       	cpi	r18, 0x10	; 16
     fe2:	81 f1       	breq	.+96     	; 0x1044 <__ultoa_invert+0x6c>
     fe4:	e8 94       	clt
     fe6:	6f 93       	push	r22
     fe8:	6e 7f       	andi	r22, 0xFE	; 254
     fea:	6e 5f       	subi	r22, 0xFE	; 254
     fec:	7f 4f       	sbci	r23, 0xFF	; 255
     fee:	8f 4f       	sbci	r24, 0xFF	; 255
     ff0:	9f 4f       	sbci	r25, 0xFF	; 255
     ff2:	af 4f       	sbci	r26, 0xFF	; 255
     ff4:	b1 e0       	ldi	r27, 0x01	; 1
     ff6:	3e d0       	rcall	.+124    	; 0x1074 <__ultoa_invert+0x9c>
     ff8:	b4 e0       	ldi	r27, 0x04	; 4
     ffa:	3c d0       	rcall	.+120    	; 0x1074 <__ultoa_invert+0x9c>
     ffc:	67 0f       	add	r22, r23
     ffe:	78 1f       	adc	r23, r24
    1000:	89 1f       	adc	r24, r25
    1002:	9a 1f       	adc	r25, r26
    1004:	a1 1d       	adc	r26, r1
    1006:	68 0f       	add	r22, r24
    1008:	79 1f       	adc	r23, r25
    100a:	8a 1f       	adc	r24, r26
    100c:	91 1d       	adc	r25, r1
    100e:	a1 1d       	adc	r26, r1
    1010:	6a 0f       	add	r22, r26
    1012:	71 1d       	adc	r23, r1
    1014:	81 1d       	adc	r24, r1
    1016:	91 1d       	adc	r25, r1
    1018:	a1 1d       	adc	r26, r1
    101a:	20 d0       	rcall	.+64     	; 0x105c <__ultoa_invert+0x84>
    101c:	09 f4       	brne	.+2      	; 0x1020 <__ultoa_invert+0x48>
    101e:	68 94       	set
    1020:	3f 91       	pop	r19
    1022:	2a e0       	ldi	r18, 0x0A	; 10
    1024:	26 9f       	mul	r18, r22
    1026:	11 24       	eor	r1, r1
    1028:	30 19       	sub	r19, r0
    102a:	30 5d       	subi	r19, 0xD0	; 208
    102c:	31 93       	st	Z+, r19
    102e:	de f6       	brtc	.-74     	; 0xfe6 <__ultoa_invert+0xe>
    1030:	cf 01       	movw	r24, r30
    1032:	08 95       	ret
    1034:	46 2f       	mov	r20, r22
    1036:	47 70       	andi	r20, 0x07	; 7
    1038:	40 5d       	subi	r20, 0xD0	; 208
    103a:	41 93       	st	Z+, r20
    103c:	b3 e0       	ldi	r27, 0x03	; 3
    103e:	0f d0       	rcall	.+30     	; 0x105e <__ultoa_invert+0x86>
    1040:	c9 f7       	brne	.-14     	; 0x1034 <__ultoa_invert+0x5c>
    1042:	f6 cf       	rjmp	.-20     	; 0x1030 <__ultoa_invert+0x58>
    1044:	46 2f       	mov	r20, r22
    1046:	4f 70       	andi	r20, 0x0F	; 15
    1048:	40 5d       	subi	r20, 0xD0	; 208
    104a:	4a 33       	cpi	r20, 0x3A	; 58
    104c:	18 f0       	brcs	.+6      	; 0x1054 <__ultoa_invert+0x7c>
    104e:	49 5d       	subi	r20, 0xD9	; 217
    1050:	31 fd       	sbrc	r19, 1
    1052:	40 52       	subi	r20, 0x20	; 32
    1054:	41 93       	st	Z+, r20
    1056:	02 d0       	rcall	.+4      	; 0x105c <__ultoa_invert+0x84>
    1058:	a9 f7       	brne	.-22     	; 0x1044 <__ultoa_invert+0x6c>
    105a:	ea cf       	rjmp	.-44     	; 0x1030 <__ultoa_invert+0x58>
    105c:	b4 e0       	ldi	r27, 0x04	; 4
    105e:	a6 95       	lsr	r26
    1060:	97 95       	ror	r25
    1062:	87 95       	ror	r24
    1064:	77 95       	ror	r23
    1066:	67 95       	ror	r22
    1068:	ba 95       	dec	r27
    106a:	c9 f7       	brne	.-14     	; 0x105e <__ultoa_invert+0x86>
    106c:	00 97       	sbiw	r24, 0x00	; 0
    106e:	61 05       	cpc	r22, r1
    1070:	71 05       	cpc	r23, r1
    1072:	08 95       	ret
    1074:	9b 01       	movw	r18, r22
    1076:	ac 01       	movw	r20, r24
    1078:	0a 2e       	mov	r0, r26
    107a:	06 94       	lsr	r0
    107c:	57 95       	ror	r21
    107e:	47 95       	ror	r20
    1080:	37 95       	ror	r19
    1082:	27 95       	ror	r18
    1084:	ba 95       	dec	r27
    1086:	c9 f7       	brne	.-14     	; 0x107a <__ultoa_invert+0xa2>
    1088:	62 0f       	add	r22, r18
    108a:	73 1f       	adc	r23, r19
    108c:	84 1f       	adc	r24, r20
    108e:	95 1f       	adc	r25, r21
    1090:	a0 1d       	adc	r26, r0
    1092:	08 95       	ret

00001094 <__prologue_saves__>:
    1094:	2f 92       	push	r2
    1096:	3f 92       	push	r3
    1098:	4f 92       	push	r4
    109a:	5f 92       	push	r5
    109c:	6f 92       	push	r6
    109e:	7f 92       	push	r7
    10a0:	8f 92       	push	r8
    10a2:	9f 92       	push	r9
    10a4:	af 92       	push	r10
    10a6:	bf 92       	push	r11
    10a8:	cf 92       	push	r12
    10aa:	df 92       	push	r13
    10ac:	ef 92       	push	r14
    10ae:	ff 92       	push	r15
    10b0:	0f 93       	push	r16
    10b2:	1f 93       	push	r17
    10b4:	cf 93       	push	r28
    10b6:	df 93       	push	r29
    10b8:	cd b7       	in	r28, 0x3d	; 61
    10ba:	de b7       	in	r29, 0x3e	; 62
    10bc:	ca 1b       	sub	r28, r26
    10be:	db 0b       	sbc	r29, r27
    10c0:	0f b6       	in	r0, 0x3f	; 63
    10c2:	f8 94       	cli
    10c4:	de bf       	out	0x3e, r29	; 62
    10c6:	0f be       	out	0x3f, r0	; 63
    10c8:	cd bf       	out	0x3d, r28	; 61
    10ca:	09 94       	ijmp

000010cc <__epilogue_restores__>:
    10cc:	2a 88       	ldd	r2, Y+18	; 0x12
    10ce:	39 88       	ldd	r3, Y+17	; 0x11
    10d0:	48 88       	ldd	r4, Y+16	; 0x10
    10d2:	5f 84       	ldd	r5, Y+15	; 0x0f
    10d4:	6e 84       	ldd	r6, Y+14	; 0x0e
    10d6:	7d 84       	ldd	r7, Y+13	; 0x0d
    10d8:	8c 84       	ldd	r8, Y+12	; 0x0c
    10da:	9b 84       	ldd	r9, Y+11	; 0x0b
    10dc:	aa 84       	ldd	r10, Y+10	; 0x0a
    10de:	b9 84       	ldd	r11, Y+9	; 0x09
    10e0:	c8 84       	ldd	r12, Y+8	; 0x08
    10e2:	df 80       	ldd	r13, Y+7	; 0x07
    10e4:	ee 80       	ldd	r14, Y+6	; 0x06
    10e6:	fd 80       	ldd	r15, Y+5	; 0x05
    10e8:	0c 81       	ldd	r16, Y+4	; 0x04
    10ea:	1b 81       	ldd	r17, Y+3	; 0x03
    10ec:	aa 81       	ldd	r26, Y+2	; 0x02
    10ee:	b9 81       	ldd	r27, Y+1	; 0x01
    10f0:	ce 0f       	add	r28, r30
    10f2:	d1 1d       	adc	r29, r1
    10f4:	0f b6       	in	r0, 0x3f	; 63
    10f6:	f8 94       	cli
    10f8:	de bf       	out	0x3e, r29	; 62
    10fa:	0f be       	out	0x3f, r0	; 63
    10fc:	cd bf       	out	0x3d, r28	; 61
    10fe:	ed 01       	movw	r28, r26
    1100:	08 95       	ret

00001102 <_exit>:
    1102:	f8 94       	cli

00001104 <__stop_program>:
    1104:	ff cf       	rjmp	.-2      	; 0x1104 <__stop_program>
