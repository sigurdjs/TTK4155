
Byggern.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         0000017a  00000000  00000000  00000054  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .comment      00000030  00000000  00000000  000001ce  2**0
                  CONTENTS, READONLY
  2 .debug_aranges 00000068  00000000  00000000  000001fe  2**0
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_info   00000496  00000000  00000000  00000266  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_abbrev 000002d8  00000000  00000000  000006fc  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_line   0000028e  00000000  00000000  000009d4  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_frame  000000a0  00000000  00000000  00000c64  2**2
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_str    00000210  00000000  00000000  00000d04  2**0
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_loc    000000c2  00000000  00000000  00000f14  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_ranges 00000048  00000000  00000000  00000fd6  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
   0:	0c 94 38 00 	jmp	0x70	; 0x70 <__ctors_end>
   4:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   8:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
   c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  10:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  14:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  18:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  1c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  20:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  24:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  28:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  2c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  30:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  34:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  38:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  3c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  40:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  44:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  48:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  4c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  50:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  54:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  58:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  5c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  60:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  64:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  68:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>
  6c:	0c 94 55 00 	jmp	0xaa	; 0xaa <__bad_interrupt>

00000070 <__ctors_end>:
  70:	11 24       	eor	r1, r1
  72:	1f be       	out	0x3f, r1	; 63
  74:	cf ef       	ldi	r28, 0xFF	; 255
  76:	d4 e0       	ldi	r29, 0x04	; 4
  78:	de bf       	out	0x3e, r29	; 62
  7a:	cd bf       	out	0x3d, r28	; 61

0000007c <__do_copy_data>:
  7c:	11 e0       	ldi	r17, 0x01	; 1
  7e:	a0 e0       	ldi	r26, 0x00	; 0
  80:	b1 e0       	ldi	r27, 0x01	; 1
  82:	ea e7       	ldi	r30, 0x7A	; 122
  84:	f1 e0       	ldi	r31, 0x01	; 1
  86:	02 c0       	rjmp	.+4      	; 0x8c <__do_copy_data+0x10>
  88:	05 90       	lpm	r0, Z+
  8a:	0d 92       	st	X+, r0
  8c:	a0 30       	cpi	r26, 0x00	; 0
  8e:	b1 07       	cpc	r27, r17
  90:	d9 f7       	brne	.-10     	; 0x88 <__do_copy_data+0xc>

00000092 <__do_clear_bss>:
  92:	21 e0       	ldi	r18, 0x01	; 1
  94:	a0 e0       	ldi	r26, 0x00	; 0
  96:	b1 e0       	ldi	r27, 0x01	; 1
  98:	01 c0       	rjmp	.+2      	; 0x9c <.do_clear_bss_start>

0000009a <.do_clear_bss_loop>:
  9a:	1d 92       	st	X+, r1

0000009c <.do_clear_bss_start>:
  9c:	a0 30       	cpi	r26, 0x00	; 0
  9e:	b2 07       	cpc	r27, r18
  a0:	e1 f7       	brne	.-8      	; 0x9a <.do_clear_bss_loop>
  a2:	0e 94 57 00 	call	0xae	; 0xae <main>
  a6:	0c 94 bb 00 	jmp	0x176	; 0x176 <_exit>

000000aa <__bad_interrupt>:
  aa:	0c 94 00 00 	jmp	0	; 0x0 <__vectors>

000000ae <main>:
	//adc_init();	
	//uart_init();

	//sram_test();
	//joy_calibrate();
	oled_init();
  ae:	0e 94 67 00 	call	0xce	; 0xce <oled_init>
	OLED_reset();
  b2:	0e 94 b1 00 	call	0x162	; 0x162 <OLED_reset>
	joystick_position pos;
	while(1)
    {	
		OLED_print_arrow();
  b6:	0e 94 9b 00 	call	0x136	; 0x136 <OLED_print_arrow>
	#else
		//round up by default
		__ticks_dc = (uint32_t)(ceil(fabs(__tmp)));
	#endif

	__builtin_avr_delay_cycles(__ticks_dc);
  ba:	2f ef       	ldi	r18, 0xFF	; 255
  bc:	8f e7       	ldi	r24, 0x7F	; 127
  be:	97 e0       	ldi	r25, 0x07	; 7
  c0:	21 50       	subi	r18, 0x01	; 1
  c2:	80 40       	sbci	r24, 0x00	; 0
  c4:	90 40       	sbci	r25, 0x00	; 0
  c6:	e1 f7       	brne	.-8      	; 0xc0 <main+0x12>
  c8:	00 c0       	rjmp	.+0      	; 0xca <main+0x1c>
  ca:	00 00       	nop
  cc:	f4 cf       	rjmp	.-24     	; 0xb6 <main+0x8>

000000ce <oled_init>:



void oled_init(void) {
	
	MCUCR |= (1<<SRE);
  ce:	85 b7       	in	r24, 0x35	; 53
  d0:	80 68       	ori	r24, 0x80	; 128
  d2:	85 bf       	out	0x35, r24	; 53
	SFIOR |= (1<<XMM2);
  d4:	80 b7       	in	r24, 0x30	; 48
  d6:	80 62       	ori	r24, 0x20	; 32
  d8:	80 bf       	out	0x30, r24	; 48
	volatile uint8_t *oled_cmd = (uint8_t *) 0x1000;
		
	*oled_cmd = 0xAE;	//Display off
  da:	e0 e0       	ldi	r30, 0x00	; 0
  dc:	f0 e1       	ldi	r31, 0x10	; 16
  de:	8e ea       	ldi	r24, 0xAE	; 174
  e0:	80 83       	st	Z, r24
	*oled_cmd = 0xA1;	//Segment remap
  e2:	81 ea       	ldi	r24, 0xA1	; 161
  e4:	80 83       	st	Z, r24
	*oled_cmd = 0xDA;	//Common pads hardware: alternative
  e6:	8a ed       	ldi	r24, 0xDA	; 218
  e8:	80 83       	st	Z, r24
	*oled_cmd = 0x12;
  ea:	82 e1       	ldi	r24, 0x12	; 18
  ec:	80 83       	st	Z, r24
	*oled_cmd = 0xC8;	//Common output scan direction:com63~com0
  ee:	88 ec       	ldi	r24, 0xC8	; 200
  f0:	80 83       	st	Z, r24
	*oled_cmd = 0xA8;	//Multiplex ration mode:63
  f2:	88 ea       	ldi	r24, 0xA8	; 168
  f4:	80 83       	st	Z, r24
	*oled_cmd = 0x3F;	
  f6:	8f e3       	ldi	r24, 0x3F	; 63
  f8:	80 83       	st	Z, r24
	*oled_cmd = 0xD5;	//Display divide ratio/osc. freq. mode
  fa:	85 ed       	ldi	r24, 0xD5	; 213
  fc:	80 83       	st	Z, r24
	*oled_cmd = 0x80;	
  fe:	80 e8       	ldi	r24, 0x80	; 128
 100:	80 83       	st	Z, r24
	*oled_cmd = 0x81;	//Contrast control
 102:	81 e8       	ldi	r24, 0x81	; 129
 104:	80 83       	st	Z, r24
	*oled_cmd = 0x50;
 106:	80 e5       	ldi	r24, 0x50	; 80
 108:	80 83       	st	Z, r24
	*oled_cmd = 0xD9;	//Set pre-charge period
 10a:	89 ed       	ldi	r24, 0xD9	; 217
 10c:	80 83       	st	Z, r24
	*oled_cmd = 0x21;	
 10e:	81 e2       	ldi	r24, 0x21	; 33
 110:	80 83       	st	Z, r24
	*oled_cmd = 0x20;	//Set memory addressing mode
 112:	80 e2       	ldi	r24, 0x20	; 32
 114:	80 83       	st	Z, r24
	*oled_cmd = 0x02;	
 116:	82 e0       	ldi	r24, 0x02	; 2
 118:	80 83       	st	Z, r24
	*oled_cmd = 0xDB;	//VCOM deselect level mode
 11a:	8b ed       	ldi	r24, 0xDB	; 219
 11c:	80 83       	st	Z, r24
	*oled_cmd = 0x30;	
 11e:	80 e3       	ldi	r24, 0x30	; 48
 120:	80 83       	st	Z, r24
	*oled_cmd = 0xAD;	//Master configuration
 122:	8d ea       	ldi	r24, 0xAD	; 173
 124:	80 83       	st	Z, r24
	*oled_cmd = 0x00;
 126:	10 82       	st	Z, r1
	*oled_cmd = 0xA4;	//Out follows RAM content
 128:	84 ea       	ldi	r24, 0xA4	; 164
 12a:	80 83       	st	Z, r24
	*oled_cmd = 0xA6;	//Set normal display
 12c:	86 ea       	ldi	r24, 0xA6	; 166
 12e:	80 83       	st	Z, r24
	*oled_cmd = 0xAF;	//Display on
 130:	8f ea       	ldi	r24, 0xAF	; 175
 132:	80 83       	st	Z, r24
 134:	08 95       	ret

00000136 <OLED_print_arrow>:
	}*/
}

void OLED_print_arrow(void) {
	volatile uint8_t *oled_data = (uint8_t *) 0x1200 ;
	*oled_data = 0b00011000;
 136:	e0 e0       	ldi	r30, 0x00	; 0
 138:	f2 e1       	ldi	r31, 0x12	; 18
 13a:	88 e1       	ldi	r24, 0x18	; 24
 13c:	80 83       	st	Z, r24
	*oled_data = 0b00011000;
 13e:	80 83       	st	Z, r24
	*oled_data = 0b01111110;
 140:	9e e7       	ldi	r25, 0x7E	; 126
 142:	90 83       	st	Z, r25
	*oled_data = 0b00111100;
 144:	9c e3       	ldi	r25, 0x3C	; 60
 146:	90 83       	st	Z, r25
	*oled_data = 0b00011000;
 148:	80 83       	st	Z, r24
 14a:	08 95       	ret

0000014c <OLED_clear_page>:
}

void OLED_go_to_page(uint8_t page) {
	volatile uint8_t *oled_cmd = (uint8_t *) 0x1000;
	*oled_cmd = 0xB0+page;
 14c:	80 55       	subi	r24, 0x50	; 80
 14e:	80 93 00 10 	sts	0x1000, r24
}

void OLED_clear_page(uint8_t page) {
	volatile uint8_t *oled_data = (uint8_t *) 0x1200;
	OLED_go_to_page(page);
	for(uint8_t i = 0; i < 128; i++){
 152:	80 e0       	ldi	r24, 0x00	; 0
		*oled_data = 0x00;
 154:	e0 e0       	ldi	r30, 0x00	; 0
 156:	f2 e1       	ldi	r31, 0x12	; 18
 158:	10 82       	st	Z, r1
}

void OLED_clear_page(uint8_t page) {
	volatile uint8_t *oled_data = (uint8_t *) 0x1200;
	OLED_go_to_page(page);
	for(uint8_t i = 0; i < 128; i++){
 15a:	8f 5f       	subi	r24, 0xFF	; 255
 15c:	80 38       	cpi	r24, 0x80	; 128
 15e:	e1 f7       	brne	.-8      	; 0x158 <OLED_clear_page+0xc>
		*oled_data = 0x00;
	}
}
 160:	08 95       	ret

00000162 <OLED_reset>:

void OLED_reset(void) {
 162:	cf 93       	push	r28
	for (uint8_t i = 0; i < 8; i++) {
 164:	c0 e0       	ldi	r28, 0x00	; 0
		OLED_clear_page(i);
 166:	8c 2f       	mov	r24, r28
 168:	0e 94 a6 00 	call	0x14c	; 0x14c <OLED_clear_page>
		*oled_data = 0x00;
	}
}

void OLED_reset(void) {
	for (uint8_t i = 0; i < 8; i++) {
 16c:	cf 5f       	subi	r28, 0xFF	; 255
 16e:	c8 30       	cpi	r28, 0x08	; 8
 170:	d1 f7       	brne	.-12     	; 0x166 <OLED_reset+0x4>
		OLED_clear_page(i);
	}
 172:	cf 91       	pop	r28
 174:	08 95       	ret

00000176 <_exit>:
 176:	f8 94       	cli

00000178 <__stop_program>:
 178:	ff cf       	rjmp	.-2      	; 0x178 <__stop_program>
